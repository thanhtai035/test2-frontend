{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Base/Remediator.js';\n\nclass EnrollPoll extends Remediator {\n  canRemediate() {\n    return !!this.values.startPolling || this.options.step === 'enroll-poll';\n  }\n\n  getNextStep(authClient, context) {\n    const common = super.getNextStep(authClient, context);\n    let authenticator = this.getAuthenticator();\n\n    if (!authenticator && (context === null || context === void 0 ? void 0 : context.currentAuthenticator)) {\n      authenticator = context.currentAuthenticator.value;\n    }\n\n    return Object.assign(Object.assign({}, common), {\n      authenticator,\n      poll: {\n        required: true,\n        refresh: this.remediation.refresh\n      }\n    });\n  }\n\n  getValuesAfterProceed() {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'startPolling');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n\n}\n\nEnrollPoll.remediationName = 'enroll-poll';\nexport { EnrollPoll };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAqBM,MAAOA,UAAP,SAA0BC,UAA1B,CAAsD;EAG1DC,YAAY;IACV,OAAO,CAAC,CAAC,KAAKC,MAAL,CAAYC,YAAd,IAA8B,KAAKC,OAAL,CAAaC,IAAb,KAAsB,aAA3D;EACD;;EAEDC,WAAW,CAACC,UAAD,EAAmCC,OAAnC,EAAuD;IAChE,MAAMC,MAAM,GAAG,MAAMH,WAAN,CAAkBC,UAAlB,EAA8BC,OAA9B,CAAf;IACA,IAAIE,aAAa,GAAG,KAAKC,gBAAL,EAApB;;IACA,IAAI,CAACD,aAAD,KAAkBF,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEI,oBAA3B,CAAJ,EAAqD;MACnDF,aAAa,GAAGF,OAAO,CAACI,oBAAR,CAA6BC,KAA7C;IACD;;IACD,uCACKJ,MADL,GACW;MACTC,aADS;MAETI,IAAI,EAAE;QACJC,QAAQ,EAAE,IADN;QAEJC,OAAO,EAAE,KAAKC,WAAL,CAAiBD;MAFtB;IAFG,CADX;EAQD;;EAEDE,qBAAqB;IACnB,IAAIC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKnB,MAAjB,EAAyBoB,MAAzB,CAAgCC,QAAQ,IAAIA,QAAQ,KAAK,cAAzD,CAApB;IACA,OAAOJ,aAAa,CAACK,MAAd,CAAqB,CAACtB,MAAD,EAASqB,QAAT,KAAsBH,gCAAKlB,MAAL,GAAW;MAAE,CAACqB,QAAD,GAAY,KAAKrB,MAAL,CAAYqB,QAAZ;IAAd,CAAX,CAA3C,EAA6F,EAA7F,CAAP;EACD;;AA1ByD;;AACnDxB,UAAe,gBAAf,GAAkB,aAAlB","names":["EnrollPoll","Remediator","canRemediate","values","startPolling","options","step","getNextStep","authClient","context","common","authenticator","getAuthenticator","currentAuthenticator","value","poll","required","refresh","remediation","getValuesAfterProceed","trimmedValues","Object","keys","filter","valueKey","reduce"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\remediators\\EnrollPoll.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Base/Remediator';\nimport { NextStep, OktaAuthIdxInterface } from '../../types';\nimport { IdxContext } from '../types/idx-js';\n\nexport interface EnrollPollValues extends RemediationValues {\n  startPolling?: boolean;\n}\n\nexport class EnrollPoll extends Remediator<EnrollPollValues> {\n  static remediationName = 'enroll-poll';\n\n  canRemediate() {\n    return !!this.values.startPolling || this.options.step === 'enroll-poll';\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, context?: IdxContext): NextStep {\n    const common = super.getNextStep(authClient, context);\n    let authenticator = this.getAuthenticator();\n    if (!authenticator && context?.currentAuthenticator) {\n      authenticator = context.currentAuthenticator.value;\n    }\n    return {\n      ...common,\n      authenticator,\n      poll: {\n        required: true,\n        refresh: this.remediation.refresh\n      },\n    };\n  }\n\n  getValuesAfterProceed(): EnrollPollValues {\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'startPolling');\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}