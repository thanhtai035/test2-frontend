{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nvar IdxStatus;\n\n(function (IdxStatus) {\n  IdxStatus[\"SUCCESS\"] = \"SUCCESS\";\n  IdxStatus[\"PENDING\"] = \"PENDING\";\n  IdxStatus[\"FAILURE\"] = \"FAILURE\";\n  IdxStatus[\"TERMINAL\"] = \"TERMINAL\";\n  IdxStatus[\"CANCELED\"] = \"CANCELED\";\n})(IdxStatus || (IdxStatus = {}));\n\nvar AuthenticatorKey;\n\n(function (AuthenticatorKey) {\n  AuthenticatorKey[\"OKTA_PASSWORD\"] = \"okta_password\";\n  AuthenticatorKey[\"OKTA_EMAIL\"] = \"okta_email\";\n  AuthenticatorKey[\"PHONE_NUMBER\"] = \"phone_number\";\n  AuthenticatorKey[\"GOOGLE_AUTHENTICATOR\"] = \"google_otp\";\n  AuthenticatorKey[\"SECURITY_QUESTION\"] = \"security_question\";\n  AuthenticatorKey[\"OKTA_VERIFY\"] = \"okta_verify\";\n  AuthenticatorKey[\"WEBAUTHN\"] = \"webauthn\";\n})(AuthenticatorKey || (AuthenticatorKey = {}));\n\nvar IdxFeature;\n\n(function (IdxFeature) {\n  IdxFeature[\"PASSWORD_RECOVERY\"] = \"recover-password\";\n  IdxFeature[\"REGISTRATION\"] = \"enroll-profile\";\n  IdxFeature[\"SOCIAL_IDP\"] = \"redirect-idp\";\n  IdxFeature[\"ACCOUNT_UNLOCK\"] = \"unlock-account\";\n})(IdxFeature || (IdxFeature = {}));\n\nfunction isAuthenticator(obj) {\n  return obj && (obj.key || obj.id);\n}\n\nexport { AuthenticatorKey, IdxFeature, IdxStatus, isAuthenticator };","map":{"version":3,"mappings":";;;;;;;;;;;IAkBYA;;AAAZ,WAAYA,SAAZ,EAAqB;EACnBA;EACAA;EACAA;EACAA;EACAA;AACD,CAND,EAAYA,SAAS,KAATA,SAAS,GAMpB,EANoB,CAArB;;IAQYC;;AAAZ,WAAYA,gBAAZ,EAA4B;EAC1BA;EACAA;EACAA;EACAA;EACAA;EACAA;EACAA;AACD,CARD,EAAYA,gBAAgB,KAAhBA,gBAAgB,GAQ3B,EAR2B,CAA5B;;IAmDYC;;AAAZ,WAAYA,UAAZ,EAAsB;EACpBA;EACAA;EACAA;EACAA;AACD,CALD,EAAYA,UAAU,KAAVA,UAAU,GAKrB,EALqB,CAAtB;;AA+CM,SAAUC,eAAV,CAA0BC,GAA1B,EAAkC;EACtC,OAAOA,GAAG,KAAKA,GAAG,CAACC,GAAJ,IAAWD,GAAG,CAACE,EAApB,CAAV;AACF","names":["IdxStatus","AuthenticatorKey","IdxFeature","isAuthenticator","obj","key","id"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\types\\api.ts"],"sourcesContent":["import { APIError } from '../../types/api';\nimport { Tokens } from '../../types/Token';\nimport { PKCETransactionMeta } from '../../types/Transaction';\nimport { FlowIdentifier } from './FlowIdentifier';\nimport {\n  IdxActions,\n  IdxAuthenticator,\n  IdxContext,\n  IdxForm,\n  IdxMessage,\n  IdxOption,\n  IdxRemediation,\n  IdxResponse,\n  RawIdxResponse,\n  IdxActionParams,\n  IdpConfig,\n} from './idx-js';\n\nexport enum IdxStatus {\n  SUCCESS = 'SUCCESS',\n  PENDING = 'PENDING',\n  FAILURE = 'FAILURE',\n  TERMINAL = 'TERMINAL',\n  CANCELED = 'CANCELED',\n}\n\nexport enum AuthenticatorKey {\n  OKTA_PASSWORD = 'okta_password',\n  OKTA_EMAIL = 'okta_email',\n  PHONE_NUMBER = 'phone_number',\n  GOOGLE_AUTHENTICATOR = 'google_otp',\n  SECURITY_QUESTION = 'security_question',\n  OKTA_VERIFY = 'okta_verify',\n  WEBAUTHN = 'webauthn',\n}\n\nexport type Input = {\n  name: string;\n  key?: string;\n  type?: string;\n  label?: string;\n  value?: string | {form: IdxForm} | Input[];\n  minLength?: number;\n  maxLength?: number;\n  secret?: boolean;\n  required?: boolean;\n  options?: IdxOption[];\n  mutable?: boolean;\n  visible?: boolean;\n}\n\n\nexport interface IdxPollOptions {\n  required?: boolean;\n  refresh?: number;\n}\n\nexport type NextStep = {\n  name: string;\n  authenticator?: IdxAuthenticator;\n  canSkip?: boolean;\n  canResend?: boolean;\n  inputs?: Input[];\n  options?: IdxOption[];\n  poll?: IdxPollOptions;\n  authenticatorEnrollments?: IdxAuthenticator[];\n  // eslint-disable-next-line no-use-before-define\n  action?: (params?: IdxActionParams) => Promise<IdxTransaction>;\n  idp?: IdpConfig;\n  href?: string;\n  relatesTo?: {\n    type?: string;\n    value: IdxAuthenticator;\n  };\n  refresh?: number;\n}\n\nexport enum IdxFeature {\n  PASSWORD_RECOVERY = 'recover-password',\n  REGISTRATION = 'enroll-profile',\n  SOCIAL_IDP = 'redirect-idp',\n  ACCOUNT_UNLOCK = 'unlock-account',\n}\n\nexport interface IdxTransactionMeta extends PKCETransactionMeta {\n  interactionHandle?: string;\n  remediations?: string[];\n  flow?: FlowIdentifier;\n  withCredentials?: boolean;\n  activationToken?: string;\n  recoveryToken?: string;\n  maxAge?: string | number;\n}\n\nexport interface IdxTransaction {\n  status: IdxStatus;\n  tokens?: Tokens;\n  nextStep?: NextStep;\n  messages?: IdxMessage[];\n  error?: APIError | IdxResponse;\n  meta?: IdxTransactionMeta;\n  enabledFeatures?: IdxFeature[];\n  availableSteps?: NextStep[];\n  requestDidSucceed?: boolean;\n  stepUp?: boolean;\n  \n  // from idx-js, used by signin widget\n  proceed: (remediationName: string, params: unknown) => Promise<IdxResponse>;\n  neededToProceed: IdxRemediation[];\n  rawIdxState: RawIdxResponse;\n  interactionCode?: string;\n  actions: IdxActions;\n  context: IdxContext;\n}\n\n\nexport type Authenticator = {\n  id?: string;\n  key?: string;\n  methodType?: string;\n  phoneNumber?: string;\n  channel?: string;\n};\n\nexport function isAuthenticator(obj: any): obj is Authenticator {\n  return obj && (obj.key || obj.id);\n}\n\nexport interface RemediationResponse {\n  idxResponse: IdxResponse;\n  nextStep?: NextStep;\n  messages?: IdxMessage[];\n  terminal?: boolean;\n  canceled?: boolean;\n}\n\nexport interface InteractResponse {\n  state?: string;\n  interactionHandle: string;\n  meta: IdxTransactionMeta;\n}\n"]},"metadata":{},"sourceType":"module"}