{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport ProfileTransaction from './transactions/ProfileTransaction.js';\nimport ProfileSchemaTransaction from './transactions/ProfileSchemaTransaction.js';\nimport EmailTransaction from './transactions/EmailTransaction.js';\nimport EmailStatusTransaction from './transactions/EmailStatusTransaction.js';\nimport EmailChallengeTransaction from './transactions/EmailChallengeTransaction.js';\nimport PhoneTransaction from './transactions/PhoneTransaction.js';\nimport BaseTransaction from './transactions/Base.js';\nimport { httpRequest } from '../http/request.js';\nimport AuthApiError from '../errors/AuthApiError.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\n\nconst parseInsufficientAuthenticationError = header => {\n  if (!header) {\n    throw new AuthSdkError('Missing header string');\n  }\n\n  return header.split(',').map(part => part.trim()).map(part => part.split('=')).reduce((acc, curr) => {\n    acc[curr[0]] = curr[1].replace(/^\"(.*)\"$/, '$1');\n    return acc;\n  }, {});\n};\n\nasync function sendRequest(oktaAuth, options) {\n  var _a, _b;\n\n  const {\n    accessToken: accessTokenObj,\n    idToken: idTokenObj\n  } = oktaAuth.tokenManager.getTokensSync();\n  const idToken = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.idToken;\n  const accessToken = options.accessToken || (accessTokenObj === null || accessTokenObj === void 0 ? void 0 : accessTokenObj.accessToken);\n  const {\n    issuer\n  } = oktaAuth.options;\n  const {\n    url,\n    method,\n    payload\n  } = options;\n  const requestUrl = url.startsWith(issuer) ? url : `${issuer}${url}`;\n\n  if (!accessToken) {\n    throw new AuthSdkError('AccessToken is required to request MyAccount API endpoints.');\n  }\n\n  let res;\n\n  try {\n    res = await httpRequest(oktaAuth, Object.assign({\n      headers: {\n        'Accept': '*/*;okta-version=1.0.0'\n      },\n      accessToken,\n      url: requestUrl,\n      method\n    }, payload && {\n      args: payload\n    }));\n  } catch (err) {\n    const errorResp = err.xhr;\n\n    if (idToken && (errorResp === null || errorResp === void 0 ? void 0 : errorResp.status) === 403 && !!((_a = errorResp === null || errorResp === void 0 ? void 0 : errorResp.headers) === null || _a === void 0 ? void 0 : _a['www-authenticate'])) {\n      const {\n        error,\n        error_description,\n        max_age\n      } = parseInsufficientAuthenticationError((_b = errorResp === null || errorResp === void 0 ? void 0 : errorResp.headers) === null || _b === void 0 ? void 0 : _b['www-authenticate']);\n\n      if (error === 'insufficient_authentication_context') {\n        const insufficientAuthenticationError = new AuthApiError({\n          errorSummary: error,\n          errorCauses: [{\n            errorSummary: error_description\n          }]\n        }, errorResp, {\n          max_age: +max_age\n        });\n        throw insufficientAuthenticationError;\n      } else {\n        throw err;\n      }\n    } else {\n      throw err;\n    }\n  }\n\n  const map = {\n    EmailTransaction,\n    EmailStatusTransaction,\n    EmailChallengeTransaction,\n    ProfileTransaction,\n    ProfileSchemaTransaction,\n    PhoneTransaction\n  };\n  const TransactionClass = map[options.transactionClassName] || BaseTransaction;\n\n  if (Array.isArray(res)) {\n    return res.map(item => new TransactionClass(oktaAuth, {\n      res: item,\n      accessToken\n    }));\n  }\n\n  return new TransactionClass(oktaAuth, {\n    res,\n    accessToken\n  });\n}\n\nfunction generateRequestFnFromLinks(_ref) {\n  let {\n    oktaAuth,\n    accessToken,\n    methodName,\n    links,\n    transactionClassName\n  } = _ref;\n\n  for (const method of ['GET', 'POST', 'PUT', 'DELETE']) {\n    if (method.toLowerCase() === methodName) {\n      const link = links.self;\n      return async payload => sendRequest(oktaAuth, {\n        accessToken,\n        url: link.href,\n        method,\n        payload,\n        transactionClassName\n      });\n    }\n  }\n\n  const link = links[methodName];\n\n  if (!link) {\n    throw new AuthSdkError(`No link is found with methodName: ${methodName}`);\n  }\n\n  return async payload => sendRequest(oktaAuth, {\n    accessToken,\n    url: link.href,\n    method: link.hints.allow[0],\n    payload,\n    transactionClassName\n  });\n}\n\nexport { generateRequestFnFromLinks, sendRequest };","map":{"version":3,"mappings":"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","names":["parseInsufficientAuthenticationError","header","AuthSdkError","split","map","part","trim","reduce","acc","curr","replace","sendRequest","oktaAuth","options","accessToken","accessTokenObj","idToken","idTokenObj","tokenManager","getTokensSync","issuer","url","method","payload","requestUrl","startsWith","res","httpRequest","Object","headers","args","err","errorResp","xhr","status","_a","error","error_description","max_age","_b","insufficientAuthenticationError","AuthApiError","errorSummary","errorCauses","EmailTransaction","EmailStatusTransaction","EmailChallengeTransaction","ProfileTransaction","ProfileSchemaTransaction","PhoneTransaction","TransactionClass","transactionClassName","BaseTransaction","Array","isArray","item","methodName","links","toLowerCase","link","self","href","hints","allow"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\myaccount\\request.ts"],"sourcesContent":["import { \n  BaseTransaction,\n  EmailTransaction,\n  EmailStatusTransaction,\n  EmailChallengeTransaction,\n  ProfileTransaction,\n  ProfileSchemaTransaction,\n  PhoneTransaction\n} from './transactions';\nimport { httpRequest } from '../http';\nimport { AuthApiError, AuthSdkError } from '../errors';\nimport { MyAccountRequestOptions as RequestOptions } from './types';\nimport { OktaAuthInterface } from '../types';\n\nexport type TransactionLink = {\n  href: string;\n  hints?: {\n    allow?: string[];\n  };\n}\n\ntype TransactionLinks = {\n  self: TransactionLink;\n  [property: string]: TransactionLink;\n}\n\ntype SendRequestOptions = RequestOptions & {\n  url: string;\n  method: string;\n  transactionClassName?: string;\n}\n\ntype InsufficientAuthenticationError = {\n  error: string;\n  // eslint-disable-next-line camelcase\n  error_description: string;\n  // eslint-disable-next-line camelcase\n  max_age: string;\n}\n\nconst parseInsufficientAuthenticationError = (\n  header: string\n): InsufficientAuthenticationError => {\n  if (!header) {\n    throw new AuthSdkError('Missing header string');\n  }\n\n  return header\n    .split(',')\n    .map(part => part.trim())\n    .map(part => part.split('='))\n    .reduce((acc, curr) => {\n      // unwrap quotes from value\n      acc[curr[0]] = curr[1].replace(/^\"(.*)\"$/, '$1');\n      return acc;\n    }, {}) as InsufficientAuthenticationError;\n};\n\n/* eslint-disable complexity */\nexport async function sendRequest<T extends BaseTransaction> (\n  oktaAuth: OktaAuthInterface, \n  options: SendRequestOptions\n): Promise<T | T[]> {\n  const { \n    accessToken: accessTokenObj,\n    idToken: idTokenObj \n  } = oktaAuth.tokenManager.getTokensSync();\n  \n  const idToken = idTokenObj?.idToken;\n  const accessToken = options.accessToken || accessTokenObj?.accessToken;\n  const { issuer } = oktaAuth.options;\n  const { url, method, payload } = options;\n  const requestUrl = url.startsWith(issuer!) ? url : `${issuer}${url}`;\n\n  if (!accessToken) {\n    throw new AuthSdkError('AccessToken is required to request MyAccount API endpoints.');\n  }\n  \n  let res;\n  try {\n    res = await httpRequest(oktaAuth, {\n      headers: { 'Accept': '*/*;okta-version=1.0.0' },\n      accessToken,\n      url: requestUrl,\n      method,\n      ...(payload && { args: payload })\n    });\n  } catch (err) {\n    const errorResp = (err as AuthApiError).xhr;\n    if (idToken && errorResp?.status === 403 && !!errorResp?.headers?.['www-authenticate']) {\n      const { \n        error, \n        // eslint-disable-next-line camelcase\n        error_description,\n        // eslint-disable-next-line camelcase\n        max_age \n      } = parseInsufficientAuthenticationError(errorResp?.headers?.['www-authenticate']);\n      if (error === 'insufficient_authentication_context') {\n        const insufficientAuthenticationError = new AuthApiError(\n          { \n            errorSummary: error,\n            // eslint-disable-next-line camelcase\n            errorCauses: [{ errorSummary: error_description }]\n          }, \n          errorResp, \n          // eslint-disable-next-line camelcase\n          { max_age: +max_age }\n        );\n        throw insufficientAuthenticationError;\n      } else {\n        throw err;\n      }\n    } else {\n      throw err;\n    }\n  }\n\n  const map = {\n    EmailTransaction,\n    EmailStatusTransaction,\n    EmailChallengeTransaction,\n    ProfileTransaction,\n    ProfileSchemaTransaction,\n    PhoneTransaction\n  };\n  const TransactionClass = map[options.transactionClassName!] || BaseTransaction;\n\n  if (Array.isArray(res)) {\n    return res.map(item => new TransactionClass(oktaAuth, { \n      res: item, \n      accessToken\n    }));\n  }\n\n  return new TransactionClass(oktaAuth, { \n    res, \n    accessToken\n  });\n}\n/* eslint-enable complexity */\n\nexport type GenerateRequestFnFromLinksOptions = {\n  oktaAuth: OktaAuthInterface;\n  accessToken: string;\n  methodName: string;\n  links: TransactionLinks;\n  transactionClassName?: string;\n}\n\ntype IRequestFnFromLinks = <T extends BaseTransaction>(payload?) => Promise<T | T[]>;\n\nexport function generateRequestFnFromLinks ({\n  oktaAuth, \n  accessToken,\n  methodName,\n  links,\n  transactionClassName\n}: GenerateRequestFnFromLinksOptions): IRequestFnFromLinks {\n  for (const method of ['GET', 'POST', 'PUT', 'DELETE']) {\n    if (method.toLowerCase() === methodName) {\n      const link = links.self;\n      return (async (payload?) => sendRequest(oktaAuth, {\n        accessToken,\n        url: link.href,\n        method,\n        payload,\n        transactionClassName\n      }));\n    }\n  }\n  \n  const link = links[methodName];\n  if (!link) {\n    throw new AuthSdkError(`No link is found with methodName: ${methodName}`);\n  }\n\n  return (async (payload?) => sendRequest(oktaAuth, {\n    accessToken,\n    url: link.href,\n    method: link.hints!.allow![0],\n    payload,\n    transactionClassName\n  }));\n}\n"]},"metadata":{},"sourceType":"module"}