{"ast":null,"code":"import _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from './errors/AuthSdkError.js';\n\nvar SavedObject = /*#__PURE__*/function () {\n  function SavedObject(storage, storageName) {\n    _classCallCheck(this, SavedObject);\n\n    if (!storage) {\n      throw new AuthSdkError('\"storage\" is required');\n    }\n\n    if (typeof storageName !== 'string' || !storageName.length) {\n      throw new AuthSdkError('\"storageName\" is required');\n    }\n\n    this.storageName = storageName;\n    this.storageProvider = storage;\n  }\n\n  _createClass(SavedObject, [{\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.getStorage()[key];\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      return this.updateStorage(key, value);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key) {\n      return this.clearStorage(key);\n    }\n  }, {\n    key: \"isSharedStorage\",\n    value: function isSharedStorage() {\n      var _a, _b;\n\n      return typeof localStorage !== 'undefined' && this.storageProvider === localStorage || !!((_b = (_a = this.storageProvider).isSharedStorage) === null || _b === void 0 ? void 0 : _b.call(_a));\n    }\n  }, {\n    key: \"getStorage\",\n    value: function getStorage() {\n      var storageString = this.storageProvider.getItem(this.storageName);\n      storageString = storageString || '{}';\n\n      try {\n        return JSON.parse(storageString);\n      } catch (e) {\n        throw new AuthSdkError('Unable to parse storage string: ' + this.storageName);\n      }\n    }\n  }, {\n    key: \"setStorage\",\n    value: function setStorage(obj) {\n      try {\n        var storageString = obj ? JSON.stringify(obj) : '{}';\n        this.storageProvider.setItem(this.storageName, storageString);\n      } catch (e) {\n        throw new AuthSdkError('Unable to set storage: ' + this.storageName);\n      }\n    }\n  }, {\n    key: \"clearStorage\",\n    value: function clearStorage(key) {\n      if (!key) {\n        if (this.storageProvider.removeItem) {\n          this.storageProvider.removeItem(this.storageName);\n        } else {\n          this.setStorage();\n        }\n\n        return;\n      }\n\n      var obj = this.getStorage();\n      delete obj[key];\n      this.setStorage(obj);\n    }\n  }, {\n    key: \"updateStorage\",\n    value: function updateStorage(key, value) {\n      var obj = this.getStorage();\n      obj[key] = value;\n      this.setStorage(obj);\n    }\n  }]);\n\n  return SavedObject;\n}();\n\nexport { SavedObject as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;IAiBqBA,W;EAInB,qBAAYC,OAAZ,EAAoCC,WAApC,EAAuD;IAAA;;IACrD,IAAI,CAACD,OAAL,EAAc;MACZ,MAAM,IAAIE,YAAJ,CAAiB,uBAAjB,CAAN;IACD;;IAED,IAAI,OAAOD,WAAP,KAAuB,QAAvB,IAAmC,CAACA,WAAW,CAACE,MAApD,EAA4D;MAC1D,MAAM,IAAID,YAAJ,CAAiB,2BAAjB,CAAN;IACD;;IAED,KAAKD,WAAL,GAAmBA,WAAnB;IACA,KAAKG,eAAL,GAAuBJ,OAAvB;EACD;;;;WAMD,iBAAQK,GAAR,EAAmB;MACjB,OAAO,KAAKC,UAAL,GAAkBD,GAAlB,CAAP;IACD;;;WAED,iBAAQA,GAAR,EAAqBE,KAArB,EAA+B;MAC7B,OAAO,KAAKC,aAAL,CAAmBH,GAAnB,EAAwBE,KAAxB,CAAP;IACD;;;WAED,oBAAWF,GAAX,EAAsB;MACpB,OAAO,KAAKI,YAAL,CAAkBJ,GAAlB,CAAP;IACD;;;WAMD,2BAAe;;;MACb,OAAO,OAAOK,YAAP,KAAwB,WAAxB,IAAuC,KAAKN,eAAL,KAAyBM,YAAhE,IACF,CAAC,EAAC,iBAAKN,eAAL,EAAqBO,eAArB,MAAwC,IAAxC,IAAwCC,aAAxC,GAAwC,MAAxC,GAAwCA,WAAzC,CADN;IAED;;;WAED,sBAAU;MACR,IAAIC,aAAa,GAAG,KAAKT,eAAL,CAAqBU,OAArB,CAA6B,KAAKb,WAAlC,CAApB;MACAY,aAAa,GAAGA,aAAa,IAAI,IAAjC;;MACA,IAAI;QACF,OAAOE,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAP;MACD,CAFD,CAEE,OAAMI,CAAN,EAAS;QACT,MAAM,IAAIf,YAAJ,CAAiB,qCAAqC,KAAKD,WAA3D,CAAN;MACD;IACF;;;WAED,oBAAWiB,GAAX,EAAoB;MAClB,IAAI;QACF,IAAIL,aAAa,GAAGK,GAAG,GAAGH,IAAI,CAACI,SAAL,CAAeD,GAAf,CAAH,GAAyB,IAAhD;QACA,KAAKd,eAAL,CAAqBgB,OAArB,CAA6B,KAAKnB,WAAlC,EAA+CY,aAA/C;MACD,CAHD,CAGE,OAAMI,CAAN,EAAS;QACT,MAAM,IAAIf,YAAJ,CAAiB,4BAA4B,KAAKD,WAAlD,CAAN;MACD;IACF;;;WAED,sBAAaI,GAAb,EAAyB;MACvB,IAAI,CAACA,GAAL,EAAU;QAER,IAAI,KAAKD,eAAL,CAAqBiB,UAAzB,EAAqC;UACnC,KAAKjB,eAAL,CAAqBiB,UAArB,CAAgC,KAAKpB,WAArC;QACD,CAFD,MAEO;UACL,KAAKqB,UAAL;QACD;;QACD;MACD;;MAED,IAAIJ,GAAG,GAAG,KAAKZ,UAAL,EAAV;MACA,OAAOY,GAAG,CAACb,GAAD,CAAV;MACA,KAAKiB,UAAL,CAAgBJ,GAAhB;IACD;;;WAED,uBAAcb,GAAd,EAAmBE,KAAnB,EAAwB;MACtB,IAAIW,GAAG,GAAG,KAAKZ,UAAL,EAAV;MACAY,GAAG,CAACb,GAAD,CAAH,GAAWE,KAAX;MACA,KAAKe,UAAL,CAAgBJ,GAAhB;IACD","names":["SavedObject","storage","storageName","AuthSdkError","length","storageProvider","key","getStorage","value","updateStorage","clearStorage","localStorage","isSharedStorage","_b","storageString","getItem","JSON","parse","e","obj","stringify","setItem","removeItem","setStorage"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\SavedObject.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport AuthSdkError from './errors/AuthSdkError';\nimport { StorageProvider, SimpleStorage } from './types';\n\n// formerly known as \"storageBuilder\". Represents an object saved under a key/name.\nexport default class SavedObject implements StorageProvider {\n  storageProvider: SimpleStorage;\n  storageName: string;\n\n  constructor(storage: SimpleStorage, storageName: string) {\n    if (!storage) {\n      throw new AuthSdkError('\"storage\" is required');\n    }\n\n    if (typeof storageName !== 'string' || !storageName.length) {\n      throw new AuthSdkError('\"storageName\" is required');\n    }\n\n    this.storageName = storageName;\n    this.storageProvider = storage;\n  }\n\n  //\n  // SimpleStorage interface\n  //\n\n  getItem(key: string) {\n    return this.getStorage()[key];\n  }\n\n  setItem(key: string, value: any) {\n    return this.updateStorage(key, value);\n  }\n\n  removeItem(key: string) {\n    return this.clearStorage(key);\n  }\n\n  //\n  // StorageProvider interface\n  //\n\n  isSharedStorage() {\n    return typeof localStorage !== 'undefined' && this.storageProvider === localStorage as any \n      || !!this.storageProvider.isSharedStorage?.();\n  }\n\n  getStorage() {\n    var storageString = this.storageProvider.getItem(this.storageName);\n    storageString = storageString || '{}';\n    try {\n      return JSON.parse(storageString);\n    } catch(e) {\n      throw new AuthSdkError('Unable to parse storage string: ' + this.storageName);\n    }\n  }\n\n  setStorage(obj?: any) {\n    try {\n      var storageString = obj ? JSON.stringify(obj) : '{}';\n      this.storageProvider.setItem(this.storageName, storageString);\n    } catch(e) {\n      throw new AuthSdkError('Unable to set storage: ' + this.storageName);\n    }\n  }\n\n  clearStorage(key?: string) {\n    if (!key) {\n      // clear all\n      if (this.storageProvider.removeItem) {\n        this.storageProvider.removeItem(this.storageName);\n      } else {\n        this.setStorage();\n      }\n      return;\n    }\n\n    var obj = this.getStorage();\n    delete obj[key];\n    this.setStorage(obj);\n  }\n\n  updateStorage(key, value) {\n    var obj = this.getStorage();\n    obj[key] = value;\n    this.setStorage(obj);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}