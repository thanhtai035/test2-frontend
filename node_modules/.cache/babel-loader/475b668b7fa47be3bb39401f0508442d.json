{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { validateVersionConfig, makeIdxState } from './idxState/index.js';\nimport { isRawIdxResponse } from './types/idx-js.js';\nimport { isAuthApiError } from '../errors/index.js';\nimport { httpRequest } from '../http/request.js';\nimport { getOAuthDomain } from '../oidc/util/oauth.js';\nimport { IDX_API_VERSION } from '../constants.js';\nimport './types/api.js';\nimport '../myaccount/types.js';\n\nfunction introspect(_x) {\n  return _introspect.apply(this, arguments);\n}\n\nfunction _introspect() {\n  _introspect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n        _a,\n        rawIdxResponse,\n        requestDidSucceed,\n        savedIdxResponse,\n        version,\n        domain,\n        interactionHandle,\n        stateHandle,\n        _withCredentials,\n        url,\n        body,\n        headers,\n        withCredentials,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n\n            if (savedIdxResponse) {\n              rawIdxResponse = savedIdxResponse.rawIdxResponse;\n              requestDidSucceed = savedIdxResponse.requestDidSucceed;\n            }\n\n            if (rawIdxResponse) {\n              _context.next = 27;\n              break;\n            }\n\n            version = options.version || IDX_API_VERSION;\n            domain = getOAuthDomain(authClient);\n            interactionHandle = options.interactionHandle, stateHandle = options.stateHandle;\n            _withCredentials = (_a = options.withCredentials) !== null && _a !== void 0 ? _a : true;\n            _context.prev = 8;\n            requestDidSucceed = true;\n            validateVersionConfig(version);\n            url = \"\".concat(domain, \"/idp/idx/introspect\");\n            body = stateHandle ? {\n              stateToken: stateHandle\n            } : {\n              interactionHandle: interactionHandle\n            };\n            headers = {\n              'Content-Type': \"application/ion+json; okta-version=\".concat(version),\n              Accept: \"application/ion+json; okta-version=\".concat(version)\n            };\n            _context.next = 16;\n            return httpRequest(authClient, {\n              method: 'POST',\n              url: url,\n              headers: headers,\n              withCredentials: _withCredentials,\n              args: body\n            });\n\n          case 16:\n            rawIdxResponse = _context.sent;\n            _context.next = 27;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](8);\n\n            if (!(isAuthApiError(_context.t0) && _context.t0.xhr && isRawIdxResponse(_context.t0.xhr.responseJSON))) {\n              _context.next = 26;\n              break;\n            }\n\n            rawIdxResponse = _context.t0.xhr.responseJSON;\n            requestDidSucceed = false;\n            _context.next = 27;\n            break;\n\n          case 26:\n            throw _context.t0;\n\n          case 27:\n            withCredentials = options.withCredentials;\n            return _context.abrupt(\"return\", makeIdxState(authClient, rawIdxResponse, {\n              withCredentials: withCredentials\n            }, requestDidSucceed));\n\n          case 29:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 19]]);\n  }));\n  return _introspect.apply(this, arguments);\n}\n\nexport { introspect };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;SAqBsBA,U;;;;;2EAAf,iBACLC,UADK;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAELC,OAFK,2DAEwB,EAFxB;YAQCC,gBARD,GAQoBF,UAAU,CAACG,kBAAX,CAA8BC,eAA9B,CAA8CH,OAA9C,CARpB;;YASL,IAAIC,gBAAJ,EAAsB;cACpBG,cAAc,GAAGH,gBAAgB,CAACG,cAAlC;cACAC,iBAAiB,GAAGJ,gBAAgB,CAACI,iBAArC;YACD;;YAZI,IAeAD,cAfA;cAAA;cAAA;YAAA;;YAgBGE,OAhBH,GAgBaN,OAAO,CAACM,OAAR,IAAmBC,eAhBhC;YAiBGC,MAjBH,GAiBYC,cAAc,CAACV,UAAD,CAjB1B;YAkBKW,iBAlBL,GAkBwCV,OAlBxC,CAkBKU,iBAlBL,EAkBwBC,WAlBxB,GAkBwCX,OAlBxC,CAkBwBW,WAlBxB;YAmBGC,gBAnBH,GAmBqB,aAAO,CAACA,eAAR,MAAuB,IAAvB,IAAuBC,aAAvB,GAAuBA,EAAvB,GAA2B,IAnBhD;YAAA;YAqBDR,iBAAiB,GAAG,IAApB;YACAS,qBAAqB,CAACR,OAAD,CAArB;YACMS,GAvBL,aAuBcP,MAvBd;YAwBKQ,IAxBL,GAwBYL,WAAW,GAAG;cAAEM,UAAU,EAAEN;YAAd,CAAH,GAAiC;cAAED,iBAAiB,EAAjBA;YAAF,CAxBxD;YAyBKQ,OAzBL,GAyBe;cACd,6DAAsDZ,OAAtD,CADc;cAEda,MAAM,+CAAwCb,OAAxC;YAFQ,CAzBf;YAAA;YAAA,OA6BsBc,WAAW,CAACrB,UAAD,EAAa;cAC7CsB,MAAM,EAAE,MADqC;cAE7CN,GAAG,EAAHA,GAF6C;cAG7CG,OAAO,EAAPA,OAH6C;cAI7CN,eAAe,EAAfA,gBAJ6C;cAK7CU,IAAI,EAAEN;YALuC,CAAb,CA7BjC;;UAAA;YA6BDZ,cA7BC;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA,MAqCGmB,cAAc,aAAd,IAAuB,YAAIC,GAA3B,IAAkCC,gBAAgB,CAAC,YAAID,GAAJ,CAAQE,YAAT,CArCrD;cAAA;cAAA;YAAA;;YAsCCtB,cAAc,GAAG,YAAIoB,GAAJ,CAAQE,YAAzB;YACArB,iBAAiB,GAAG,KAApB;YAvCD;YAAA;;UAAA;YAAA;;UAAA;YA8CGO,eA9CH,GA8CuBZ,OA9CvB,CA8CGY,eA9CH;YAAA,iCA+CEe,YAAY,CAAC5B,UAAD,EAAaK,cAAb,EAA6B;cAAEQ,eAAe,EAAfA;YAAF,CAA7B,EAAkDP,iBAAlD,CA/Cd;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["introspect","authClient","options","savedIdxResponse","transactionManager","loadIdxResponse","rawIdxResponse","requestDidSucceed","version","IDX_API_VERSION","domain","getOAuthDomain","interactionHandle","stateHandle","withCredentials","_a","validateVersionConfig","url","body","stateToken","headers","Accept","httpRequest","method","args","isAuthApiError","xhr","isRawIdxResponse","responseJSON","makeIdxState"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\introspect.ts"],"sourcesContent":["/* eslint-disable complexity */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { makeIdxState, validateVersionConfig } from './idxState';\nimport { IntrospectOptions, OktaAuthIdxInterface } from '../types';\nimport { IdxResponse, isRawIdxResponse } from './types/idx-js';\nimport { getOAuthDomain } from '../oidc';\nimport { IDX_API_VERSION } from '../constants';\nimport { httpRequest } from '../http';\nimport { isAuthApiError } from '../errors';\n\nexport async function introspect (\n  authClient: OktaAuthIdxInterface, \n  options: IntrospectOptions = {}\n): Promise<IdxResponse> {\n  let rawIdxResponse;\n  let requestDidSucceed;\n\n  // try load from storage first\n  const savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n  if (savedIdxResponse) {\n    rawIdxResponse = savedIdxResponse.rawIdxResponse;\n    requestDidSucceed = savedIdxResponse.requestDidSucceed;\n  }\n\n  // call idx.introspect if no existing idx response available in storage\n  if (!rawIdxResponse) {\n    const version = options.version || IDX_API_VERSION;\n    const domain = getOAuthDomain(authClient);\n    const { interactionHandle, stateHandle } = options;\n    const withCredentials = options.withCredentials ?? true;\n    try {\n      requestDidSucceed = true;\n      validateVersionConfig(version);\n      const url = `${domain}/idp/idx/introspect`;\n      const body = stateHandle ? { stateToken: stateHandle } : { interactionHandle };\n      const headers = {\n        'Content-Type': `application/ion+json; okta-version=${version}`, // Server wants this version info\n        Accept: `application/ion+json; okta-version=${version}`,\n      };\n      rawIdxResponse = await httpRequest(authClient, {\n        method: 'POST',\n        url,\n        headers,\n        withCredentials,\n        args: body\n      });\n    } catch (err) {\n      if (isAuthApiError(err) && err.xhr && isRawIdxResponse(err.xhr.responseJSON)) {\n        rawIdxResponse = err.xhr.responseJSON;\n        requestDidSucceed = false;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  const { withCredentials } = options;\n  return makeIdxState(authClient, rawIdxResponse, { withCredentials }, requestDidSucceed);\n}\n"]},"metadata":{},"sourceType":"module"}