{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { clone } from '../util/object.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { postToTokenEndpoint } from './endpoints/token.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\n\nfunction exchangeCodeForTokens(sdk, tokenParams, urls) {\n  urls = urls || getOAuthUrls(sdk, tokenParams);\n  tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));\n  var _tokenParams = tokenParams,\n      authorizationCode = _tokenParams.authorizationCode,\n      interactionCode = _tokenParams.interactionCode,\n      codeVerifier = _tokenParams.codeVerifier,\n      clientId = _tokenParams.clientId,\n      redirectUri = _tokenParams.redirectUri,\n      scopes = _tokenParams.scopes,\n      ignoreSignature = _tokenParams.ignoreSignature,\n      state = _tokenParams.state;\n  var getTokenOptions = {\n    clientId: clientId,\n    redirectUri: redirectUri,\n    authorizationCode: authorizationCode,\n    interactionCode: interactionCode,\n    codeVerifier: codeVerifier\n  };\n  return postToTokenEndpoint(sdk, getTokenOptions, urls).then(function (response) {\n    var responseType = ['token'];\n\n    if (scopes.indexOf('openid') !== -1) {\n      responseType.push('id_token');\n    }\n\n    var handleResponseOptions = {\n      clientId: clientId,\n      redirectUri: redirectUri,\n      scopes: scopes,\n      responseType: responseType,\n      ignoreSignature: ignoreSignature\n    };\n    return handleOAuthResponse(sdk, handleResponseOptions, response, urls).then(function (response) {\n      response.code = authorizationCode;\n      response.state = state;\n      return response;\n    });\n  }).finally(function () {\n    sdk.transactionManager.clear();\n  });\n}\n\nexport { exchangeCodeForTokens };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;SAqBgBA,sBAAsBC,KAA4BC,aAA0BC,MAAiB;EAC3GA,IAAI,GAAGA,IAAI,IAAIC,YAAY,CAACH,GAAD,EAAMC,WAAN,CAA3B;EAEAA,WAAW,GAAGG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,qBAAqB,CAACN,GAAD,CAAvC,EAA8CO,KAAK,CAACN,WAAD,CAAnD,CAAd;EAEA,mBASIA,WATJ;EAAA,IACEO,iBADF,gBACEA,iBADF;EAAA,IAEEC,eAFF,gBAEEA,eAFF;EAAA,IAGEC,YAHF,gBAGEA,YAHF;EAAA,IAIEC,QAJF,gBAIEA,QAJF;EAAA,IAKEC,WALF,gBAKEA,WALF;EAAA,IAMEC,MANF,gBAMEA,MANF;EAAA,IAOEC,eAPF,gBAOEA,eAPF;EAAA,IAQEC,KARF,gBAQEA,KARF;EAWA,IAAIC,eAAe,GAAG;IACpBL,QAAQ,EAARA,QADoB;IAEpBC,WAAW,EAAXA,WAFoB;IAGpBJ,iBAAiB,EAAjBA,iBAHoB;IAIpBC,eAAe,EAAfA,eAJoB;IAKpBC,YAAY,EAAZA;EALoB,CAAtB;EAQA,OAAOO,mBAAmB,CAACjB,GAAD,EAAMgB,eAAN,EAAuBd,IAAvB,CAAnB,CACJgB,IADI,CACC,UAACC,QAAD,EAA4B;IAKhC,IAAMC,YAAY,GAAwB,CAAC,OAAD,CAA1C;;IACA,IAAIP,MAAO,CAACQ,OAAR,CAAgB,QAAhB,MAA8B,CAAC,CAAnC,EAAsC;MACpCD,YAAY,CAACE,IAAb,CAAkB,UAAlB;IACD;;IACD,IAAMC,qBAAqB,GAAgB;MACzCZ,QAAQ,EAARA,QADyC;MAEzCC,WAAW,EAAXA,WAFyC;MAGzCC,MAAM,EAANA,MAHyC;MAIzCO,YAAY,EAAZA,YAJyC;MAKzCN,eAAe,EAAfA;IALyC,CAA3C;IAOA,OAAOU,mBAAmB,CAACxB,GAAD,EAAMuB,qBAAN,EAA6BJ,QAA7B,EAAuCjB,IAAvC,CAAnB,CACJgB,IADI,CACC,UAACC,QAAD,EAA4B;MAEhCA,QAAQ,CAACM,IAAT,GAAgBjB,iBAAhB;MACAW,QAAQ,CAACJ,KAAT,GAAiBA,KAAjB;MACA,OAAOI,QAAP;IACD,CANI,CAAP;EAOD,CAxBI,EAyBJO,OAzBI,CAyBI,YAAK;IACZ1B,GAAG,CAAC2B,kBAAJ,CAAuBC,KAAvB;EACD,CA3BI,CAAP;AA4BF","names":["exchangeCodeForTokens","sdk","tokenParams","urls","getOAuthUrls","Object","assign","getDefaultTokenParams","clone","authorizationCode","interactionCode","codeVerifier","clientId","redirectUri","scopes","ignoreSignature","state","getTokenOptions","postToTokenEndpoint","then","response","responseType","indexOf","push","handleResponseOptions","handleOAuthResponse","code","finally","transactionManager","clear"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\exchangeCodeForTokens.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/* eslint-disable max-len */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { CustomUrls, OAuthResponse, OAuthResponseType, OktaAuthOIDCInterface, TokenParams, TokenResponse } from '../types';\nimport { getOAuthUrls, getDefaultTokenParams } from './util';\nimport { clone } from '../util';\nimport { postToTokenEndpoint } from './endpoints/token';\nimport { handleOAuthResponse } from './handleOAuthResponse';\n\n// codeVerifier is required. May pass either an authorizationCode or interactionCode\nexport function exchangeCodeForTokens(sdk: OktaAuthOIDCInterface, tokenParams: TokenParams, urls?: CustomUrls): Promise<TokenResponse> {\n  urls = urls || getOAuthUrls(sdk, tokenParams);\n  // build params using defaults + options\n  tokenParams = Object.assign({}, getDefaultTokenParams(sdk), clone(tokenParams));\n\n  const {\n    authorizationCode,\n    interactionCode,\n    codeVerifier,\n    clientId,\n    redirectUri,\n    scopes,\n    ignoreSignature,\n    state\n  } = tokenParams;\n\n  var getTokenOptions = {\n    clientId,\n    redirectUri,\n    authorizationCode,\n    interactionCode,\n    codeVerifier,\n  };\n\n  return postToTokenEndpoint(sdk, getTokenOptions, urls)\n    .then((response: OAuthResponse) => {\n\n      // `handleOAuthResponse` hanadles responses from both `/authorize` and `/token` endpoints\n      // Here we modify the response from `/token` so that it more closely matches a response from `/authorize`\n      // `responseType` is used to validate that the expected tokens were returned\n      const responseType: OAuthResponseType[] = ['token']; // an accessToken will always be returned\n      if (scopes!.indexOf('openid') !== -1) {\n        responseType.push('id_token'); // an idToken will be returned if \"openid\" is in the scopes\n      }\n      const handleResponseOptions: TokenParams = {\n        clientId,\n        redirectUri,\n        scopes,\n        responseType,\n        ignoreSignature,\n      };\n      return handleOAuthResponse(sdk, handleResponseOptions, response, urls!)\n        .then((response: TokenResponse) => {\n          // For compatibility, \"code\" is returned in the TokenResponse. OKTA-326091\n          response.code = authorizationCode;\n          response.state = state!;\n          return response;\n        });\n    })\n    .finally(() => {\n      sdk.transactionManager.clear();\n    });\n}"]},"metadata":{},"sourceType":"module"}