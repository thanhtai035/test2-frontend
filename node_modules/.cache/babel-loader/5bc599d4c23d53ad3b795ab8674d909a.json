{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { hasSavedInteractionHandle } from './transactionMeta.js';\nimport { startTransaction } from './startTransaction.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { IdxFeature } from './types/api.js';\nimport '../myaccount/types.js';\n\nasync function unlockAccount(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.flow = 'unlockAccount';\n\n  if (!hasSavedInteractionHandle(authClient)) {\n    const {\n      enabledFeatures\n    } = await startTransaction(authClient, Object.assign(Object.assign({}, options), {\n      autoRemediate: false\n    }));\n\n    if (enabledFeatures && !enabledFeatures.includes(IdxFeature.ACCOUNT_UNLOCK)) {\n      throw new AuthSdkError('Self Service Account Unlock is not supported based on your current org configuration.');\n    }\n  }\n\n  return run(authClient, Object.assign({}, options));\n}\n\nexport { unlockAccount };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAwBO,eAAeA,aAAf,CACLC,UADK,EAC+D;EAAA,IAAlCC,OAAkC,uEAAF,EAAE;EAEpEA,OAAO,CAACC,IAAR,GAAe,eAAf;;EAGA,IAAI,CAACC,yBAAyB,CAACH,UAAD,CAA9B,EAA4C;IAC1C,MAAM;MAAEI;IAAF,IAAsB,MAAMC,gBAAgB,CAACL,UAAD,EAAWM,gCAAOL,OAAP,GAAgB;MAAAM,aAAa,EAAE;IAAf,CAAhB,CAAX,CAAlD;;IACA,IAAIH,eAAe,IAAI,CAACA,eAAe,CAACI,QAAhB,CAAyBC,UAAU,CAACC,cAApC,CAAxB,EAA6E;MAC3E,MAAM,IAAIC,YAAJ,CACJ,uFADI,CAAN;IAGD;EACF;;EAED,OAAOC,GAAG,CAACZ,UAAD,EAAkBM,0BAAlB,CAAV;AACF","names":["unlockAccount","authClient","options","flow","hasSavedInteractionHandle","enabledFeatures","startTransaction","Object","autoRemediate","includes","IdxFeature","ACCOUNT_UNLOCK","AuthSdkError","run"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\unlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run } from './run';\nimport { hasSavedInteractionHandle } from './transactionMeta';\nimport { startTransaction } from './startTransaction';\nimport { AuthSdkError } from '../errors';\nimport { \n  OktaAuthIdxInterface, \n  AccountUnlockOptions, \n  IdxTransaction,\n  IdxFeature,\n} from '../types';\n\nexport async function unlockAccount(\n  authClient: OktaAuthIdxInterface, options: AccountUnlockOptions = {}\n): Promise<IdxTransaction> {\n  options.flow = 'unlockAccount';\n\n  // Only check at the beginning of the transaction\n  if (!hasSavedInteractionHandle(authClient)) {\n    const { enabledFeatures } = await startTransaction(authClient, { ...options, autoRemediate: false });\n    if (enabledFeatures && !enabledFeatures.includes(IdxFeature.ACCOUNT_UNLOCK)) {\n      throw new AuthSdkError(\n        'Self Service Account Unlock is not supported based on your current org configuration.'\n      );\n    }\n  }\n\n  return run(authClient, { ...options });\n}\n"]},"metadata":{},"sourceType":"module"}