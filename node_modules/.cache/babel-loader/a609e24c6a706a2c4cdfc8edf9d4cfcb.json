{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport BaseTransaction from './Base.js';\nimport { generateRequestFnFromLinks } from '../request.js';\n\nclass PhoneTransaction extends BaseTransaction {\n  constructor(oktaAuth, options) {\n    super(oktaAuth, options);\n    const {\n      res,\n      accessToken\n    } = options;\n    const {\n      id,\n      profile,\n      status,\n      _links\n    } = res;\n    this.id = id;\n    this.profile = profile;\n    this.status = status;\n\n    this.get = async () => {\n      const fn = generateRequestFnFromLinks({\n        oktaAuth,\n        accessToken,\n        methodName: 'get',\n        links: _links,\n        transactionClassName: 'PhoneTransaction'\n      });\n      return await fn();\n    };\n\n    this.delete = async () => {\n      const fn = generateRequestFnFromLinks({\n        oktaAuth,\n        accessToken,\n        methodName: 'delete',\n        links: _links\n      });\n      return await fn();\n    };\n\n    this.challenge = async payload => {\n      const fn = generateRequestFnFromLinks({\n        oktaAuth,\n        accessToken,\n        methodName: 'challenge',\n        links: _links\n      });\n      return await fn(payload);\n    };\n\n    if (_links.verify) {\n      this.verify = async payload => {\n        const fn = generateRequestFnFromLinks({\n          oktaAuth,\n          accessToken,\n          methodName: 'verify',\n          links: _links\n        });\n        return await fn(payload);\n      };\n    }\n  }\n\n}\n\nexport { PhoneTransaction as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAIqB,+BAAyBA,eAAzB,CAAwC;EAW3DC,WAAY,WAAUC,OAAV,EAAiB;IAC3B,MAAMC,QAAN,EAAgBD,OAAhB;IAEA,MAAM;MAAEE,GAAF;MAAOC;IAAP,IAAuBH,OAA7B;IAEA,MAAM;MAAEI,EAAF;MAAMC,OAAN;MAAeC,MAAf;MAAuBC;IAAvB,IAAkCL,GAAxC;IACA,KAAKE,EAAL,GAAUA,EAAV;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;;IAGA,KAAKE,GAAL,GAAW,YAAW;MACpB,MAAMC,EAAE,GAAGC,0BAA0B,CAAC;QACpCT,QADoC;QAEpCE,WAFoC;QAGpCQ,UAAU,EAAE,KAHwB;QAIpCC,KAAK,EAAEL,MAJ6B;QAKpCM,oBAAoB,EAAE;MALc,CAAD,CAArC;MAOA,OAAO,MAAMJ,EAAE,EAAf;IACD,CATD;;IAUA,KAAKK,MAAL,GAAc,YAAW;MACvB,MAAML,EAAE,GAAGC,0BAA0B,CAAC;QACpCT,QADoC;QAEpCE,WAFoC;QAGpCQ,UAAU,EAAE,QAHwB;QAIpCC,KAAK,EAAEL;MAJ6B,CAAD,CAArC;MAMA,OAAO,MAAME,EAAE,EAAf;IACD,CARD;;IASA,KAAKM,SAAL,GAAiB,MAAOC,OAAP,IAAkB;MACjC,MAAMP,EAAE,GAAGC,0BAA0B,CAAC;QACpCT,QADoC;QAEpCE,WAFoC;QAGpCQ,UAAU,EAAE,WAHwB;QAIpCC,KAAK,EAAEL;MAJ6B,CAAD,CAArC;MAMA,OAAO,MAAME,EAAE,CAACO,OAAD,CAAf;IACD,CARD;;IASA,IAAIT,MAAM,CAACU,MAAX,EAAmB;MACjB,KAAKA,MAAL,GAAc,MAAOD,OAAP,IAAkB;QAC9B,MAAMP,EAAE,GAAGC,0BAA0B,CAAC;UACpCT,QADoC;UAEpCE,WAFoC;UAGpCQ,UAAU,EAAE,QAHwB;UAIpCC,KAAK,EAAEL;QAJ6B,CAAD,CAArC;QAMA,OAAO,MAAME,EAAE,CAACO,OAAD,CAAf;MACD,CARD;IASD;EACF;;AA7D0D","names":["BaseTransaction","constructor","options","oktaAuth","res","accessToken","id","profile","status","_links","get","fn","generateRequestFnFromLinks","methodName","links","transactionClassName","delete","challenge","payload","verify"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\myaccount\\transactions\\PhoneTransaction.ts"],"sourcesContent":["import { ChallengePhonePayload, PhoneProfile, Status, VerificationPayload } from '../types';\nimport BaseTransaction from './Base';\nimport { generateRequestFnFromLinks } from '../request';\n\nexport default class PhoneTransaction extends BaseTransaction {\n  id: string;\n  profile: PhoneProfile;\n  status: Status;\n\n  // eslint-disable-next-line no-use-before-define\n  get: () => Promise<PhoneTransaction>;\n  delete: () => Promise<BaseTransaction>;\n  challenge: (payload: ChallengePhonePayload) => Promise<BaseTransaction>;\n  verify?: (payload: VerificationPayload) => Promise<BaseTransaction>;\n\n  constructor(oktaAuth, options) {\n    super(oktaAuth, options);\n\n    const { res, accessToken } = options;\n    // assign required fields from res\n    const { id, profile, status, _links } = res;\n    this.id = id;\n    this.profile = profile;\n    this.status = status;\n\n    // assign transformed fns to transaction\n    this.get = async () => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'get', \n        links: _links,\n        transactionClassName: 'PhoneTransaction'\n      });\n      return await fn() as PhoneTransaction;\n    };\n    this.delete = async () => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'delete', \n        links: _links \n      });\n      return await fn() as BaseTransaction;\n    };\n    this.challenge = async (payload) => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'challenge', \n        links: _links \n      });\n      return await fn(payload) as BaseTransaction;\n    };\n    if (_links.verify) {\n      this.verify = async (payload) => {\n        const fn = generateRequestFnFromLinks({ \n          oktaAuth, \n          accessToken, \n          methodName: 'verify', \n          links: _links \n        });\n        return await fn(payload) as BaseTransaction;\n      } ;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}