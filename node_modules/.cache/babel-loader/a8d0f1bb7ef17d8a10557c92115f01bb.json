{"ast":null,"code":"import _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from './errors/AuthSdkError.js';\nimport { REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_NONCE_COOKIE_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants.js';\nimport { isTransactionMeta, isOAuthTransactionMeta } from './types/Transaction.js';\nimport './idx/types/api.js';\nimport { warn } from './util/console.js';\nimport './myaccount/types.js';\nimport { isRawIdxResponse } from './idx/types/idx-js.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\n\nvar TransactionManager = /*#__PURE__*/function () {\n  function TransactionManager(options) {\n    _classCallCheck(this, TransactionManager);\n\n    this.storageManager = options.storageManager;\n    this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;\n    this.saveNonceCookie = options.saveNonceCookie === false ? false : true;\n    this.saveStateCookie = options.saveStateCookie === false ? false : true;\n    this.saveParamsCookie = options.saveParamsCookie === false ? false : true;\n    this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n    this.saveLastResponse = options.saveLastResponse === false ? false : true;\n    this.options = options;\n  }\n\n  _createClass(TransactionManager, [{\n    key: \"clear\",\n    value: function clear() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var transactionStorage = this.storageManager.getTransactionStorage();\n      var meta = transactionStorage.getStorage();\n      transactionStorage.clearStorage();\n\n      if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n        var state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n\n        if (state) {\n          clearTransactionFromSharedStorage(this.storageManager, state);\n        }\n      }\n\n      if (options.clearIdxResponse !== false) {\n        this.clearIdxResponse();\n      }\n\n      if (!this.legacyWidgetSupport) {\n        return;\n      }\n\n      if (options.oauth) {\n        this.clearLegacyOAuthParams();\n      }\n\n      if (options.pkce) {\n        this.clearLegacyPKCE();\n      }\n    }\n  }, {\n    key: \"save\",\n    value: function save(meta) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var storage = this.storageManager.getTransactionStorage();\n      var obj = storage.getStorage();\n\n      if (isTransactionMeta(obj) && !options.muteWarning) {\n        warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n      }\n\n      storage.setStorage(meta);\n\n      if (this.enableSharedStorage && meta.state) {\n        saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n      }\n\n      if (!options.oauth) {\n        return;\n      }\n\n      if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {\n        var cookieStorage = this.storageManager.getStorage({\n          storageType: 'cookie'\n        });\n\n        if (this.saveParamsCookie) {\n          var responseType = meta.responseType,\n              state = meta.state,\n              nonce = meta.nonce,\n              scopes = meta.scopes,\n              clientId = meta.clientId,\n              urls = meta.urls,\n              ignoreSignature = meta.ignoreSignature;\n          var oauthParams = {\n            responseType: responseType,\n            state: state,\n            nonce: nonce,\n            scopes: scopes,\n            clientId: clientId,\n            urls: urls,\n            ignoreSignature: ignoreSignature\n          };\n          cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);\n        }\n\n        if (this.saveNonceCookie && meta.nonce) {\n          cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);\n        }\n\n        if (this.saveStateCookie && meta.state) {\n          cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);\n        }\n      }\n    }\n  }, {\n    key: \"exists\",\n    value: function exists() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      try {\n        var meta = this.load(options);\n        return !!meta;\n      } catch (_a) {\n        return false;\n      }\n    }\n  }, {\n    key: \"load\",\n    value: function load() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var meta;\n\n      if (this.enableSharedStorage && options.state) {\n        pruneSharedStorage(this.storageManager);\n        meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n\n        if (isTransactionMeta(meta)) {\n          return meta;\n        }\n      }\n\n      var storage = this.storageManager.getTransactionStorage();\n      meta = storage.getStorage();\n\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n\n      if (!this.legacyWidgetSupport) {\n        return null;\n      }\n\n      if (options.oauth) {\n        try {\n          var oauthParams = this.loadLegacyOAuthParams();\n          Object.assign(meta, oauthParams);\n        } finally {\n          this.clearLegacyOAuthParams();\n        }\n      }\n\n      if (options.pkce) {\n        try {\n          var pkceMeta = this.loadLegacyPKCE();\n          Object.assign(meta, pkceMeta);\n        } finally {\n          this.clearLegacyPKCE();\n        }\n      }\n\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"clearLegacyPKCE\",\n    value: function clearLegacyPKCE() {\n      var storage;\n\n      if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n        storage = this.storageManager.getLegacyPKCEStorage({\n          storageType: 'localStorage'\n        });\n        storage.clearStorage();\n      }\n\n      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n        storage = this.storageManager.getLegacyPKCEStorage({\n          storageType: 'sessionStorage'\n        });\n        storage.clearStorage();\n      }\n    }\n  }, {\n    key: \"loadLegacyPKCE\",\n    value: function loadLegacyPKCE() {\n      var storage;\n      var obj;\n\n      if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n        storage = this.storageManager.getLegacyPKCEStorage({\n          storageType: 'localStorage'\n        });\n        obj = storage.getStorage();\n\n        if (obj && obj.codeVerifier) {\n          return obj;\n        }\n      }\n\n      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n        storage = this.storageManager.getLegacyPKCEStorage({\n          storageType: 'sessionStorage'\n        });\n        obj = storage.getStorage();\n\n        if (obj && obj.codeVerifier) {\n          return obj;\n        }\n      }\n\n      throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);\n    }\n  }, {\n    key: \"clearLegacyOAuthParams\",\n    value: function clearLegacyOAuthParams() {\n      var storage;\n\n      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n        storage = this.storageManager.getLegacyOAuthParamsStorage({\n          storageType: 'sessionStorage'\n        });\n        storage.clearStorage();\n      }\n\n      if (this.storageManager.storageUtil.testStorageType('cookie')) {\n        storage = this.storageManager.getLegacyOAuthParamsStorage({\n          storageType: 'cookie'\n        });\n        storage.clearStorage();\n      }\n    }\n  }, {\n    key: \"loadLegacyOAuthParams\",\n    value: function loadLegacyOAuthParams() {\n      var storage;\n      var oauthParams;\n\n      if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n        storage = this.storageManager.getLegacyOAuthParamsStorage({\n          storageType: 'sessionStorage'\n        });\n        oauthParams = storage.getStorage();\n      }\n\n      if (isOAuthTransactionMeta(oauthParams)) {\n        return oauthParams;\n      }\n\n      if (this.storageManager.storageUtil.testStorageType('cookie')) {\n        storage = this.storageManager.getLegacyOAuthParamsStorage({\n          storageType: 'cookie'\n        });\n        oauthParams = storage.getStorage();\n      }\n\n      if (isOAuthTransactionMeta(oauthParams)) {\n        return oauthParams;\n      }\n\n      throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');\n    }\n  }, {\n    key: \"saveIdxResponse\",\n    value: function saveIdxResponse(data) {\n      if (!this.saveLastResponse) {\n        return;\n      }\n\n      var storage = this.storageManager.getIdxResponseStorage();\n\n      if (!storage) {\n        return;\n      }\n\n      storage.setStorage(data);\n    }\n  }, {\n    key: \"loadIdxResponse\",\n    value: function loadIdxResponse(options) {\n      if (!this.saveLastResponse) {\n        return null;\n      }\n\n      var storage = this.storageManager.getIdxResponseStorage();\n\n      if (!storage) {\n        return null;\n      }\n\n      var storedValue = storage.getStorage();\n\n      if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {\n        return null;\n      }\n\n      if (options) {\n        var stateHandle = options.stateHandle,\n            interactionHandle = options.interactionHandle;\n\n        if (stateHandle && storedValue.stateHandle !== stateHandle) {\n          return null;\n        }\n\n        if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {\n          return null;\n        }\n      }\n\n      return storedValue;\n    }\n  }, {\n    key: \"clearIdxResponse\",\n    value: function clearIdxResponse() {\n      if (!this.saveLastResponse) {\n        return;\n      }\n\n      var storage = this.storageManager.getIdxResponseStorage();\n      storage === null || storage === void 0 ? void 0 : storage.clearStorage();\n    }\n  }]);\n\n  return TransactionManager;\n}();\n\nexport { TransactionManager as default };","map":{"version":3,"mappings":"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","names":["TransactionManager","options","storageManager","legacyWidgetSupport","saveNonceCookie","saveStateCookie","saveParamsCookie","enableSharedStorage","saveLastResponse","transactionStorage","getTransactionStorage","meta","getStorage","clearStorage","clearSharedStorage","state","clearTransactionFromSharedStorage","clearIdxResponse","oauth","clearLegacyOAuthParams","pkce","clearLegacyPKCE","storage","obj","isTransactionMeta","muteWarning","warn","setStorage","saveTransactionToSharedStorage","cookieStorage","storageType","responseType","nonce","scopes","clientId","urls","ignoreSignature","oauthParams","setItem","REDIRECT_OAUTH_PARAMS_NAME","JSON","stringify","REDIRECT_NONCE_COOKIE_NAME","REDIRECT_STATE_COOKIE_NAME","load","_a","pruneSharedStorage","loadTransactionFromSharedStorage","loadLegacyOAuthParams","Object","assign","pkceMeta","loadLegacyPKCE","storageUtil","testStorageType","getLegacyPKCEStorage","codeVerifier","AuthSdkError","undefined","getLegacyOAuthParamsStorage","isOAuthTransactionMeta","data","getIdxResponseStorage","storedValue","isRawIdxResponse","rawIdxResponse","stateHandle","interactionHandle"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\TransactionManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthSdkError } from './errors';\nimport { REDIRECT_NONCE_COOKIE_NAME, REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants';\nimport { StorageManager } from './StorageManager';\nimport {\n  StorageProvider,\n  TransactionMeta,\n  isTransactionMeta,\n  isOAuthTransactionMeta,\n  PKCETransactionMeta,\n  OAuthTransactionMeta,\n  TransactionMetaOptions,\n  TransactionManagerOptions,\n  CookieStorage,\n  SavedIdxResponse,\n  IntrospectOptions\n} from './types';\nimport { isRawIdxResponse } from './idx/types/idx-js';\nimport { warn } from './util';\nimport {\n  clearTransactionFromSharedStorage,\n  loadTransactionFromSharedStorage,\n  pruneSharedStorage,\n  saveTransactionToSharedStorage\n} from './util/sharedStorage';\n\nexport interface ClearTransactionMetaOptions extends TransactionMetaOptions {\n  clearSharedStorage?: boolean; // true by default\n  clearIdxResponse?: boolean; // true by default\n}\nexport default class TransactionManager {\n  options: TransactionManagerOptions;\n  storageManager: StorageManager;\n  legacyWidgetSupport: boolean;\n  saveNonceCookie: boolean;\n  saveStateCookie: boolean;\n  saveParamsCookie: boolean;\n  enableSharedStorage: boolean;\n  saveLastResponse: boolean;\n\n  constructor(options: TransactionManagerOptions) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.storageManager = options.storageManager!;\n    this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;\n    this.saveNonceCookie = options.saveNonceCookie === false ? false : true;\n    this.saveStateCookie = options.saveStateCookie === false ? false : true;\n    this.saveParamsCookie = options.saveParamsCookie === false ? false : true;\n    this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n    this.saveLastResponse = options.saveLastResponse === false ? false : true;\n    this.options = options;\n  }\n\n  // eslint-disable-next-line complexity\n  clear(options: ClearTransactionMetaOptions = {}) {\n    const transactionStorage: StorageProvider = this.storageManager.getTransactionStorage();\n    const meta = transactionStorage.getStorage();\n\n    // Clear primary storage (by default, sessionStorage on browser)\n    transactionStorage.clearStorage();\n\n    // Usually we want to also clear shared storage unless another tab may need it to continue/complete a flow\n    if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n      const state = options.state || meta?.state;\n      if (state) {\n        clearTransactionFromSharedStorage(this.storageManager, state);\n      }\n    }\n\n    if (options.clearIdxResponse !== false) {\n      this.clearIdxResponse();\n    }\n    \n    if (!this.legacyWidgetSupport) {\n      return;\n    }\n\n    // This is for compatibility with older versions of the signin widget. OKTA-304806\n    if (options.oauth) {\n      this.clearLegacyOAuthParams();\n    }\n\n    if (options.pkce) {\n      this.clearLegacyPKCE();\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  save(meta: TransactionMeta, options: TransactionMetaOptions = {}) {\n    // There must be only one transaction executing at a time.\n    // Before saving, check to see if a transaction is already stored.\n    // An existing transaction indicates a concurrency/race/overlap condition\n\n    let storage: StorageProvider = this.storageManager.getTransactionStorage();\n    const obj = storage.getStorage();\n    // oie process may need to update transaction in the middle of process for tracking purpose\n    // false alarm might be caused \n    // TODO: revisit for a better solution, https://oktainc.atlassian.net/browse/OKTA-430919\n    if (isTransactionMeta(obj) && !options.muteWarning) {\n      // eslint-disable-next-line max-len\n      warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n    }\n\n    storage.setStorage(meta);\n\n    // Shared storage allows continuation of transaction in another tab\n    if (this.enableSharedStorage && meta.state) {\n      saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n    }\n\n    if (!options.oauth) {\n      return;\n    }\n  \n    // Legacy cookie storage\n    if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {\n      const cookieStorage: CookieStorage = this.storageManager.getStorage({ storageType: 'cookie' }) as CookieStorage;\n\n      if (this.saveParamsCookie) {\n        const { \n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        } = meta;\n        const oauthParams = {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        };\n        cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);\n      }\n\n      if (this.saveNonceCookie && meta.nonce) {\n        // Set nonce cookie for servers to validate nonce in id_token\n        cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);\n      }\n\n      if (this.saveStateCookie && meta.state) {\n        // Set state cookie for servers to validate state\n        cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);\n      }\n    }\n  }\n\n  exists(options: TransactionMetaOptions = {}): boolean {\n    try {\n      const meta = this.load(options);\n      return !!meta;\n    } catch {\n      return false;\n    }\n  }\n\n  // load transaction meta from storage\n  // eslint-disable-next-line complexity,max-statements\n  load(options: TransactionMetaOptions = {}): TransactionMeta | null {\n\n    let meta: TransactionMeta;\n\n    // If state was passed, try loading transaction data from shared storage\n    if (this.enableSharedStorage && options.state) {\n      pruneSharedStorage(this.storageManager); // prune before load\n      meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n    }\n\n    let storage: StorageProvider = this.storageManager.getTransactionStorage();\n    meta = storage.getStorage();\n    if (isTransactionMeta(meta)) {\n      // if we have meta in the new location, there is no need to go further\n      return meta;\n    }\n\n    if (!this.legacyWidgetSupport) {\n      return null;\n    }\n\n    // This is for compatibility with older versions of the signin widget. OKTA-304806\n    if (options.oauth) {\n      try {\n        const oauthParams = this.loadLegacyOAuthParams();\n        Object.assign(meta, oauthParams);\n      } finally {\n        this.clearLegacyOAuthParams();\n      }\n    }\n\n    if (options.pkce) {\n      try {\n        const pkceMeta: PKCETransactionMeta = this.loadLegacyPKCE();\n        Object.assign(meta, pkceMeta);\n      } finally {\n        this.clearLegacyPKCE();\n      }\n    }\n\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n    return null;\n  }\n\n  // This is for compatibility with older versions of the signin widget. OKTA-304806\n  clearLegacyPKCE(): void {\n    // clear storages\n    let storage: StorageProvider;\n\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyPKCE(): PKCETransactionMeta {\n    let storage: StorageProvider;\n    let obj;\n    \n    // Try reading from localStorage first.\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });\n      obj = storage.getStorage();\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n\n    // If meta is not valid, read from sessionStorage. This is expected for more recent versions of the widget.\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });\n      obj = storage.getStorage();\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n    \n    // If meta is not valid, throw an exception to avoid misleading server-side error\n    // The most likely cause of this error is trying to handle a callback twice\n    // eslint-disable-next-line max-len\n    throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);\n  }\n\n  clearLegacyOAuthParams(): void {\n    // clear storages\n    let storage: StorageProvider;\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyOAuthParams(): OAuthTransactionMeta {\n    let storage: StorageProvider;\n    let oauthParams;\n  \n    // load first from session storage\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });\n      oauthParams = storage.getStorage();\n    }\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n    // try to load from cookie\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });\n      oauthParams = storage.getStorage();\n    }\n\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n\n    throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');\n\n    // Something is there but we don't recognize it\n    // throw new AuthSdkError('Unable to parse the ' + REDIRECT_OAUTH_PARAMS_NAME + ' value from storage');\n  }\n\n  saveIdxResponse(data: SavedIdxResponse): void {\n    if (!this.saveLastResponse) {\n      return;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    if (!storage) {\n      return;\n    }\n    storage.setStorage(data);\n  }\n\n  // eslint-disable-next-line complexity\n  loadIdxResponse(options?: IntrospectOptions): SavedIdxResponse | null {\n    if (!this.saveLastResponse) {\n      return null;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    if (!storage) {\n      return null;\n    }\n    const storedValue = storage.getStorage();\n    if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {\n      return null;\n    }\n\n    if (options) {\n      const { stateHandle, interactionHandle } = options;\n      if (stateHandle && storedValue.stateHandle !== stateHandle) {\n        return null;\n      }\n      if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {\n        return null;\n      }\n    }\n\n    return storedValue;\n  }\n\n  clearIdxResponse(): void {\n    if (!this.saveLastResponse) {\n      return;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    storage?.clearStorage();\n  }\n}"]},"metadata":{},"sourceType":"module"}