{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\n\nfunction renewTokens(_x, _x2) {\n  return _renewTokens.apply(this, arguments);\n}\n\nfunction _renewTokens() {\n  _renewTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, options) {\n    var tokens, accessToken, idToken, scopes, authorizeUrl, userinfoUrl, issuer, _getDefaultTokenParam, responseType;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tokens = sdk.tokenManager.getTokensSync();\n\n            if (!tokens.refreshToken) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken));\n\n          case 3:\n            if (!(!tokens.accessToken && !tokens.idToken)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new AuthSdkError('renewTokens() was called but there is no existing token');\n\n          case 5:\n            accessToken = tokens.accessToken || {};\n            idToken = tokens.idToken || {};\n            scopes = accessToken.scopes || idToken.scopes;\n\n            if (scopes) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n\n          case 10:\n            authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n\n            if (authorizeUrl) {\n              _context.next = 13;\n              break;\n            }\n\n            throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n\n          case 13:\n            userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n            issuer = idToken.issuer || sdk.options.issuer;\n            options = Object.assign({\n              scopes: scopes,\n              authorizeUrl: authorizeUrl,\n              userinfoUrl: userinfoUrl,\n              issuer: issuer\n            }, options);\n\n            if (sdk.options.pkce) {\n              options.responseType = 'code';\n            } else {\n              _getDefaultTokenParam = getDefaultTokenParams(sdk), responseType = _getDefaultTokenParam.responseType;\n              options.responseType = responseType;\n            }\n\n            return _context.abrupt(\"return\", getWithoutPrompt(sdk, options).then(function (res) {\n              return res.tokens;\n            }));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _renewTokens.apply(this, arguments);\n}\n\nexport { renewTokens };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;SAoBsBA,W;;;;;4EAAf,iBAA2BC,GAA3B,EAAgCC,OAAhC;IAAA;;IAAA;MAAA;QAAA;UAAA;YACCC,MADD,GACUF,GAAG,CAACG,YAAJ,CAAiBC,aAAjB,EADV;;YAAA,KAEDF,MAAM,CAACG,YAFN;cAAA;cAAA;YAAA;;YAAA,iCAGIC,sBAAsB,CAACN,GAAD,EAAMC,OAAO,IAAI,EAAjB,EAAqBC,MAAM,CAACG,YAA5B,CAH1B;;UAAA;YAAA,MAMD,CAACH,MAAM,CAACK,WAAR,IAAuB,CAACL,MAAM,CAACM,OAN9B;cAAA;cAAA;YAAA;;YAAA,MAOG,IAAIC,YAAJ,CAAiB,yDAAjB,CAPH;;UAAA;YAUCF,WAVD,GAUeL,MAAM,CAACK,WAAP,IAAsB,EAVrC;YAWCC,OAXD,GAWWN,MAAM,CAACM,OAAP,IAAkB,EAX7B;YAYCE,MAZD,GAYUH,WAAW,CAACG,MAAZ,IAAsBF,OAAO,CAACE,MAZxC;;YAAA,IAaAA,MAbA;cAAA;cAAA;YAAA;;YAAA,MAcG,IAAID,YAAJ,CAAiB,oDAAjB,CAdH;;UAAA;YAgBCE,YAhBD,GAgBgBJ,WAAW,CAACI,YAAZ,IAA4BH,OAAO,CAACG,YAhBpD;;YAAA,IAiBAA,YAjBA;cAAA;cAAA;YAAA;;YAAA,MAkBG,IAAIF,YAAJ,CAAiB,0DAAjB,CAlBH;;UAAA;YAoBCG,WApBD,GAoBeL,WAAW,CAACK,WAAZ,IAA2BZ,GAAG,CAACC,OAAJ,CAAYW,WApBtD;YAqBCC,MArBD,GAqBUL,OAAO,CAACK,MAAR,IAAkBb,GAAG,CAACC,OAAJ,CAAYY,MArBxC;YAwBLZ,OAAO,GAAGa,MAAM,CAACC,MAAP,CAAc;cACtBL,MAAM,EAANA,MADsB;cAEtBC,YAAY,EAAZA,YAFsB;cAGtBC,WAAW,EAAXA,WAHsB;cAItBC,MAAM,EAANA;YAJsB,CAAd,EAKPZ,OALO,CAAV;;YAOA,IAAID,GAAG,CAACC,OAAJ,CAAYe,IAAhB,EAAsB;cACpBf,OAAO,CAACgB,YAAR,GAAuB,MAAvB;YACD,CAFD,MAEO;cAAA,wBACoBC,qBAAqB,CAAClB,GAAD,CADzC,EACGiB,YADH,yBACGA,YADH;cAELhB,OAAO,CAACgB,YAAR,GAAuBA,YAAvB;YACD;;YApCI,iCAsCEE,gBAAgB,CAACnB,GAAD,EAAMC,OAAN,CAAhB,CACJmB,IADI,CACC,aAAG;cAAA,OAAIC,GAAG,CAACnB,MAAR;YAAA,CADJ,CAtCF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["renewTokens","sdk","options","tokens","tokenManager","getTokensSync","refreshToken","renewTokensWithRefresh","accessToken","idToken","AuthSdkError","scopes","authorizeUrl","userinfoUrl","issuer","Object","assign","pkce","responseType","getDefaultTokenParams","getWithoutPrompt","then","res"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\renewTokens.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { TokenParams, Tokens } from '../types';\nimport { getWithoutPrompt } from './getWithoutPrompt';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh';\nimport { getDefaultTokenParams } from './util';\n\n// If we have a refresh token, renew using that, otherwise getWithoutPrompt\n// eslint-disable-next-line complexity\nexport async function renewTokens(sdk, options?: TokenParams): Promise<Tokens> {\n  const tokens = sdk.tokenManager.getTokensSync();\n  if (tokens.refreshToken) {\n    return renewTokensWithRefresh(sdk, options || {}, tokens.refreshToken);\n  }\n\n  if (!tokens.accessToken && !tokens.idToken) {\n    throw new AuthSdkError('renewTokens() was called but there is no existing token');\n  }\n\n  const accessToken = tokens.accessToken || {};\n  const idToken = tokens.idToken || {};\n  const scopes = accessToken.scopes || idToken.scopes;\n  if (!scopes) {\n    throw new AuthSdkError('renewTokens: invalid tokens: could not read scopes');\n  }\n  const authorizeUrl = accessToken.authorizeUrl || idToken.authorizeUrl;\n  if (!authorizeUrl) {\n    throw new AuthSdkError('renewTokens: invalid tokens: could not read authorizeUrl');\n  }\n  const userinfoUrl = accessToken.userinfoUrl || sdk.options.userinfoUrl;\n  const issuer = idToken.issuer || sdk.options.issuer;\n\n  // Get tokens using the SSO cookie\n  options = Object.assign({\n    scopes,\n    authorizeUrl,\n    userinfoUrl,\n    issuer\n  }, options);\n\n  if (sdk.options.pkce) {\n    options.responseType = 'code';\n  } else {\n    const { responseType } = getDefaultTokenParams(sdk);\n    options.responseType = responseType;\n  }\n\n  return getWithoutPrompt(sdk, options)\n    .then(res => res.tokens);\n    \n}\n"]},"metadata":{},"sourceType":"module"}