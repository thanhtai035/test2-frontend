{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { Remediator } from '../Base/Remediator.js';\nimport { unwrapFormValue } from './util.js';\n\nclass GenericRemediator extends Remediator {\n  canRemediate() {\n    if (typeof this.remediation.action !== 'function') {\n      return false;\n    }\n\n    if (this.remediation.name === 'poll' || this.remediation.name.endsWith('-poll')) {\n      return true;\n    }\n\n    if (this.options.step) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getData() {\n    const data = this.getInputs().reduce((acc, _ref) => {\n      let {\n        name\n      } = _ref;\n      acc[name] = this.values[name];\n      return acc;\n    }, {});\n    return data;\n  }\n\n  getNextStep(authClient, _context) {\n    const name = this.getName();\n    const inputs = this.getInputs();\n\n    const _a = this.remediation,\n          {\n      href,\n      method,\n      rel,\n      accepts,\n      produces,\n      value,\n      action\n    } = _a,\n          rest = __rest(_a, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\", \"value\", \"action\"]);\n\n    if (action) {\n      return Object.assign(Object.assign(Object.assign({}, rest), !!inputs.length && {\n        inputs\n      }), {\n        action: async params => {\n          return authClient.idx.proceed(Object.assign({\n            step: name\n          }, params));\n        }\n      });\n    }\n\n    return Object.assign({}, this.remediation);\n  }\n\n  getInputs() {\n    return (this.remediation.value || []).filter(_ref2 => {\n      let {\n        name\n      } = _ref2;\n      return name !== 'stateHandle';\n    }).map(unwrapFormValue).map(input => {\n      input.type = input.type || 'string';\n      return input;\n    });\n  }\n\n}\n\nexport { GenericRemediator };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAKM,MAAOA,iBAAP,SAAiCC,UAAjC,CAA2C;EAC/CC,YAAY;IAEV,IAAI,OAAO,KAAKC,WAAL,CAAiBC,MAAxB,KAAmC,UAAvC,EAAmD;MACjD,OAAO,KAAP;IACD;;IASD,IAAI,KAAKD,WAAL,CAAiBE,IAAjB,KAA0B,MAA1B,IAAoC,KAAKF,WAAL,CAAiBE,IAAjB,CAAsBC,QAAtB,CAA+B,OAA/B,CAAxC,EAAiF;MAC/E,OAAO,IAAP;IACD;;IAED,IAAI,KAAKC,OAAL,CAAaC,IAAjB,EAAuB;MACrB,OAAO,IAAP;IACD;;IAGD,OAAO,KAAP;EACD;;EAEDC,OAAO;IACL,MAAMC,IAAI,GAAG,KAAKC,SAAL,GAAiBC,MAAjB,CAAwB,CAACC,GAAD,WAAkB;MAAA,IAAZ;QAAER;MAAF,CAAY;MACrDQ,GAAG,CAACR,IAAD,CAAH,GAAY,KAAKS,MAAL,CAAYT,IAAZ,CAAZ;MACA,OAAOQ,GAAP;IACD,CAHY,EAGV,EAHU,CAAb;IAIA,OAAOH,IAAP;EACD;;EAEDK,WAAW,CAACC,UAAD,EAAmCC,QAAnC,EAAwD;IACjE,MAAMZ,IAAI,GAAG,KAAKa,OAAL,EAAb;IACA,MAAMC,MAAM,GAAG,KAAKR,SAAL,EAAf;;IAIA,MAAMS,EAYF,QAAKjB,WAZT;IAAA,MAAM;MAEJkB,IAFI;MAGJC,MAHI;MAIJC,GAJI;MAKJC,OALI;MAMJC,QANI;MAQJC,KARI;MAUJtB;IAVI,IAUEgB,EAVR;IAAA,MAWKO,IAAI,GAXHC,+EAAN;;IAgBA,IAAIxB,MAAJ,EAAY;MACV,OACKyB,qDACC,CAAC,CAACV,MAAM,CAACW,MAAT,IAAmB;QAAEX;MAAF,CADpB,GAC8B;QACjCf,MAAM,EAAE,MAAO2B,MAAP,IAAkB;UACxB,OAAOf,UAAU,CAACgB,GAAX,CAAeC,OAAf,CAAsBJ;YAC3BrB,IAAI,EAAEH;UADqB,GAExB0B,MAFwB,CAAtB,CAAP;QAID;MANgC,CAD9B,CADL;IAUD;;IAGD,OAAOF,MAAK,OAAL,CAAK,EAAL,EAAK,KAAK1B,WAAV,CAAP;EAED;;EAEDQ,SAAS;IACP,OAAO,CAAC,KAAKR,WAAL,CAAiBuB,KAAjB,IAA0B,EAA3B,EACJQ,MADI,CACG;MAAA,IAAC;QAAE7B;MAAF,CAAD;MAAA,OAAcA,IAAI,KAAK,aAAvB;IAAA,CADH,EAEJ8B,GAFI,CAEAC,eAFA,EAGJD,GAHI,CAGAE,KAAK,IAAG;MAEXA,KAAK,CAACC,IAAN,GAAaD,KAAK,CAACC,IAAN,IAAc,QAA3B;MACA,OAAOD,KAAP;IACD,CAPI,CAAP;EAQD;;AAnF8C","names":["GenericRemediator","Remediator","canRemediate","remediation","action","name","endsWith","options","step","getData","data","getInputs","reduce","acc","values","getNextStep","authClient","_context","getName","inputs","_a","href","method","rel","accepts","produces","value","rest","__rest","Object","length","params","idx","proceed","filter","map","unwrapFormValue","input","type"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\remediators\\GenericRemediator\\GenericRemediator.ts"],"sourcesContent":["import { IdxContext, NextStep, Input } from '../../types';\nimport { Remediator } from '../Base/Remediator';\nimport { unwrapFormValue } from './util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\nexport class GenericRemediator extends Remediator {\n  canRemediate(): boolean {\n    // only handle remediations that are able to submit form (xhr)\n    if (typeof this.remediation.action !== 'function') {\n      return false;\n    }\n\n    // DO NOT REMOVE - bring it back when enable client side validation for GenericRemediator - OKTA-512003\n    // const inputs = this.getInputs();\n    // const res = inputs.reduce((acc, input) => {\n    //   return acc && hasValidInputValue(input, this.values);\n    // }, true);\n    // return res;\n\n    if (this.remediation.name === 'poll' || this.remediation.name.endsWith('-poll')) {\n      return true;\n    }\n\n    if (this.options.step) {\n      return true;\n    }\n    \n    // disable auto proceed for unknown remediations\n    return false;\n  }\n\n  getData() {\n    const data = this.getInputs().reduce((acc, { name }) => {\n      acc[name] = this.values[name];\n      return acc;\n    }, {});\n    return data;\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, _context?: IdxContext): NextStep {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    \n    /* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n    // excludes transformed fields\n    const { \n      // http metas have been transformed to action\n      href, \n      method, \n      rel, \n      accepts, \n      produces, \n      // value has been transform to inputs\n      value,\n      // will be transformed to a function that resolves IdxTransaction\n      action,\n      ...rest \n    } = this.remediation;\n    /* eslint-enable no-unused-vars, @typescript-eslint/no-unused-vars */\n\n    // step to handle form submission\n    if (action) {\n      return { \n        ...rest,\n        ...(!!inputs.length && { inputs }),\n        action: async (params?) => {\n          return authClient.idx.proceed({\n            step: name,\n            ...params\n          });\n        }\n      };\n    }\n\n    // return whole remediation data for other steps, eg \"redirect-idp\"\n    return { ...this.remediation } as NextStep;\n    \n  }\n\n  getInputs(): Input[] {\n    return (this.remediation.value || [])\n      .filter(({ name }) => name !== 'stateHandle')\n      .map(unwrapFormValue)\n      .map(input => {\n        // use string as default input type\n        input.type = input.type || 'string';\n        return input;\n      });\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}