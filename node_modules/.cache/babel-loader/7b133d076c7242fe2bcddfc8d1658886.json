{"ast":null,"code":"import _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { warn } from './util/console.js';\nimport { isPromise } from './util/types.js';\n\nvar PromiseQueue = /*#__PURE__*/function () {\n  function PromiseQueue() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      quiet: false\n    };\n\n    _classCallCheck(this, PromiseQueue);\n\n    this.queue = [];\n    this.running = false;\n    this.options = options;\n  }\n\n  _createClass(PromiseQueue, [{\n    key: \"push\",\n    value: function push(method, thisObject) {\n      var _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        args[_key - 2] = arguments[_key];\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (_this.queue.length > 0) {\n          if (_this.options.quiet !== false) {\n            warn('Async method is being called but another async method is already running. ' + 'The new method will be delayed until the previous method completes.');\n          }\n        }\n\n        _this.queue.push({\n          method: method,\n          thisObject: thisObject,\n          args: args,\n          resolve: resolve,\n          reject: reject\n        });\n\n        _this.run();\n      });\n    }\n  }, {\n    key: \"run\",\n    value: function run() {\n      var _this2 = this;\n\n      if (this.running) {\n        return;\n      }\n\n      if (this.queue.length === 0) {\n        return;\n      }\n\n      this.running = true;\n      var queueItem = this.queue.shift();\n      var res = queueItem.method.apply(queueItem.thisObject, queueItem.args);\n\n      if (isPromise(res)) {\n        res.then(queueItem.resolve, queueItem.reject).finally(function () {\n          _this2.running = false;\n\n          _this2.run();\n        });\n      } else {\n        queueItem.resolve(res);\n        this.running = false;\n        this.run();\n      }\n    }\n  }]);\n\n  return PromiseQueue;\n}();\n\nexport { PromiseQueue as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;IA6BMA,Y;EAKJ,wBAA2D;IAAA,IAA/CC,OAA+C,uEAAhB;MAAEC,KAAK,EAAE;IAAT,CAAgB;;IAAA;;IACzD,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,OAAL,GAAe,KAAf;IACA,KAAKH,OAAL,GAAeA,OAAf;EACD;;;;WAKD,cAAKI,MAAL,EAAoCC,UAApC,EAAmE;MAAA;;MAAA,kCAAXC,IAAW;QAAXA,IAAW;MAAA;;MACjE,OAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;QACrC,IAAI,KAAI,CAACP,KAAL,CAAWQ,MAAX,GAAoB,CAAxB,EAA2B;UAGzB,IAAI,KAAI,CAACV,OAAL,CAAaC,KAAb,KAAuB,KAA3B,EAAkC;YAChCU,IAAI,CACF,+EACA,qEAFE,CAAJ;UAID;QACF;;QACD,KAAI,CAACT,KAAL,CAAWU,IAAX,CAAgB;UACdR,MAAM,EAANA,MADc;UAEdC,UAAU,EAAVA,UAFc;UAGdC,IAAI,EAAJA,IAHc;UAIdE,OAAO,EAAPA,OAJc;UAKdC,MAAM,EAANA;QALc,CAAhB;;QAOA,KAAI,CAACI,GAAL;MACD,CAnBM,CAAP;IAoBD;;;WAED,eAAG;MAAA;;MACD,IAAI,KAAKV,OAAT,EAAkB;QAChB;MACD;;MACD,IAAI,KAAKD,KAAL,CAAWQ,MAAX,KAAsB,CAA1B,EAA6B;QAC3B;MACD;;MACD,KAAKP,OAAL,GAAe,IAAf;MAEA,IAAIW,SAAS,GAAG,KAAKZ,KAAL,CAAWa,KAAX,EAAhB;MACA,IAAIC,GAAG,GAAGF,SAAS,CAACV,MAAV,CAAiBa,KAAjB,CAAuBH,SAAS,CAACT,UAAjC,EAA6CS,SAAS,CAACR,IAAvD,CAAV;;MACA,IAAIY,SAAS,CAACF,GAAD,CAAb,EAAoB;QACjBA,GAAwB,CAACG,IAAzB,CAA8BL,SAAS,CAACN,OAAxC,EAAiDM,SAAS,CAACL,MAA3D,EAAmEW,OAAnE,CAA2E,YAAK;UAC/E,MAAI,CAACjB,OAAL,GAAe,KAAf;;UACA,MAAI,CAACU,GAAL;QACD,CAHA;MAIF,CALD,MAKO;QACLC,SAAS,CAACN,OAAV,CAAkBQ,GAAlB;QACA,KAAKb,OAAL,GAAe,KAAf;QACA,KAAKU,GAAL;MACD;IACF","names":["PromiseQueue","options","quiet","queue","running","method","thisObject","args","Promise","resolve","reject","length","warn","push","run","queueItem","shift","res","apply","isPromise","then","finally"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\PromiseQueue.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// Implements a queue for synchronous or asynchronous methods\n// Methods will be wrapped in a promise and execute sequentially\n// This can be used to prevent concurrent calls to a single method or a set of methods\n\nimport { isPromise, warn } from './util';\n\ninterface QueueItem {\n  method: () => void;\n  thisObject: object;\n  args: any[];\n  resolve: (value?: unknown) => void;\n  reject: (reason?: unknown) => void;\n}\n\ninterface PromiseQueueOptions {\n  quiet?: boolean; // if false, concurrrency warnings will not be logged\n}\nclass PromiseQueue {\n  queue: QueueItem[];\n  running: boolean;\n  options: PromiseQueueOptions;\n\n  constructor(options: PromiseQueueOptions = { quiet: false }) {\n    this.queue = [];\n    this.running = false;\n    this.options = options;\n  }\n\n  // Returns a promise\n  // If the method is synchronous, it will resolve when the method completes\n  // If the method returns a promise, it will resolve (or reject) with the value from the method's promise\n  push(method: (...args: any) => any, thisObject: any, ...args: any[]) {\n    return new Promise((resolve, reject) => {\n      if (this.queue.length > 0) {\n        // There is at least one other pending call.\n        // The PromiseQueue will prevent these methods from running concurrently.\n        if (this.options.quiet !== false) {\n          warn(\n            'Async method is being called but another async method is already running. ' +\n            'The new method will be delayed until the previous method completes.'\n          );\n        }\n      }\n      this.queue.push({\n        method,\n        thisObject,\n        args,\n        resolve,\n        reject\n      });\n      this.run();\n    });\n  }\n\n  run() {\n    if (this.running) {\n      return;\n    }\n    if (this.queue.length === 0) {\n      return;\n    }\n    this.running = true;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    var queueItem = this.queue.shift()!;\n    var res = queueItem.method.apply(queueItem.thisObject, queueItem.args as never) as unknown;\n    if (isPromise(res)) {\n      (res as Promise<unknown>).then(queueItem.resolve, queueItem.reject).finally(() => {\n        this.running = false;\n        this.run();\n      });\n    } else {\n      queueItem.resolve(res);\n      this.running = false;\n      this.run();\n    }\n  }\n}\n\nexport default PromiseQueue;"]},"metadata":{},"sourceType":"module"}