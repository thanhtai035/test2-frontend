{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { proceed } from './proceed.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport { warn } from '../util/console.js';\n\nfunction poll(_x) {\n  return _poll.apply(this, arguments);\n}\n\nfunction _poll() {\n  _poll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(authClient) {\n    var options,\n        _a,\n        transaction,\n        meta,\n        availablePollingRemeditaions,\n        _args2 = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            _context2.next = 3;\n            return proceed(authClient, {\n              startPolling: true\n            });\n\n          case 3:\n            transaction = _context2.sent;\n            meta = getSavedTransactionMeta(authClient);\n            availablePollingRemeditaions = (_a = meta === null || meta === void 0 ? void 0 : meta.remediations) === null || _a === void 0 ? void 0 : _a.find(function (remediation) {\n              return remediation.includes('poll');\n            });\n\n            if (!(availablePollingRemeditaions === null || availablePollingRemeditaions === void 0 ? void 0 : availablePollingRemeditaions.length)) {\n              warn('No polling remediations available at the current IDX flow stage');\n            }\n\n            if (!Number.isInteger(options.refresh)) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var _a, _b, refresh;\n\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        try {\n                          refresh = (_b = (_a = transaction.nextStep) === null || _a === void 0 ? void 0 : _a.poll) === null || _b === void 0 ? void 0 : _b.refresh;\n\n                          if (refresh) {\n                            resolve(poll(authClient, {\n                              refresh: refresh\n                            }));\n                          } else {\n                            resolve(transaction);\n                          }\n                        } catch (err) {\n                          reject(err);\n                        }\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              })), options.refresh);\n            }));\n\n          case 9:\n            return _context2.abrupt(\"return\", transaction);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _poll.apply(this, arguments);\n}\n\nexport { poll };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;SAsBsBA,I;;;;;qEAAf,kBAAoBC,UAApB;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAsDC,OAAtD,8DAAgF,EAAhF;YAAA;YAAA,OACmBC,OAAO,CAACF,UAAD,EAAa;cAC1CG,YAAY,EAAE;YAD4B,CAAb,CAD1B;;UAAA;YACDC,WADC;YAKCC,IALD,GAKQC,uBAAuB,CAACN,UAAD,CAL/B;YAMDO,4BANC,GAM8B,UAAI,SAAJ,QAAI,KAAJ,sBAAI,CAAEC,YAAN,MAAoB,IAApB,IAAoBC,aAApB,GAAoB,MAApB,GAAoBA,QAAK,qBAAW;cAAA,OAAIC,WAAW,CAACC,QAAZ,CAAqB,MAArB,CAAJ;YAAA,CAAhB,CANlD;;YAOL,IAAI,EAACJ,4BAA4B,KAA5B,oCAA4B,WAA5B,GAA4B,MAA5B,+BAA4B,CAAEK,MAA/B,CAAJ,EAA2C;cACzCC,IAAI,CAAC,iEAAD,CAAJ;YACD;;YATI,KAWDC,MAAM,CAACC,SAAP,CAAiBd,OAAO,CAACe,OAAzB,CAXC;cAAA;cAAA;YAAA;;YAAA,kCAYI,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAAyB;cAC1CC,UAAU,0EAAC;gBAAA;;gBAAA;kBAAA;oBAAA;sBAAA;wBACT,IAAI;0BACIJ,OADJ,GACc,uBAAW,CAACK,QAAZ,MAAsB,IAAtB,IAAsBZ,aAAtB,GAAsB,MAAtB,GAAsBA,OAAtB,MAA4B,IAA5B,IAA4Ba,aAA5B,GAA4B,MAA5B,GAA4BA,UAD1C;;0BAEF,IAAIN,OAAJ,EAAa;4BACXE,OAAO,CAACnB,IAAI,CAACC,UAAD,EAAa;8BACvBgB,OAAO,EAAPA;4BADuB,CAAb,CAAL,CAAP;0BAGD,CAJD,MAIO;4BACLE,OAAO,CAACd,WAAD,CAAP;0BACD;wBACF,CATD,CASE,OAAOmB,GAAP,EAAY;0BACZJ,MAAM,CAACI,GAAD,CAAN;wBACD;;sBAZQ;sBAAA;wBAAA;oBAAA;kBAAA;gBAAA;cAAA,CAAD,IAaPtB,OAAO,CAACe,OAbD,CAAV;YAcD,CAfM,CAZJ;;UAAA;YAAA,kCA8BEZ,WA9BF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["poll","authClient","options","proceed","startPolling","transaction","meta","getSavedTransactionMeta","availablePollingRemeditaions","remediations","_a","remediation","includes","length","warn","Number","isInteger","refresh","Promise","resolve","reject","setTimeout","nextStep","_b","err"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\poll.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { proceed } from './proceed';\n\nimport { \n  IdxPollOptions,\n  IdxTransaction,\n  OktaAuthIdxInterface,\n} from '../types';\nimport { getSavedTransactionMeta } from './transactionMeta';\nimport { warn } from '../util';\n\nexport async function poll(authClient: OktaAuthIdxInterface, options: IdxPollOptions = {}): Promise<IdxTransaction> {\n  let transaction = await proceed(authClient, {\n    startPolling: true\n  });\n\n  const meta = getSavedTransactionMeta(authClient);\n  let availablePollingRemeditaions = meta?.remediations?.find(remediation => remediation.includes('poll'));\n  if (!availablePollingRemeditaions?.length) {\n    warn('No polling remediations available at the current IDX flow stage');\n  }\n\n  if (Number.isInteger(options.refresh)) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(async function () {\n        try {\n          const refresh = transaction.nextStep?.poll?.refresh;\n          if (refresh) {\n            resolve(poll(authClient, {\n              refresh\n            }));\n          } else {\n            resolve(transaction);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      }, options.refresh);\n    });\n  }\n\n  return transaction;\n}\n"]},"metadata":{},"sourceType":"module"}