{"ast":null,"code":"export default function compareVersions(v1, v2) {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2); // pop off the patch\n\n  const p1 = n1.pop();\n  const p2 = n2.pop(); // validate numbers\n\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r; // validate pre-release\n\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n}\nexport const validate = v => typeof v === 'string' && /^[v\\d]/.test(v) && semver.test(v);\nexport const compare = (v1, v2, operator) => {\n  // validate input operator\n  assertValidOperator(operator); // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n\n  const res = compareVersions(v1, v2);\n  return operatorResMap[operator].includes(res);\n};\nexport const satisfies = (v, r) => {\n  // if no range operator then \"=\"\n  const m = r.match(/^([<>=~^]+)/);\n  const op = m ? m[1] : '='; // if gt/lt/eq then operator compare\n\n  if (op !== '^' && op !== '~') return compare(v, r, op); // else range of either \"~\" or \"^\" is assumed\n\n  const [v1, v2, v3] = validateAndParse(v);\n  const [r1, r2, r3] = validateAndParse(r);\n  if (compareStrings(v1, r1) !== 0) return false;\n\n  if (op === '^') {\n    return compareSegments([v2, v3], [r2, r3]) >= 0;\n  }\n\n  if (compareStrings(v2, r2) !== 0) return false;\n  return compareStrings(v3, r3) >= 0;\n}; // export CJS style for parity\n\ncompareVersions.validate = validate;\ncompareVersions.compare = compare;\ncompareVersions.satisfies = satisfies;\nconst semver = /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nconst validateAndParse = v => {\n  if (typeof v !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n\n  const match = v.match(semver);\n\n  if (!match) {\n    throw new Error(`Invalid argument not valid semver ('${v}' received)`);\n  }\n\n  match.shift();\n  return match;\n};\n\nconst isWildcard = s => s === '*' || s === 'x' || s === 'X';\n\nconst tryParse = v => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nconst forceType = (a, b) => typeof a !== typeof b ? [String(a), String(b)] : [a, b];\n\nconst compareStrings = (a, b) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nconst compareSegments = (a, b) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || 0, b[i] || 0);\n    if (r !== 0) return r;\n  }\n\n  return 0;\n};\n\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1]\n};\nconst allowedOperators = Object.keys(operatorResMap);\n\nconst assertValidOperator = op => {\n  if (typeof op !== 'string') {\n    throw new TypeError(`Invalid operator type, expected string but got ${typeof op}`);\n  }\n\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(`Invalid operator, expected one of ${allowedOperators.join('|')}`);\n  }\n};","map":{"version":3,"names":["compareVersions","v1","v2","n1","validateAndParse","n2","p1","pop","p2","r","compareSegments","split","validate","v","test","semver","compare","operator","assertValidOperator","res","operatorResMap","includes","satisfies","m","match","op","v3","r1","r2","r3","compareStrings","TypeError","Error","shift","isWildcard","s","tryParse","n","parseInt","isNaN","forceType","a","b","String","ap","bp","i","Math","max","length","allowedOperators","Object","keys","indexOf","join"],"sources":["C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/compare-versions/index.mjs"],"sourcesContent":["export default function compareVersions(v1, v2) {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2);\n\n  // pop off the patch\n  const p1 = n1.pop();\n  const p2 = n2.pop();\n\n  // validate numbers\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n\n  // validate pre-release\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n}\n\nexport const validate = (v) =>\n  typeof v === 'string' && /^[v\\d]/.test(v) && semver.test(v);\n\nexport const compare = (v1, v2, operator) => {\n  // validate input operator\n  assertValidOperator(operator);\n\n  // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n  const res = compareVersions(v1, v2);\n\n  return operatorResMap[operator].includes(res);\n};\n\nexport const satisfies = (v, r) => {\n  // if no range operator then \"=\"\n  const m = r.match(/^([<>=~^]+)/);\n  const op = m ? m[1] : '=';\n\n  // if gt/lt/eq then operator compare\n  if (op !== '^' && op !== '~') return compare(v, r, op);\n\n  // else range of either \"~\" or \"^\" is assumed\n  const [v1, v2, v3] = validateAndParse(v);\n  const [r1, r2, r3] = validateAndParse(r);\n  if (compareStrings(v1, r1) !== 0) return false;\n  if (op === '^') {\n    return compareSegments([v2, v3], [r2, r3]) >= 0;\n  }\n  if (compareStrings(v2, r2) !== 0) return false;\n  return compareStrings(v3, r3) >= 0;\n};\n\n// export CJS style for parity\ncompareVersions.validate = validate;\ncompareVersions.compare = compare;\ncompareVersions.satisfies = satisfies;\n\nconst semver =\n  /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nconst validateAndParse = (v) => {\n  if (typeof v !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n  const match = v.match(semver);\n  if (!match) {\n    throw new Error(`Invalid argument not valid semver ('${v}' received)`);\n  }\n  match.shift();\n  return match;\n};\n\nconst isWildcard = (s) => s === '*' || s === 'x' || s === 'X';\n\nconst tryParse = (v) => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nconst forceType = (a, b) =>\n  typeof a !== typeof b ? [String(a), String(b)] : [a, b];\n\nconst compareStrings = (a, b) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nconst compareSegments = (a, b) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || 0, b[i] || 0);\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1],\n};\n\nconst allowedOperators = Object.keys(operatorResMap);\n\nconst assertValidOperator = (op) => {\n  if (typeof op !== 'string') {\n    throw new TypeError(\n      `Invalid operator type, expected string but got ${typeof op}`\n    );\n  }\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\n      `Invalid operator, expected one of ${allowedOperators.join('|')}`\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}