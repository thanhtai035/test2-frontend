{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { parseIdxResponse } from './idxResponseParser.js';\n\nfunction makeIdxState(authClient, idxResponse, toPersist, requestDidSucceed) {\n  var _a, _b, _c;\n\n  const rawIdxResponse = idxResponse;\n  const {\n    remediations,\n    context,\n    actions\n  } = parseIdxResponse(authClient, idxResponse, toPersist);\n  const neededToProceed = [...remediations];\n\n  const proceed = async function (remediationChoice) {\n    let paramsFromUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const remediationChoiceObject = remediations.find(remediation => remediation.name === remediationChoice);\n\n    if (!remediationChoiceObject) {\n      return Promise.reject(`Unknown remediation choice: [${remediationChoice}]`);\n    }\n\n    const actionFn = remediationChoiceObject.action;\n\n    if (typeof actionFn !== 'function') {\n      return Promise.reject(`Current remediation cannot make form submit action: [${remediationChoice}]`);\n    }\n\n    return remediationChoiceObject.action(paramsFromUser);\n  };\n\n  const findCode = item => item.name === 'interaction_code';\n\n  const interactionCode = (_c = (_b = (_a = rawIdxResponse.successWithInteractionCode) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.find(findCode)) === null || _c === void 0 ? void 0 : _c.value;\n  return {\n    proceed,\n    neededToProceed,\n    actions,\n    context,\n    rawIdxState: rawIdxResponse,\n    interactionCode,\n    toPersist,\n    requestDidSucceed\n  };\n}\n\nexport { makeIdxState };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAgBM,SAAUA,YAAV,CACJC,UADI,EAEJC,WAFI,EAGJC,SAHI,EAIJC,iBAJI,EAIsB;;;EAE1B,MAAMC,cAAc,GAAIH,WAAxB;EACA,MAAM;IAAEI,YAAF;IAAgBC,OAAhB;IAAyBC;EAAzB,IAAqCC,gBAAgB,CAAER,UAAF,EAAcC,WAAd,EAA2BC,SAA3B,CAA3D;EACA,MAAMO,eAAe,GAAG,CAAC,GAAGJ,YAAJ,CAAxB;;EAEA,MAAMK,OAAO,GAA2B,gBAAgBC,iBAAhB,EAAsD;IAAA,IAAnBC,cAAmB,uEAAF,EAAE;IAO5F,MAAMC,uBAAuB,GAAGR,YAAY,CAACS,IAAb,CAAmBC,WAAD,IAAiBA,WAAW,CAACC,IAAZ,KAAqBL,iBAAxD,CAAhC;;IACA,IAAK,CAACE,uBAAN,EAAgC;MAC9B,OAAOI,OAAO,CAACC,MAAR,CAAe,gCAAgCP,iBAAiB,GAAhE,CAAP;IACD;;IAED,MAAMQ,QAAQ,GAAGN,uBAAuB,CAACO,MAAzC;;IACA,IAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;MAClC,OAAOF,OAAO,CAACC,MAAR,CAAe,wDAAwDP,iBAAiB,GAAxF,CAAP;IACD;;IAED,OAAOE,uBAAuB,CAACO,MAAxB,CAA+BR,cAA/B,CAAP;EACD,CAlBD;;EAoBA,MAAMS,QAAQ,GAAGC,IAAI,IAAIA,IAAI,CAACN,IAAL,KAAc,kBAAvC;;EACA,MAAMO,eAAe,GAAG,gCAAc,CAACC,0BAAf,MAA2C,IAA3C,IAA2CC,aAA3C,GAA2C,MAA3C,GAA2CA,QAA3C,MAAgD,IAAhD,IAAgDC,aAAhD,GAAgD,MAAhD,GAAgDA,GAAEZ,IAAF,CAAQO,QAAR,CAAhD,MAAkE,IAAlE,IAAkEM,aAAlE,GAAkE,MAAlE,GAAkEA,GAAEC,KAA5F;EAEA,OAAO;IACLlB,OADK;IAELD,eAFK;IAGLF,OAHK;IAILD,OAJK;IAKLuB,WAAW,EAAEzB,cALR;IAMLmB,eANK;IAOLrB,SAPK;IAQLC;EARK,CAAP;AAUF","names":["makeIdxState","authClient","idxResponse","toPersist","requestDidSucceed","rawIdxResponse","remediations","context","actions","parseIdxResponse","neededToProceed","proceed","remediationChoice","paramsFromUser","remediationChoiceObject","find","remediation","name","Promise","reject","actionFn","action","findCode","item","interactionCode","successWithInteractionCode","_a","_b","_c","value","rawIdxState"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\idxState\\v1\\makeIdxState.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { IdxResponse, IdxToPersist } from '../../types/idx-js';\nimport { OktaAuthIdxInterface, RawIdxResponse } from '../../../types';    // auth-js/types\nimport { parseIdxResponse } from './idxResponseParser';\n\nexport function makeIdxState( \n  authClient: OktaAuthIdxInterface,\n  idxResponse: RawIdxResponse,\n  toPersist: IdxToPersist,\n  requestDidSucceed: boolean\n): IdxResponse {\n  const rawIdxResponse =  idxResponse;\n  const { remediations, context, actions } = parseIdxResponse( authClient, idxResponse, toPersist );\n  const neededToProceed = [...remediations];\n\n  const proceed: IdxResponse['proceed'] = async function( remediationChoice, paramsFromUser = {} ) {\n    /*\n    remediationChoice is the name attribute on each form\n    name should remain unique for items inside the remediation that are considered forms(identify, select-factor)\n    name can be duplicate for items like redirect where its not considered a form(redirect)\n    when names are not unique its a redirect to a href, so widget wont POST to idx-js layer.\n    */\n    const remediationChoiceObject = remediations.find((remediation) => remediation.name === remediationChoice);\n    if ( !remediationChoiceObject ) {\n      return Promise.reject(`Unknown remediation choice: [${remediationChoice}]`);\n    }\n\n    const actionFn = remediationChoiceObject.action;\n    if (typeof actionFn !== 'function') {\n      return Promise.reject(`Current remediation cannot make form submit action: [${remediationChoice}]`);\n    }\n\n    return remediationChoiceObject.action(paramsFromUser);\n  };\n\n  const findCode = item => item.name === 'interaction_code';\n  const interactionCode = rawIdxResponse.successWithInteractionCode?.value?.find( findCode )?.value as string;\n\n  return {\n    proceed,\n    neededToProceed,\n    actions,\n    context,\n    rawIdxState: rawIdxResponse,\n    interactionCode,\n    toPersist,\n    requestDidSucceed,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}