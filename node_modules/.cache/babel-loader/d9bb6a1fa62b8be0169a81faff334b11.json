{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../../../_virtual/_tslib.js';\nimport { generateRemediationFunctions } from './remediationParser.js';\nimport generateIdxAction from './generateIdxAction.js';\nimport { JSONPath } from 'jsonpath-plus';\nconst SKIP_FIELDS = Object.fromEntries(['remediation', 'context'].map(field => [field, !!'skip this field']));\n\nconst parseNonRemediations = function parseNonRemediations(authClient, idxResponse) {\n  let toPersist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const actions = {};\n  const context = {};\n  Object.keys(idxResponse).filter(field => !SKIP_FIELDS[field]).forEach(field => {\n    const fieldIsObject = typeof idxResponse[field] === 'object' && !!idxResponse[field];\n\n    if (!fieldIsObject) {\n      context[field] = idxResponse[field];\n      return;\n    }\n\n    if (idxResponse[field].rel) {\n      actions[idxResponse[field].name] = generateIdxAction(authClient, idxResponse[field], toPersist);\n      return;\n    }\n\n    const _a = idxResponse[field],\n          {\n      value: fieldValue,\n      type\n    } = _a,\n          info = __rest(_a, [\"value\", \"type\"]);\n\n    context[field] = Object.assign({\n      type\n    }, info);\n\n    if (type !== 'object') {\n      context[field].value = fieldValue;\n      return;\n    }\n\n    context[field].value = {};\n    Object.entries(fieldValue).forEach(_ref => {\n      let [subField, value] = _ref;\n\n      if (value.rel) {\n        actions[`${field}-${subField.name || subField}`] = generateIdxAction(authClient, value, toPersist);\n      } else {\n        context[field].value[subField] = value;\n      }\n    });\n  });\n  return {\n    context,\n    actions\n  };\n};\n\nconst expandRelatesTo = (idxResponse, value) => {\n  Object.keys(value).forEach(k => {\n    if (k === 'relatesTo') {\n      const query = Array.isArray(value[k]) ? value[k][0] : value[k];\n\n      if (typeof query === 'string') {\n        const result = JSONPath({\n          path: query,\n          json: idxResponse\n        })[0];\n\n        if (result) {\n          value[k] = result;\n          return;\n        }\n      }\n    }\n\n    if (Array.isArray(value[k])) {\n      value[k].forEach(innerValue => expandRelatesTo(idxResponse, innerValue));\n    }\n  });\n};\n\nconst convertRemediationAction = (authClient, remediation, toPersist) => {\n  if (remediation.rel) {\n    const remediationActions = generateRemediationFunctions(authClient, [remediation], toPersist);\n    const actionFn = remediationActions[remediation.name];\n    return Object.assign(Object.assign({}, remediation), {\n      action: actionFn\n    });\n  }\n\n  return remediation;\n};\n\nconst parseIdxResponse = function parseIdxResponse(authClient, idxResponse) {\n  let toPersist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _a;\n\n  const remediationData = ((_a = idxResponse.remediation) === null || _a === void 0 ? void 0 : _a.value) || [];\n  remediationData.forEach(remediation => expandRelatesTo(idxResponse, remediation));\n  const remediations = remediationData.map(remediation => convertRemediationAction(authClient, remediation, toPersist));\n  const {\n    context,\n    actions\n  } = parseNonRemediations(authClient, idxResponse, toPersist);\n  return {\n    remediations,\n    context,\n    actions\n  };\n};\n\nexport { parseIdxResponse, parseNonRemediations };","map":{"version":3,"mappings":"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","names":["SKIP_FIELDS","Object","fromEntries","map","field","parseNonRemediations","authClient","idxResponse","toPersist","actions","context","keys","filter","forEach","fieldIsObject","rel","name","generateIdxAction","_a","value","fieldValue","type","info","__rest","entries","subField","expandRelatesTo","k","query","Array","isArray","result","JSONPath","path","json","innerValue","convertRemediationAction","remediation","remediationActions","generateRemediationFunctions","actionFn","action","parseIdxResponse","remediationData","remediations"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\idxState\\v1\\idxResponseParser.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-disable max-len */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { OktaAuthIdxInterface } from '../../../types';    // auth-js/types\nimport { generateRemediationFunctions } from './remediationParser';\nimport generateIdxAction from './generateIdxAction';\nimport { JSONPath } from 'jsonpath-plus';\n\nconst SKIP_FIELDS = Object.fromEntries([\n  'remediation', // remediations are put into proceed/neededToProceed\n  'context', // the API response of 'context' isn't externally useful.  We ignore it and put all non-action (contextual) info into idxState.context\n].map( (field) => [ field, !!'skip this field' ] ));\n\nexport const parseNonRemediations = function parseNonRemediations( authClient: OktaAuthIdxInterface, idxResponse, toPersist = {} ) {\n  const actions = {};\n  const context = {};\n\n  Object.keys(idxResponse)\n    .filter( field => !SKIP_FIELDS[field])\n    .forEach( field => {\n      const fieldIsObject = typeof idxResponse[field] === 'object' && !!idxResponse[field];\n\n      if ( !fieldIsObject ) {\n        // simple fields are contextual info\n        context[field] = idxResponse[field];\n        return;\n      }\n\n      if ( idxResponse[field].rel ) {\n        // top level actions\n        actions[idxResponse[field].name] = generateIdxAction(authClient, idxResponse[field], toPersist);\n        return;\n      }\n\n      const { value: fieldValue, type, ...info} = idxResponse[field];\n      context[field] = { type, ...info}; // add the non-action parts as context\n\n      if ( type !== 'object' ) {\n        // only object values hold actions\n        context[field].value = fieldValue;\n        return;\n      }\n\n      // We are an object field containing an object value\n      context[field].value = {};\n      Object.entries(fieldValue)\n        .forEach( ([subField, value]) => {\n          if (value.rel) { // is [field].value[subField] an action?\n            // add any \"action\" value subfields to actions\n            actions[`${field}-${subField.name || subField}`] = generateIdxAction(authClient, value, toPersist);\n          } else {\n            // add non-action value subfields to context\n            context[field].value[subField] = value;\n          }\n        });\n    });\n\n  return { context, actions };\n};\n\nconst expandRelatesTo = (idxResponse, value) => {\n  Object.keys(value).forEach(k => {\n    if (k === 'relatesTo') {\n      const query = Array.isArray(value[k]) ? value[k][0] : value[k];\n      if (typeof query === 'string') {\n        // eslint-disable-next-line new-cap\n        const result = JSONPath({ path: query, json: idxResponse })[0];\n        if (result) {\n          value[k] = result;\n          return;\n        }\n      }\n    }\n    if (Array.isArray(value[k])) {\n      value[k].forEach(innerValue => expandRelatesTo(idxResponse, innerValue));\n    }\n  });\n};\n\nconst convertRemediationAction = (authClient: OktaAuthIdxInterface, remediation, toPersist) => {\n  // Only remediation that has `rel` field (indicator for form submission) can have http action\n  if (remediation.rel) {\n    const remediationActions = generateRemediationFunctions( authClient, [remediation], toPersist );\n    const actionFn = remediationActions[remediation.name];\n    return {\n      ...remediation,\n      action: actionFn,\n    };\n  }\n  \n  return remediation;\n};\n\nexport const parseIdxResponse = function parseIdxResponse( authClient: OktaAuthIdxInterface, idxResponse, toPersist = {} ): {\n  remediations: IdxRemediation[];\n  context: IdxContext;\n  actions: IdxActions;\n} {\n  const remediationData = idxResponse.remediation?.value || [];\n\n  remediationData.forEach(\n    remediation => expandRelatesTo(idxResponse, remediation)\n  );\n\n  const remediations = remediationData.map(remediation => convertRemediationAction( authClient, remediation, toPersist ));\n\n  const { context, actions } = parseNonRemediations( authClient, idxResponse, toPersist );\n\n  return {\n    remediations,\n    context,\n    actions,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}