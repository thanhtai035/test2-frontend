{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { base64UrlToBuffer, bufferToBase64Url } from './base64.js';\n\nvar getEnrolledCredentials = function getEnrolledCredentials() {\n  var authenticatorEnrollments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var credentials = [];\n  authenticatorEnrollments.forEach(function (enrollement) {\n    if (enrollement.key === 'webauthn') {\n      credentials.push({\n        type: 'public-key',\n        id: base64UrlToBuffer(enrollement.credentialId)\n      });\n    }\n  });\n  return credentials;\n};\n\nvar buildCredentialCreationOptions = function buildCredentialCreationOptions(activationData, authenticatorEnrollments) {\n  return {\n    publicKey: {\n      rp: activationData.rp,\n      user: {\n        id: base64UrlToBuffer(activationData.user.id),\n        name: activationData.user.name,\n        displayName: activationData.user.displayName\n      },\n      challenge: base64UrlToBuffer(activationData.challenge),\n      pubKeyCredParams: activationData.pubKeyCredParams,\n      attestation: activationData.attestation,\n      authenticatorSelection: activationData.authenticatorSelection,\n      excludeCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\n\nvar buildCredentialRequestOptions = function buildCredentialRequestOptions(challengeData, authenticatorEnrollments) {\n  return {\n    publicKey: {\n      challenge: base64UrlToBuffer(challengeData.challenge),\n      userVerification: challengeData.userVerification,\n      allowCredentials: getEnrolledCredentials(authenticatorEnrollments)\n    }\n  };\n};\n\nvar getAttestation = function getAttestation(credential) {\n  var response = credential.response;\n  var id = credential.id;\n  var clientData = bufferToBase64Url(response.clientDataJSON);\n  var attestation = bufferToBase64Url(response.attestationObject);\n  return {\n    id: id,\n    clientData: clientData,\n    attestation: attestation\n  };\n};\n\nvar getAssertion = function getAssertion(credential) {\n  var response = credential.response;\n  var id = credential.id;\n  var clientData = bufferToBase64Url(response.clientDataJSON);\n  var authenticatorData = bufferToBase64Url(response.authenticatorData);\n  var signatureData = bufferToBase64Url(response.signature);\n  return {\n    id: id,\n    clientData: clientData,\n    authenticatorData: authenticatorData,\n    signatureData: signatureData\n  };\n};\n\nexport { buildCredentialCreationOptions, buildCredentialRequestOptions, getAssertion, getAttestation };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAgBA,IAAMA,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAsD;EAAA,IAArDC,wBAAqD,uEAAN,EAAM;EACnF,IAAMC,WAAW,GAAoC,EAArD;EACAD,wBAAwB,CAACE,OAAzB,CAAiC,UAACC,WAAD,EAAgB;IAC/C,IAAIA,WAAW,CAACC,GAAZ,KAAoB,UAAxB,EAAoC;MAClCH,WAAW,CAACI,IAAZ,CAAiB;QACfC,IAAI,EAAE,YADS;QAEfC,EAAE,EAAEC,iBAAiB,CAACL,WAAW,CAACM,YAAb;MAFN,CAAjB;IAID;EACF,CAPD;EAQA,OAAOR,WAAP;AACD,CAXD;;IAeaS,8BAA8B,GAAG,SAAjCA,8BAAiC,CAC5CC,cAD4C,EACZX,wBADY,EAE1C;EACF,OAAO;IACLY,SAAS,EAAE;MACTC,EAAE,EAAEF,cAAc,CAACE,EADV;MAETC,IAAI,EAAE;QACJP,EAAE,EAAEC,iBAAiB,CAACG,cAAc,CAACG,IAAf,CAAoBP,EAArB,CADjB;QAEJQ,IAAI,EAAEJ,cAAc,CAACG,IAAf,CAAoBC,IAFtB;QAGJC,WAAW,EAAEL,cAAc,CAACG,IAAf,CAAoBE;MAH7B,CAFG;MAOTC,SAAS,EAAET,iBAAiB,CAACG,cAAc,CAACM,SAAhB,CAPnB;MAQTC,gBAAgB,EAAEP,cAAc,CAACO,gBARxB;MASTC,WAAW,EAAER,cAAc,CAACQ,WATnB;MAUTC,sBAAsB,EAAET,cAAc,CAACS,sBAV9B;MAWTC,kBAAkB,EAAEtB,sBAAsB,CAACC,wBAAD;IAXjC;EADN,CAAP;AAeA;;IAKWsB,6BAA6B,GAAG,SAAhCA,6BAAgC,CAC3CC,aAD2C,EACbvB,wBADa,EAEzC;EACF,OAAO;IACLY,SAAS,EAAE;MACTK,SAAS,EAAET,iBAAiB,CAACe,aAAa,CAACN,SAAf,CADnB;MAETO,gBAAgB,EAAED,aAAa,CAACC,gBAFvB;MAGTC,gBAAgB,EAAE1B,sBAAsB,CAACC,wBAAD;IAH/B;EADN,CAAP;AAOA;;AAIW,kBAAc,GAAG,SAAjB0B,cAAiB,CAACC,UAAD,EAAoC;EAChE,IAAMC,QAAQ,GAAGD,UAAU,CAACC,QAA5B;EACA,IAAMrB,EAAE,GAAGoB,UAAU,CAACpB,EAAtB;EACA,IAAMsB,UAAU,GAAGC,iBAAiB,CAACF,QAAQ,CAACG,cAAV,CAApC;EACA,IAAMZ,WAAW,GAAGW,iBAAiB,CAACF,QAAQ,CAACI,iBAAV,CAArC;EACA,OAAO;IACLzB,EAAE,EAAFA,EADK;IAELsB,UAAU,EAAVA,UAFK;IAGLV,WAAW,EAAXA;EAHK,CAAP;AAKA,CAVW;;AAcA,gBAAY,GAAG,SAAfc,YAAe,CAACN,UAAD,EAAoC;EAC9D,IAAMC,QAAQ,GAAGD,UAAU,CAACC,QAA5B;EACA,IAAMrB,EAAE,GAAGoB,UAAU,CAACpB,EAAtB;EACA,IAAMsB,UAAU,GAAGC,iBAAiB,CAACF,QAAQ,CAACG,cAAV,CAApC;EACA,IAAMG,iBAAiB,GAAGJ,iBAAiB,CAACF,QAAQ,CAACM,iBAAV,CAA3C;EACA,IAAMC,aAAa,GAAGL,iBAAiB,CAACF,QAAQ,CAACQ,SAAV,CAAvC;EACA,OAAO;IACL7B,EAAE,EAAFA,EADK;IAELsB,UAAU,EAAVA,UAFK;IAGLK,iBAAiB,EAAjBA,iBAHK;IAILC,aAAa,EAAbA;EAJK,CAAP;AAMF,CAZa","names":["getEnrolledCredentials","authenticatorEnrollments","credentials","forEach","enrollement","key","push","type","id","base64UrlToBuffer","credentialId","buildCredentialCreationOptions","activationData","publicKey","rp","user","name","displayName","challenge","pubKeyCredParams","attestation","authenticatorSelection","excludeCredentials","buildCredentialRequestOptions","challengeData","userVerification","allowCredentials","getAttestation","credential","response","clientData","bufferToBase64Url","clientDataJSON","attestationObject","getAssertion","authenticatorData","signatureData","signature"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\crypto\\webauthn.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { base64UrlToBuffer, bufferToBase64Url } from './base64';\nimport { ActivationData, ChallengeData, IdxAuthenticator } from '../idx/types';\n\n// Get known credentials from list of enrolled authenticators\nconst getEnrolledCredentials = (authenticatorEnrollments: IdxAuthenticator[] = []) => {\n  const credentials: PublicKeyCredentialDescriptor[] = [];\n  authenticatorEnrollments.forEach((enrollement) => {\n    if (enrollement.key === 'webauthn') {\n      credentials.push({\n        type: 'public-key',\n        id: base64UrlToBuffer(enrollement.credentialId),\n      });\n    }\n  });\n  return credentials;\n};\n\n// Build options for navigator.credentials.create\n// https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create\nexport const buildCredentialCreationOptions = (\n  activationData: ActivationData, authenticatorEnrollments: IdxAuthenticator[]\n) => {\n  return {\n    publicKey: {\n      rp: activationData.rp,\n      user: {\n        id: base64UrlToBuffer(activationData.user.id),\n        name: activationData.user.name,\n        displayName: activationData.user.displayName\n      },\n      challenge: base64UrlToBuffer(activationData.challenge),\n      pubKeyCredParams: activationData.pubKeyCredParams,\n      attestation: activationData.attestation,\n      authenticatorSelection: activationData.authenticatorSelection,\n      excludeCredentials: getEnrolledCredentials(authenticatorEnrollments),\n    }\n  } as CredentialCreationOptions;\n};\n\n\n// Build options for navigator.credentials.get\n// https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get\nexport const buildCredentialRequestOptions = (\n  challengeData: ChallengeData, authenticatorEnrollments: IdxAuthenticator[]\n) => {\n  return {\n    publicKey: {\n      challenge: base64UrlToBuffer(challengeData.challenge),\n      userVerification: challengeData.userVerification,\n      allowCredentials: getEnrolledCredentials(authenticatorEnrollments),\n    }\n  } as CredentialRequestOptions;\n};\n\n// Build attestation for webauthn enroll\n// https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAttestationResponse\nexport const getAttestation = (credential: PublicKeyCredential) => {\n  const response = credential.response as AuthenticatorAttestationResponse;\n  const id = credential.id;\n  const clientData = bufferToBase64Url(response.clientDataJSON);\n  const attestation = bufferToBase64Url(response.attestationObject);\n  return {\n    id,\n    clientData,\n    attestation\n  };\n};\n\n// Build assertion for webauthn verification\n// https://developer.mozilla.org/en-US/docs/Web/API/AuthenticatorAssertionResponse\nexport const getAssertion = (credential: PublicKeyCredential) => {\n  const response = credential.response as AuthenticatorAssertionResponse;\n  const id = credential.id;\n  const clientData = bufferToBase64Url(response.clientDataJSON);\n  const authenticatorData = bufferToBase64Url(response.authenticatorData);\n  const signatureData = bufferToBase64Url(response.signature);\n  return {\n    id,\n    clientData,\n    authenticatorData,\n    signatureData\n  };\n};\n"]},"metadata":{},"sourceType":"module"}