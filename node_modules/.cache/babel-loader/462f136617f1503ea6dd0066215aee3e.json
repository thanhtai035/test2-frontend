{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { BroadcastChannel, createLeaderElection } from 'broadcast-channel';\nimport { isBrowser } from '../features.js';\n\nclass LeaderElectionService {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.started = false;\n    this.options = options;\n    this.onLeaderDuplicate = this.onLeaderDuplicate.bind(this);\n    this.onLeader = this.onLeader.bind(this);\n  }\n\n  onLeaderDuplicate() {}\n\n  async onLeader() {\n    var _a, _b;\n\n    await ((_b = (_a = this.options).onLeader) === null || _b === void 0 ? void 0 : _b.call(_a));\n  }\n\n  isLeader() {\n    var _a;\n\n    return !!((_a = this.elector) === null || _a === void 0 ? void 0 : _a.isLeader);\n  }\n\n  hasLeader() {\n    var _a;\n\n    return !!((_a = this.elector) === null || _a === void 0 ? void 0 : _a.hasLeader);\n  }\n\n  async start() {\n    await this.stop();\n\n    if (this.canStart()) {\n      const {\n        electionChannelName\n      } = this.options;\n      this.channel = new BroadcastChannel(electionChannelName);\n      this.elector = createLeaderElection(this.channel);\n      this.elector.onduplicate = this.onLeaderDuplicate;\n      this.elector.awaitLeadership().then(this.onLeader);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      if (this.elector) {\n        await this.elector.die();\n        this.elector = undefined;\n      }\n\n      if (this.channel) {\n        this.channel.postInternal = () => Promise.resolve();\n\n        await this.channel.close();\n        this.channel = undefined;\n      }\n\n      this.started = false;\n    }\n  }\n\n  requiresLeadership() {\n    return false;\n  }\n\n  isStarted() {\n    return this.started;\n  }\n\n  canStart() {\n    return isBrowser();\n  }\n\n}\n\nexport { LeaderElectionService };","map":{"version":3,"mappings":";;;;;;;;;;;;;;MA0BaA,sBAAqB;EAMhCC,cAAwC;IAAA,IAA5BC,OAA4B,uEAAF,EAAE;IAFhC,KAAOC,OAAP,GAAU,KAAV;IAGN,KAAKD,OAAL,GAAeA,OAAf;IACA,KAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;IACA,KAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;EACD;;EAEOD,iBAAiB,IACxB;;EAEqB,MAARE,QAAQ;;;IACpB,OAAM,iBAAKJ,OAAL,EAAaI,QAAb,MAAyB,IAAzB,IAAyBC,aAAzB,GAAyB,MAAzB,GAAyBA,WAA/B;EACD;;EAEDC,QAAQ;;;IACN,OAAO,CAAC,EAAC,WAAKC,OAAL,MAAY,IAAZ,IAAYC,aAAZ,GAAY,MAAZ,GAAYA,GAAEF,QAAf,CAAR;EACD;;EAEDG,SAAS;;;IACP,OAAO,CAAC,EAAC,WAAKF,OAAL,MAAY,IAAZ,IAAYC,aAAZ,GAAY,MAAZ,GAAYA,GAAEC,SAAf,CAAR;EACD;;EAEU,MAALC,KAAK;IACT,MAAM,KAAKC,IAAL,EAAN;;IACA,IAAI,KAAKC,QAAL,EAAJ,EAAqB;MACnB,MAAM;QAAEC;MAAF,IAA0B,KAAKb,OAArC;MACA,KAAKc,OAAL,GAAe,IAAIC,gBAAJ,CAAqBF,mBAArB,CAAf;MACA,KAAKN,OAAL,GAAeS,oBAAoB,CAAC,KAAKF,OAAN,CAAnC;MACA,KAAKP,OAAL,CAAaU,WAAb,GAA2B,KAAKf,iBAAhC;MACA,KAAKK,OAAL,CAAaW,eAAb,GAA+BC,IAA/B,CAAoC,KAAKf,QAAzC;MACA,KAAKH,OAAL,GAAe,IAAf;IACD;EACF;;EAES,MAAJU,IAAI;IACR,IAAI,KAAKV,OAAT,EAAkB;MAChB,IAAI,KAAKM,OAAT,EAAkB;QAChB,MAAM,KAAKA,OAAL,CAAaa,GAAb,EAAN;QACA,KAAKb,OAAL,GAAec,SAAf;MACD;;MACD,IAAI,KAAKP,OAAT,EAAkB;QAEf,KAAKA,OAAL,CAAqBQ,YAArB,GAAoC,MAAMC,OAAO,CAACC,OAAR,EAA1C;;QACD,MAAM,KAAKV,OAAL,CAAaW,KAAb,EAAN;QACA,KAAKX,OAAL,GAAeO,SAAf;MACD;;MACD,KAAKpB,OAAL,GAAe,KAAf;IACD;EACF;;EAEDyB,kBAAkB;IAChB,OAAO,KAAP;EACD;;EAEDC,SAAS;IACP,OAAO,KAAK1B,OAAZ;EACD;;EAEDW,QAAQ;IACN,OAAOgB,SAAS,EAAhB;EACD;;AAjE+B","names":["LeaderElectionService","constructor","options","started","onLeaderDuplicate","bind","onLeader","_b","isLeader","elector","_a","hasLeader","start","stop","canStart","electionChannelName","channel","BroadcastChannel","createLeaderElection","onduplicate","awaitLeadership","then","die","undefined","postInternal","Promise","resolve","close","requiresLeadership","isStarted","isBrowser"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\services\\LeaderElectionService.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { ServiceInterface, ServiceManagerOptions } from '../types';\nimport {\n  BroadcastChannel,\n  createLeaderElection,\n  LeaderElector\n} from 'broadcast-channel';\nimport { isBrowser } from '../features';\n\ndeclare type OnLeaderHandler = (() => Promise<void>);\ndeclare type ServiceOptions = ServiceManagerOptions & {\n  onLeader?: OnLeaderHandler;\n};\n\nexport class LeaderElectionService implements ServiceInterface {\n  private options: ServiceOptions;\n  private channel?: BroadcastChannel;\n  private elector?: LeaderElector;\n  private started = false;\n\n  constructor(options: ServiceOptions = {}) {\n    this.options = options;\n    this.onLeaderDuplicate = this.onLeaderDuplicate.bind(this);\n    this.onLeader = this.onLeader.bind(this);\n  }\n\n  private onLeaderDuplicate() {\n  }\n\n  private async onLeader() {\n    await this.options.onLeader?.();\n  }\n\n  isLeader() {\n    return !!this.elector?.isLeader;\n  }\n\n  hasLeader() {\n    return !!this.elector?.hasLeader;\n  }\n\n  async start() {\n    await this.stop();\n    if (this.canStart()) {\n      const { electionChannelName } = this.options;\n      this.channel = new BroadcastChannel(electionChannelName as string);\n      this.elector = createLeaderElection(this.channel);\n      this.elector.onduplicate = this.onLeaderDuplicate;\n      this.elector.awaitLeadership().then(this.onLeader);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      if (this.elector) {\n        await this.elector.die();\n        this.elector = undefined;\n      }\n      if (this.channel) {\n        // Workaround to fix error `Failed to execute 'postMessage' on 'BroadcastChannel': Channel is closed`\n        (this.channel as any).postInternal = () => Promise.resolve();\n        await this.channel.close();\n        this.channel = undefined;\n      }\n      this.started = false;\n    }\n  }\n\n  requiresLeadership() {\n    return false;\n  }\n\n  isStarted() {\n    return this.started;\n  }\n\n  canStart() {\n    return isBrowser();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}