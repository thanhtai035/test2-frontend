{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Authenticator } from './Authenticator.js';\n\nclass VerificationCodeAuthenticator extends Authenticator {\n  canVerify(values) {\n    return !!(values.credentials || values.verificationCode || values.otp);\n  }\n\n  mapCredentials(values) {\n    const {\n      credentials,\n      verificationCode,\n      otp\n    } = values;\n\n    if (!credentials && !verificationCode && !otp) {\n      return;\n    }\n\n    return credentials || {\n      passcode: verificationCode || otp\n    };\n  }\n\n  getInputs(idxRemediationValue) {\n    var _a;\n\n    return Object.assign(Object.assign({}, (_a = idxRemediationValue.form) === null || _a === void 0 ? void 0 : _a.value[0]), {\n      name: 'verificationCode',\n      type: 'string',\n      required: idxRemediationValue.required\n    });\n  }\n\n}\n\nexport { VerificationCodeAuthenticator };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAeM,MAAOA,6BAAP,SAA6CC,aAA7C,CAAkF;EACtFC,SAAS,CAACC,MAAD,EAA+B;IACtC,OAAO,CAAC,EAAEA,MAAM,CAACC,WAAP,IAAqBD,MAAM,CAACE,gBAA5B,IAAgDF,MAAM,CAACG,GAAzD,CAAR;EACD;;EAEDC,cAAc,CAACJ,MAAD,EAAO;IACnB,MAAM;MAAEC,WAAF;MAAeC,gBAAf;MAAiCC;IAAjC,IAAyCH,MAA/C;;IACA,IAAI,CAACC,WAAD,IAAgB,CAACC,gBAAjB,IAAqC,CAACC,GAA1C,EAA+C;MAC7C;IACD;;IACD,OAAOF,WAAW,IAAI;MAAEI,QAAQ,EAAEH,gBAAgB,IAAIC;IAAhC,CAAtB;EACD;;EAEDG,SAAS,CAACC,mBAAD,EAAoB;;;IAC3B,OACKC,yDAAmB,CAACC,IAApB,MAAwB,IAAxB,IAAwBC,aAAxB,GAAwB,MAAxB,GAAwBA,GAAEC,KAAF,CAAQ,CAAR,CAAxB,GACH;MAAAC,IAAI,EAAE,kBAAN;MACAC,IAAI,EAAE,QADN;MAEAC,QAAQ,EAAEP,mBAAmB,CAACO;IAF9B,CADG,CADL;EAMD;;AApBqF","names":["VerificationCodeAuthenticator","Authenticator","canVerify","values","credentials","verificationCode","otp","mapCredentials","passcode","getInputs","idxRemediationValue","Object","form","_a","value","name","type","required"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\authenticator\\VerificationCodeAuthenticator.ts"],"sourcesContent":["import { Authenticator, Credentials } from './Authenticator';\n\nexport interface VerificationCodeValues {\n  verificationCode?: string;\n  otp?: string;\n  credentials?: Credentials;\n}\n\ninterface VerificationCodeCredentials extends Credentials {\n  passcode: string;\n}\n\n// general authenticator to handle \"verificationCode\" input\n// it can be used for \"email\", \"phone\", \"google authenticator\"\n// a new authenticator class should be created if special cases need to be handled\nexport class VerificationCodeAuthenticator extends Authenticator<VerificationCodeValues> {\n  canVerify(values: VerificationCodeValues) {\n    return !!(values.credentials ||values.verificationCode || values.otp);\n  }\n\n  mapCredentials(values): VerificationCodeCredentials | Credentials | undefined {\n    const { credentials, verificationCode, otp } = values;\n    if (!credentials && !verificationCode && !otp) {\n      return;\n    }\n    return credentials || { passcode: verificationCode || otp };\n  }\n\n  getInputs(idxRemediationValue) {\n    return {\n      ...idxRemediationValue.form?.value[0],\n      name: 'verificationCode',\n      type: 'string',\n      required: idxRemediationValue.required\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}