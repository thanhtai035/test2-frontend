{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nconst isFieldMutable = function isFieldMutable(field) {\n  return field.mutable !== false;\n};\n\nconst divideSingleActionParamsByMutability = function divideSingleActionParamsByMutability(action) {\n  var _a, _b;\n\n  const defaultParamsForAction = {};\n  const neededParamsForAction = [];\n  const immutableParamsForAction = {};\n\n  if (!action.value) {\n    neededParamsForAction.push(action);\n    return {\n      defaultParamsForAction,\n      neededParamsForAction,\n      immutableParamsForAction\n    };\n  }\n\n  for (let field of action.value) {\n    if (isFieldMutable(field)) {\n      neededParamsForAction.push(field);\n\n      if ((_a = field.value) !== null && _a !== void 0 ? _a : false) {\n        defaultParamsForAction[field.name] = field.value;\n      }\n    } else {\n      immutableParamsForAction[field.name] = (_b = field.value) !== null && _b !== void 0 ? _b : '';\n    }\n  }\n\n  return {\n    defaultParamsForAction,\n    neededParamsForAction,\n    immutableParamsForAction\n  };\n};\n\nconst divideActionParamsByMutability = function divideActionParamsByMutability(actionList) {\n  actionList = Array.isArray(actionList) ? actionList : [actionList];\n  const neededParams = [];\n  const defaultParams = {};\n  const immutableParams = {};\n\n  for (let action of actionList) {\n    const {\n      defaultParamsForAction,\n      neededParamsForAction,\n      immutableParamsForAction\n    } = divideSingleActionParamsByMutability(action);\n    neededParams.push(neededParamsForAction);\n    defaultParams[action.name] = defaultParamsForAction;\n    immutableParams[action.name] = immutableParamsForAction;\n  }\n\n  return {\n    defaultParams,\n    neededParams,\n    immutableParams\n  };\n};\n\nexport { divideActionParamsByMutability };","map":{"version":3,"mappings":";;;;;;;;;;;AAcA,MAAMA,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA6B;EAElD,OAASA,KAAK,CAACC,OAAN,KAAkB,KAA3B;AACD,CAHD;;AAKA,MAAMC,oCAAoC,GAAG,SAASA,oCAAT,CAA+CC,MAA/C,EAAqD;;;EAChG,MAAMC,sBAAsB,GAAG,EAA/B;EACA,MAAMC,qBAAqB,GAAG,EAA9B;EACA,MAAMC,wBAAwB,GAAG,EAAjC;;EAIA,IAAI,CAACH,MAAM,CAACI,KAAZ,EAAmB;IACjBF,qBAAqB,CAACG,IAAtB,CAA2BL,MAA3B;IACA,OAAO;MAAEC,sBAAF;MAA0BC,qBAA1B;MAAiDC;IAAjD,CAAP;EACD;;EAED,KAAM,IAAIN,KAAV,IAAmBG,MAAM,CAACI,KAA1B,EAAkC;IAEhC,IAAKR,cAAc,CAAEC,KAAF,CAAnB,EAA+B;MAE7BK,qBAAqB,CAACG,IAAtB,CAA2BR,KAA3B;;MAEA,IAAK,WAAK,CAACO,KAAN,MAAW,IAAX,IAAWE,aAAX,GAAWA,EAAX,GAAe,KAApB,EAA4B;QAC1BL,sBAAsB,CAACJ,KAAK,CAACU,IAAP,CAAtB,GAAqCV,KAAK,CAACO,KAA3C;MACD;IAEF,CARD,MAQO;MACLD,wBAAwB,CAACN,KAAK,CAACU,IAAP,CAAxB,GAAuC,WAAK,CAACH,KAAN,MAAe,IAAf,IAAeI,aAAf,GAAeA,EAAf,GAAe,EAAtD;IACD;EACF;;EACD,OAAO;IAAEP,sBAAF;IAA0BC,qBAA1B;IAAiDC;EAAjD,CAAP;AACD,CA3BD;;AA6Ba,oCAA8B,GAAG,SAASM,8BAAT,CAAyCC,UAAzC,EAAmD;EAE/FA,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAcF,UAAd,IAA4BA,UAA5B,GAAyC,CAAEA,UAAF,CAAtD;EACA,MAAMG,YAAY,GAAG,EAArB;EACA,MAAMC,aAAa,GAAG,EAAtB;EACA,MAAMC,eAAe,GAAG,EAAxB;;EAEA,KAAM,IAAIf,MAAV,IAAoBU,UAApB,EAAiC;IAC/B,MAAM;MACJT,sBADI;MAEJC,qBAFI;MAGJC;IAHI,IAIFJ,oCAAoC,CAACC,MAAD,CAJxC;IAKAa,YAAY,CAACR,IAAb,CAAkBH,qBAAlB;IACAY,aAAa,CAACd,MAAM,CAACO,IAAR,CAAb,GAA6BN,sBAA7B;IACAc,eAAe,CAACf,MAAM,CAACO,IAAR,CAAf,GAA+BJ,wBAA/B;EACD;;EAED,OAAO;IAAEW,aAAF;IAAiBD,YAAjB;IAA+BE;EAA/B,CAAP;AACF,CAnBa","names":["isFieldMutable","field","mutable","divideSingleActionParamsByMutability","action","defaultParamsForAction","neededParamsForAction","immutableParamsForAction","value","push","_a","name","_b","divideActionParamsByMutability","actionList","Array","isArray","neededParams","defaultParams","immutableParams"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\idxState\\v1\\actionParser.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nconst isFieldMutable = function isFieldMutable(field) {\n  // mutable defaults to true, annoyingly\n  return ( field.mutable !== false );\n};\n\nconst divideSingleActionParamsByMutability = function divideSingleActionParamsByMutability( action ) {\n  const defaultParamsForAction = {}; // mutable and present\n  const neededParamsForAction = []; // mutable values\n  const immutableParamsForAction = {}; // immutable\n  // TODO: remove assumption that form names are unique, neededParams being an array is a temp fix\n  // not all actions have value (e.g. redirect)\n  // making sure they are not empty and instead hold the remediation object\n  if (!action.value) {\n    neededParamsForAction.push(action);\n    return { defaultParamsForAction, neededParamsForAction, immutableParamsForAction };\n  }\n\n  for ( let field of action.value ) {\n\n    if ( isFieldMutable( field ) ) {\n\n      neededParamsForAction.push(field);\n\n      if ( field.value ?? false ) {\n        defaultParamsForAction[field.name] = field.value;\n      }\n\n    } else {\n      immutableParamsForAction[field.name] = field.value ?? '';\n    }\n  }\n  return { defaultParamsForAction, neededParamsForAction, immutableParamsForAction };\n};\n\nexport const divideActionParamsByMutability = function divideActionParamsByMutability( actionList ) {\n  // TODO: when removing form name is unique assumption, this may all be redundant\n  actionList = Array.isArray(actionList) ? actionList : [ actionList ];\n  const neededParams = [];\n  const defaultParams = {};\n  const immutableParams = {};\n\n  for ( let action of actionList ) {\n    const { \n      defaultParamsForAction, \n      neededParamsForAction, \n      immutableParamsForAction \n    } = divideSingleActionParamsByMutability(action);\n    neededParams.push(neededParamsForAction);\n    defaultParams[action.name] = defaultParamsForAction;\n    immutableParams[action.name] = immutableParamsForAction;\n  }\n\n  return { defaultParams, neededParams, immutableParams };\n};\n\n"]},"metadata":{},"sourceType":"module"}