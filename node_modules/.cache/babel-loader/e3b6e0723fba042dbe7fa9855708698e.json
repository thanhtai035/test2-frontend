{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { warn } from '../util/console.js';\nimport { removeNils } from '../util/object.js';\nimport { createOAuthMeta } from '../oidc/util/oauthMeta.js';\nimport './types/api.js';\nimport '../myaccount/types.js';\n\nasync function createTransactionMeta(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const tokenParams = await authClient.token.prepareTokenParams(options);\n  const pkceMeta = createOAuthMeta(authClient, tokenParams);\n  let {\n    flow = 'default',\n    withCredentials = true,\n    activationToken = undefined,\n    recoveryToken = undefined,\n    maxAge = undefined\n  } = Object.assign(Object.assign({}, authClient.options), options);\n  const meta = Object.assign(Object.assign({}, pkceMeta), {\n    flow,\n    withCredentials,\n    activationToken,\n    recoveryToken,\n    maxAge\n  });\n  return meta;\n}\n\nfunction hasSavedInteractionHandle(authClient, options) {\n  const savedMeta = getSavedTransactionMeta(authClient, options);\n\n  if (savedMeta === null || savedMeta === void 0 ? void 0 : savedMeta.interactionHandle) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getSavedTransactionMeta(authClient, options) {\n  options = removeNils(options);\n  options = Object.assign(Object.assign({}, authClient.options), options);\n  let savedMeta;\n\n  try {\n    savedMeta = authClient.transactionManager.load(options);\n  } catch (e) {}\n\n  if (!savedMeta) {\n    return;\n  }\n\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n\n  warn('Saved transaction meta does not match the current configuration. ' + 'This may indicate that two apps are sharing a storage key.');\n}\n\nasync function getTransactionMeta(authClient, options) {\n  options = removeNils(options);\n  options = Object.assign(Object.assign({}, authClient.options), options);\n  const validExistingMeta = getSavedTransactionMeta(authClient, options);\n\n  if (validExistingMeta) {\n    return validExistingMeta;\n  }\n\n  return createTransactionMeta(authClient, options);\n}\n\nfunction saveTransactionMeta(authClient, meta) {\n  authClient.transactionManager.save(meta, {\n    muteWarning: true\n  });\n}\n\nfunction clearTransactionMeta(authClient) {\n  authClient.transactionManager.clear();\n}\n\nfunction isTransactionMetaValid(meta) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const keys = ['issuer', 'clientId', 'redirectUri', 'state', 'codeChallenge', 'codeChallengeMethod', 'activationToken', 'recoveryToken'];\n\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n\n  const {\n    flow\n  } = options;\n\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isTransactionMetaValidForFlow(meta, flow) {\n  const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isTransactionMetaValidForOptions(meta, options, keys) {\n  const mismatch = keys.some(key => {\n    const value = options[key];\n\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\n\nexport { clearTransactionMeta, createTransactionMeta, getSavedTransactionMeta, getTransactionMeta, hasSavedInteractionHandle, isTransactionMetaValid, isTransactionMetaValidForFlow, isTransactionMetaValidForOptions, saveTransactionMeta };","map":{"version":3,"mappings":"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","names":["createTransactionMeta","authClient","options","tokenParams","token","prepareTokenParams","pkceMeta","createOAuthMeta","flow","withCredentials","activationToken","undefined","recoveryToken","maxAge","Object","meta","savedMeta","getSavedTransactionMeta","interactionHandle","removeNils","transactionManager","load","e","isTransactionMetaValid","warn","getTransactionMeta","validExistingMeta","save","muteWarning","clearTransactionMeta","clear","keys","isTransactionMetaValidForOptions","isTransactionMetaValidForFlow","shouldValidateFlow","mismatch","some","key","value"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\transactionMeta.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { OktaAuthIdxInterface, IdxTransactionMeta, TransactionMetaOptions, PKCETransactionMeta } from '../types';\nimport { removeNils, warn } from '../util';\nimport { createOAuthMeta } from '../oidc';\n\n// Calculate new values\nexport async function createTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options: TransactionMetaOptions = {}\n): Promise<IdxTransactionMeta> {\n  const tokenParams = await authClient.token.prepareTokenParams(options);\n  const pkceMeta = createOAuthMeta(authClient, tokenParams) as PKCETransactionMeta;\n  let {\n    flow = 'default',\n    withCredentials = true,\n    activationToken = undefined,\n    recoveryToken = undefined,\n    maxAge = undefined,\n  } = { ...authClient.options, ...options }; // local options override SDK options\n\n  const meta: IdxTransactionMeta = {\n    ...pkceMeta,\n    flow,\n    withCredentials,\n    activationToken,\n    recoveryToken,\n    maxAge\n  };\n  return meta;\n}\n\nexport function hasSavedInteractionHandle(authClient: OktaAuthIdxInterface, options?: TransactionMetaOptions): boolean {\n  const savedMeta = getSavedTransactionMeta(authClient, options);\n  if (savedMeta?.interactionHandle) {\n    return true;\n  }\n  return false;\n}\n\n// Returns the saved transaction meta, if it exists and is valid\nexport function getSavedTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options?: TransactionMetaOptions\n): IdxTransactionMeta | undefined {\n  options = removeNils(options);\n  options = { ...authClient.options, ...options }; // local options override SDK options\n  let savedMeta;\n  try {\n    savedMeta = authClient.transactionManager.load(options) as IdxTransactionMeta;\n  } catch (e) {\n    // ignore errors here\n  }\n\n  if (!savedMeta) {\n    return;\n  }\n\n  if (isTransactionMetaValid(savedMeta, options)) {\n    return savedMeta;\n  }\n\n  // existing meta is not valid for this configuration\n  // this is common when changing configuration in local development environment\n  // in a production environment, this may indicate that two apps are sharing a storage key\n  warn('Saved transaction meta does not match the current configuration. ' + \n    'This may indicate that two apps are sharing a storage key.');\n\n}\n\nexport async function getTransactionMeta(\n  authClient: OktaAuthIdxInterface,\n  options?: TransactionMetaOptions\n): Promise<IdxTransactionMeta> {\n  options = removeNils(options);\n  options = { ...authClient.options, ...options }; // local options override SDK options\n  // Load existing transaction meta from storage\n  const validExistingMeta = getSavedTransactionMeta(authClient, options);\n  if (validExistingMeta) {\n    return validExistingMeta;\n  }\n  // No existing? Create new transaction meta.\n  return createTransactionMeta(authClient, options);\n}\n\nexport function saveTransactionMeta (authClient: OktaAuthIdxInterface, meta): void {\n  authClient.transactionManager.save(meta, { muteWarning: true });\n}\n\nexport function clearTransactionMeta (authClient: OktaAuthIdxInterface): void {\n  authClient.transactionManager.clear();\n}\n\nexport function isTransactionMetaValid (meta, options: TransactionMetaOptions  = {}): boolean {\n  // Validate against certain options. If these exist in options, they must match in meta\n  const keys = [\n    'issuer',\n    'clientId',\n    'redirectUri',\n    'state',\n    'codeChallenge',\n    'codeChallengeMethod',\n    'activationToken',\n    'recoveryToken'\n  ];\n  if (isTransactionMetaValidForOptions(meta, options, keys) === false) {\n    return false;\n  }\n\n  // Validate configured flow\n  const { flow } = options;\n  if (isTransactionMetaValidForFlow(meta, flow) === false) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function isTransactionMetaValidForFlow(meta, flow) {\n  // Specific flows should not share transaction data\n  const shouldValidateFlow = flow && flow !== 'default' && flow !== 'proceed';\n  if (shouldValidateFlow) {\n    if (flow !== meta.flow) {\n      // The flow has changed; abandon the old transaction\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isTransactionMetaValidForOptions(meta, options, keys) {\n  // returns false if values in meta do not match options\n  // if the option does not have a value for a specific key, it is ignored\n  const mismatch = keys.some(key => {\n    const value = options[key];\n    if (value && value !== meta[key]) {\n      return true;\n    }\n  });\n  return !mismatch;\n}\n"]},"metadata":{},"sourceType":"module"}