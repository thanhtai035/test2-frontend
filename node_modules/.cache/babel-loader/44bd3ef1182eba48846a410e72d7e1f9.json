{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport CustomError from '../errors/CustomError.js';\nimport { urlParamsToObject } from '../oidc/util/urlParams.js';\n\nclass EmailVerifyCallbackError extends CustomError {\n  constructor(state, otp) {\n    super(`Enter the OTP code in the originating client: ${otp}`);\n    this.name = 'EmailVerifyCallbackError';\n    this.state = state;\n    this.otp = otp;\n  }\n\n}\n\nfunction isEmailVerifyCallbackError(error) {\n  return error.name === 'EmailVerifyCallbackError';\n}\n\nfunction isEmailVerifyCallback(urlPath) {\n  return /(otp=)/i.test(urlPath) && /(state=)/i.test(urlPath);\n}\n\nfunction parseEmailVerifyCallback(urlPath) {\n  return urlParamsToObject(urlPath);\n}\n\nasync function handleEmailVerifyCallback(authClient, search) {\n  if (isEmailVerifyCallback(search)) {\n    const {\n      state,\n      otp\n    } = parseEmailVerifyCallback(search);\n\n    if (authClient.idx.canProceed({\n      state\n    })) {\n      return await authClient.idx.proceed({\n        state,\n        otp\n      });\n    } else {\n      throw new EmailVerifyCallbackError(state, otp);\n    }\n  }\n}\n\nexport { EmailVerifyCallbackError, handleEmailVerifyCallback, isEmailVerifyCallback, isEmailVerifyCallbackError, parseEmailVerifyCallback };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAuBM,MAAOA,wBAAP,SAAwCC,WAAxC,CAAmD;EAIvDC,WAAY,QAAeC,GAAf,EAA0B;IACpC,MAAM,iDAAiDA,GAAG,EAA1D;IACA,KAAKC,IAAL,GAAY,0BAAZ;IACA,KAAKC,KAAL,GAAaA,KAAb;IACA,KAAKF,GAAL,GAAWA,GAAX;EACD;;AATsD;;AAYnD,SAAUG,0BAAV,CAAqCC,KAArC,EAAiD;EACrD,OAAQA,KAAK,CAACH,IAAN,KAAe,0BAAvB;AACD;;AAGK,SAAUI,qBAAV,CAAiCC,OAAjC,EAAgD;EACpD,OAAO,UAAUC,IAAV,CAAeD,OAAf,KAA2B,YAAYC,IAAZ,CAAiBD,OAAjB,CAAlC;AACD;;AAGK,SAAUE,wBAAV,CAAmCF,OAAnC,EAAkD;EACtD,OAAOG,iBAAiB,CAACH,OAAD,CAAxB;AACD;;AAEM,eAAeI,yBAAf,CAAyCC,UAAzC,EAA2EC,MAA3E,EAAyF;EAC9F,IAAIP,qBAAqB,CAACO,MAAD,CAAzB,EAAmC;IACjC,MAAM;MAAEV,KAAF;MAASF;IAAT,IAAiBQ,wBAAwB,CAACI,MAAD,CAA/C;;IACA,IAAID,UAAU,CAACE,GAAX,CAAeC,UAAf,CAA0B;MAAEZ;IAAF,CAA1B,CAAJ,EAA0C;MAExC,OAAO,MAAMS,UAAU,CAACE,GAAX,CAAeE,OAAf,CAAuB;QAAEb,KAAF;QAASF;MAAT,CAAvB,CAAb;IACD,CAHD,MAGO;MAEL,MAAM,IAAIH,wBAAJ,CAA6BK,KAA7B,EAAoCF,GAApC,CAAN;IACD;EACF;AACH","names":["EmailVerifyCallbackError","CustomError","constructor","otp","name","state","isEmailVerifyCallbackError","error","isEmailVerifyCallback","urlPath","test","parseEmailVerifyCallback","urlParamsToObject","handleEmailVerifyCallback","authClient","search","idx","canProceed","proceed"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\emailVerify.ts"],"sourcesContent":["\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { OktaAuthIdxInterface } from '../types';\n\nimport CustomError from '../errors/CustomError';\nimport { urlParamsToObject  } from '../oidc/util/urlParams';\n\nexport interface EmailVerifyCallbackResponse {\n  state: string;\n  otp: string;\n}\n\nexport class EmailVerifyCallbackError extends CustomError {\n  state: string;\n  otp: string;\n\n  constructor(state: string, otp: string) {\n    super(`Enter the OTP code in the originating client: ${otp}`);\n    this.name = 'EmailVerifyCallbackError';\n    this.state = state;\n    this.otp = otp;\n  }\n}\n\nexport function isEmailVerifyCallbackError(error: Error) {\n  return (error.name === 'EmailVerifyCallbackError');\n}\n\n// Check if state && otp have been passed back in the url\nexport function isEmailVerifyCallback (urlPath: string): boolean {\n  return /(otp=)/i.test(urlPath) && /(state=)/i.test(urlPath);\n}\n\n// Parse state and otp from a urlPath (should be either a search or fragment from the URL)\nexport function parseEmailVerifyCallback(urlPath: string): EmailVerifyCallbackResponse {\n  return urlParamsToObject(urlPath) as EmailVerifyCallbackResponse;\n}\n\nexport async function handleEmailVerifyCallback(authClient: OktaAuthIdxInterface, search: string) {\n  if (isEmailVerifyCallback(search)) {\n    const { state, otp } = parseEmailVerifyCallback(search);\n    if (authClient.idx.canProceed({ state })) {\n      // same browser / device\n      return await authClient.idx.proceed({ state, otp });\n    } else {\n      // different browser or device\n      throw new EmailVerifyCallbackError(state, otp);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}