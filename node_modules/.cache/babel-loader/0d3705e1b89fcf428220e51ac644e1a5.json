{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\n\nfunction canProceed(authClient) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\n\nfunction proceed(_x) {\n  return _proceed.apply(this, arguments);\n}\n\nfunction _proceed() {\n  _proceed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n        flow,\n        state,\n        meta,\n        _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n            if (canProceed(authClient, options)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n\n          case 3:\n            flow = options.flow, state = options.state;\n\n            if (!flow) {\n              meta = getSavedTransactionMeta(authClient, {\n                state: state\n              });\n              flow = meta === null || meta === void 0 ? void 0 : meta.flow;\n            }\n\n            return _context.abrupt(\"return\", run(authClient, Object.assign(Object.assign({}, options), {\n              flow: flow\n            })));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _proceed.apply(this, arguments);\n}\n\nexport { canProceed, proceed };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;SAsBgBA,WAAWC,YAA8D;EAAA,IAA5BC,OAA4B,uEAAF,EAAE;EACvF,IAAMC,IAAI,GAAGC,uBAAuB,CAACH,UAAD,EAAaC,OAAb,CAApC;EACA,OAAO,CAAC,EAAEC,IAAI,IAAID,OAAO,CAACG,WAAlB,CAAR;AACD;;SAEqBC,O;;;;;wEAAf,iBACLL,UADK;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAELC,OAFK,2DAEqB,EAFrB;;YAAA,IAKAF,UAAU,CAACC,UAAD,EAAaC,OAAb,CALV;cAAA;cAAA;YAAA;;YAAA,MAMG,IAAIK,YAAJ,CAAiB,0DAAjB,CANH;;UAAA;YASCC,IATD,GASiBN,OATjB,CASCM,IATD,EASOC,KATP,GASiBP,OATjB,CASOO,KATP;;YAUL,IAAI,CAACD,IAAL,EAAW;cACHL,IADG,GACIC,uBAAuB,CAACH,UAAD,EAAa;gBAAEQ,KAAK,EAALA;cAAF,CAAb,CAD3B;cAETD,IAAI,GAAGL,IAAI,KAAJ,YAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEK,IAAb;YACD;;YAbI,iCAeEE,GAAG,CAACT,UAAD,EAAWU,gCAChBT,OADgB,GAEnB;cAAAM,IAAI,EAAJA;YAAA,CAFmB,CAAX,CAfL;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["canProceed","authClient","options","meta","getSavedTransactionMeta","stateHandle","proceed","AuthSdkError","flow","state","run","Object"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\proceed.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { \n  OktaAuthIdxInterface,\n  IdxTransaction,\n  ProceedOptions,\n} from '../types';\nimport { run } from './run';\nimport { getSavedTransactionMeta } from './transactionMeta';\nimport { AuthSdkError } from '../errors';\n\nexport function canProceed(authClient: OktaAuthIdxInterface, options: ProceedOptions = {}): boolean {\n  const meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\n\nexport async function proceed(\n  authClient: OktaAuthIdxInterface,\n  options: ProceedOptions = {}\n): Promise<IdxTransaction> {\n\n  if (!canProceed(authClient, options)) {\n    throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n  }\n\n  let { flow, state } = options;\n  if (!flow) {\n    const meta = getSavedTransactionMeta(authClient, { state });\n    flow = meta?.flow;\n  }\n\n  return run(authClient, { \n    ...options, \n    flow\n  });\n}\n"]},"metadata":{},"sourceType":"module"}