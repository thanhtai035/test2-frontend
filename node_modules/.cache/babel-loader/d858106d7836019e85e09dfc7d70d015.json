{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { SelectAuthenticator } from './Base/SelectAuthenticator.js';\n\nclass SelectAuthenticatorUnlockAccount extends SelectAuthenticator {\n  constructor() {\n    super(...arguments);\n    this.map = {\n      identifier: ['username']\n    };\n  }\n\n  canRemediate() {\n    const identifier = this.getData('identifier');\n    return !!identifier && super.canRemediate();\n  }\n\n  mapAuthenticator(remediationValue) {\n    var _a, _b, _c;\n\n    const authenticatorMap = super.mapAuthenticator(remediationValue);\n    const methodTypeOption = (_a = this.selectedOption) === null || _a === void 0 ? void 0 : _a.value.form.value.find(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'methodType';\n    });\n    const methodTypeValue = this.values.methodType || (methodTypeOption === null || methodTypeOption === void 0 ? void 0 : methodTypeOption.value) || ((_c = (_b = methodTypeOption === null || methodTypeOption === void 0 ? void 0 : methodTypeOption.options) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.value);\n\n    if (methodTypeValue) {\n      return Object.assign(Object.assign({}, authenticatorMap), {\n        methodType: methodTypeValue\n      });\n    }\n\n    return authenticatorMap;\n  }\n\n  getInputUsername() {\n    return {\n      name: 'username',\n      type: 'string'\n    };\n  }\n\n}\n\nSelectAuthenticatorUnlockAccount.remediationName = 'select-authenticator-unlock-account';\nexport { SelectAuthenticatorUnlockAccount };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAuBM,MAAOA,gCAAP,SAAgDC,mBAAhD,CAA2G;EAAjHC;;IAIE,WAAM;MACJC,UAAU,EAAE,CAAC,UAAD;IADR,CAAN;EAiCD;;EA7BCC,YAAY;IACV,MAAMD,UAAU,GAAG,KAAKE,OAAL,CAAa,YAAb,CAAnB;IACA,OAAO,CAAC,CAACF,UAAF,IAAgB,MAAMC,YAAN,EAAvB;EACD;;EAEDE,gBAAgB,CAACC,gBAAD,EAAsC;;;IACpD,MAAMC,gBAAgB,GAAG,MAAMF,gBAAN,CAAuBC,gBAAvB,CAAzB;IACA,MAAME,gBAAgB,GAAG,WAAKC,cAAL,MAAmB,IAAnB,IAAmBC,aAAnB,GAAmB,MAAnB,GAAmBA,GAAEC,KAAF,CAAQC,IAAR,CAAaD,KAAb,CAAmBE,IAAnB,CAAwB;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAcA,IAAI,KAAK,YAAvB;IAAA,CAAxB,CAA5C;IAKA,MAAMC,eAAe,GAAG,KAAKC,MAAL,CAAYC,UAAZ,KACtBT,gBAAgB,SAAhB,oBAAgB,KAAhB,kCAAgB,CAAEG,KADI,MACe,4BAAgB,SAAhB,oBAAgB,WAAhB,GAAgB,MAAhB,mBAAgB,CAAEO,OAAlB,MAAyB,IAAzB,IAAyBC,aAAzB,GAAyB,MAAzB,GAAyBA,GAAG,CAAH,CAAzB,MAA8B,IAA9B,IAA8BC,aAA9B,GAA8B,MAA9B,GAA8BA,GAAET,KAD/C,CAAxB;;IAGA,IAAII,eAAJ,EAAqB;MACnB,uCACKR,gBADL,GACqB;QACnBU,UAAU,EAAEF;MADO,CADrB;IAID;;IAED,OAAOR,gBAAP;EACD;;EAEDc,gBAAgB;IACd,OAAO;MAAEP,IAAI,EAAE,UAAR;MAAoBQ,IAAI,EAAE;IAA1B,CAAP;EACD;;AAnC8G;;AACxGvB,gCAAe,gBAAf,GAAkB,qCAAlB","names":["SelectAuthenticatorUnlockAccount","SelectAuthenticator","constructor","identifier","canRemediate","getData","mapAuthenticator","remediationValue","authenticatorMap","methodTypeOption","selectedOption","_a","value","form","find","name","methodTypeValue","values","methodType","options","_b","_c","getInputUsername","type"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\remediators\\SelectAuthenticatorUnlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { Authenticator } from '../../types';\nimport { IdxRemediationValue } from '../types/idx-js';\n\n\nexport type SelectAuthenticatorUnlockAccountValues = SelectAuthenticatorValues & {\n  identifier?: string;\n  methodType?: string;\n};\n\nexport class SelectAuthenticatorUnlockAccount extends SelectAuthenticator<SelectAuthenticatorUnlockAccountValues> {\n  static remediationName = 'select-authenticator-unlock-account';\n  authenticator?: Authenticator;\n\n  map = {\n    identifier: ['username']\n  };\n\n  canRemediate() {\n    const identifier = this.getData('identifier');\n    return !!identifier && super.canRemediate();\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const authenticatorMap = super.mapAuthenticator(remediationValue);\n    const methodTypeOption = this.selectedOption?.value.form.value.find(({ name }) => name === 'methodType');\n\n    // defaults to 'manually defined' value\n    // 2nd: option may have pre-defined value, like stateHandle\n    // 3rd: if only a single OV option is available, default to that option\n    const methodTypeValue = this.values.methodType ||\n      methodTypeOption?.value as string || methodTypeOption?.options?.[0]?.value as string;\n\n    if (methodTypeValue) {\n      return {\n        ...authenticatorMap,\n        methodType: methodTypeValue\n      };\n    }\n\n    return authenticatorMap;\n  }\n\n  getInputUsername () {\n    return { name: 'username', type: 'string' };\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}