{"ast":null,"code":"import _defineProperty from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\n\nvar AuthenticatorVerificationData = /*#__PURE__*/function (_AuthenticatorData) {\n  _inherits(AuthenticatorVerificationData, _AuthenticatorData);\n\n  var _super = _createSuper(AuthenticatorVerificationData);\n\n  function AuthenticatorVerificationData(remediation) {\n    var _this;\n\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, AuthenticatorVerificationData);\n\n    _this = _super.call(this, remediation, values);\n    _this.shouldProceedWithEmailAuthenticator = options.shouldProceedWithEmailAuthenticator !== false && _this.authenticator.methods.length === 1 && _this.authenticator.methods[0].type === 'email';\n    return _this;\n  }\n\n  _createClass(AuthenticatorVerificationData, [{\n    key: \"canRemediate\",\n    value: function canRemediate() {\n      if (this.shouldProceedWithEmailAuthenticator !== false) {\n        return true;\n      }\n\n      return _get(_getPrototypeOf(AuthenticatorVerificationData.prototype), \"canRemediate\", this).call(this);\n    }\n  }, {\n    key: \"mapAuthenticator\",\n    value: function mapAuthenticator() {\n      var _a;\n\n      if (this.shouldProceedWithEmailAuthenticator !== false) {\n        var authenticatorFromRemediation = this.getAuthenticatorFromRemediation();\n        return (_a = authenticatorFromRemediation.form) === null || _a === void 0 ? void 0 : _a.value.reduce(function (acc, curr) {\n          if (curr.value) {\n            acc[curr.name] = curr.value;\n          } else if (curr.options) {\n            acc[curr.name] = curr.options[0].value;\n          } else {\n            throw new AuthSdkError(\"Unsupported authenticator data type: \".concat(curr));\n          }\n\n          return acc;\n        }, {});\n      }\n\n      return this.getAuthenticatorData();\n    }\n  }, {\n    key: \"getInputAuthenticator\",\n    value: function getInputAuthenticator() {\n      var authenticator = this.getAuthenticatorFromRemediation();\n      var methodType = authenticator.form.value.find(function (_ref) {\n        var name = _ref.name;\n        return name === 'methodType';\n      });\n\n      if (methodType && methodType.options) {\n        return {\n          name: 'methodType',\n          type: 'string',\n          required: true,\n          options: methodType.options\n        };\n      }\n\n      var inputs = _toConsumableArray(authenticator.form.value);\n\n      return inputs;\n    }\n  }, {\n    key: \"getValuesAfterProceed\",\n    value: function getValuesAfterProceed() {\n      var _this2 = this;\n\n      this.values = _get(_getPrototypeOf(AuthenticatorVerificationData.prototype), \"getValuesAfterProceed\", this).call(this);\n      var trimmedValues = Object.keys(this.values).filter(function (valueKey) {\n        return valueKey !== 'authenticator';\n      });\n      return trimmedValues.reduce(function (values, valueKey) {\n        return Object.assign(Object.assign({}, values), _defineProperty({}, valueKey, _this2.values[valueKey]));\n      }, {});\n    }\n  }]);\n\n  return AuthenticatorVerificationData;\n}(AuthenticatorData);\n\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\nexport { AuthenticatorVerificationData };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAoBaA,6B;;;;;EAKX,uCACEC,WADF,EAGgC;IAAA;;IAAA,IAD9BC,MAC8B,uEADI,EACJ;IAAA,IAA9BC,OAA8B,uEAAF,EAAE;;IAAA;;IAE9B,0BAAMF,WAAN,EAAmBC,MAAnB;IAGA,MAAKE,mCAAL,GAA2CD,OAAO,CAACC,mCAAR,KAAgD,KAAhD,IACtC,MAAKC,aAAL,CAAmBC,OAAnB,CAA2BC,MAA3B,KAAsC,CADA,IAEtC,MAAKF,aAAL,CAAmBC,OAAnB,CAA2B,CAA3B,EAA8BE,IAA9B,KAAuC,OAF5C;IAL8B;EAQ/B;;;;WAED,wBAAY;MAEV,IAAI,KAAKJ,mCAAL,KAA6C,KAAjD,EAAwD;QACtD,OAAO,IAAP;MACD;;MACD;IACD;;;WAED,4BAAgB;;;MAEd,IAAI,KAAKA,mCAAL,KAA6C,KAAjD,EAAwD;QACtD,IAAMK,4BAA4B,GAAG,KAAKC,+BAAL,EAArC;QACA,OAAO,kCAA4B,CAACC,IAA7B,MAAiC,IAAjC,IAAiCC,aAAjC,GAAiC,MAAjC,GAAiCA,GAAEC,KAAF,CAAQC,MAAR,CAAe,UAACC,GAAD,EAAMC,IAAN,EAAc;UACnE,IAAIA,IAAI,CAACH,KAAT,EAAgB;YACdE,GAAG,CAACC,IAAI,CAACC,IAAN,CAAH,GAAiBD,IAAI,CAACH,KAAtB;UACD,CAFD,MAEO,IAAIG,IAAI,CAACb,OAAT,EAAkB;YACvBY,GAAG,CAACC,IAAI,CAACC,IAAN,CAAH,GAAiBD,IAAI,CAACb,OAAL,CAAc,CAAd,EAAiBU,KAAlC;UACD,CAFM,MAEA;YACL,MAAM,IAAIK,YAAJ,gDAAyDF,IAAzD,EAAN;UACD;;UACD,OAAOD,GAAP;QACD,CATuC,EASrC,EATqC,CAAxC;MAUD;;MAED,OAAO,KAAKI,oBAAL,EAAP;IACD;;;WAED,iCAAqB;MACnB,IAAMd,aAAa,GAAG,KAAKK,+BAAL,EAAtB;MACA,IAAMU,UAAU,GAAGf,aAAa,CAACM,IAAd,CAAoBE,KAApB,CAA0BQ,IAA1B,CAA+B;QAAA,IAAGJ,IAAH,QAAGA,IAAH;QAAA,OAAcA,IAAI,KAAK,YAAvB;MAAA,CAA/B,CAAnB;;MAEA,IAAIG,UAAU,IAAIA,UAAU,CAACjB,OAA7B,EAAsC;QACpC,OAAO;UACLc,IAAI,EAAE,YADD;UAELT,IAAI,EAAE,QAFD;UAGLc,QAAQ,EAAE,IAHL;UAILnB,OAAO,EAAEiB,UAAU,CAACjB;QAJf,CAAP;MAMD;;MAED,IAAMoB,MAAM,sBAAOlB,aAAa,CAACM,IAAd,CAAoBE,KAA3B,CAAZ;;MACA,OAAOU,MAAP;IACD;;;WAED,iCAAqB;MAAA;;MACnB,KAAKrB,MAAL;MACA,IAAIsB,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKxB,MAAjB,EAAyByB,MAAzB,CAAgC,kBAAQ;QAAA,OAAIC,QAAQ,KAAK,eAAjB;MAAA,CAAxC,CAApB;MACA,OAAOJ,aAAa,CAACV,MAAd,CAAqB,UAACZ,MAAD,EAAS0B,QAAT;QAAA,OAAsBH,gCAAKvB,MAAL,uBAAc0B,QAAd,EAAyB,MAAI,CAAC1B,MAAL,CAAY0B,QAAZ,CAAzB,EAAtB;MAAA,CAArB,EAA6F,EAA7F,CAAP;IACD;;;;EAlEgDC,iB;;AAC1C7B,6BAAe,gBAAf,GAAkB,iCAAlB","names":["AuthenticatorVerificationData","remediation","values","options","shouldProceedWithEmailAuthenticator","authenticator","methods","length","type","authenticatorFromRemediation","getAuthenticatorFromRemediation","form","_a","value","reduce","acc","curr","name","AuthSdkError","getAuthenticatorData","methodType","find","required","inputs","trimmedValues","Object","keys","filter","valueKey","AuthenticatorData"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\remediators\\AuthenticatorVerificationData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthSdkError } from '../../errors';\nimport { AuthenticatorData, AuthenticatorDataValues } from './Base/AuthenticatorData';\nimport { IdxRemediation, RemediateOptions } from '../types';\n\nexport type AuthenticatorVerificationDataValues = AuthenticatorDataValues;\n\nexport class AuthenticatorVerificationData extends AuthenticatorData<AuthenticatorVerificationDataValues> {\n  static remediationName = 'authenticator-verification-data';\n\n  shouldProceedWithEmailAuthenticator: boolean; // will be removed in next major version\n\n  constructor(\n    remediation: IdxRemediation, \n    values: AuthenticatorDataValues = {}, \n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values);\n\n    // will be removed in next major version\n    this.shouldProceedWithEmailAuthenticator = options.shouldProceedWithEmailAuthenticator !== false\n      && this.authenticator.methods.length === 1 \n      && this.authenticator.methods[0].type === 'email';\n  }\n\n  canRemediate() {\n    // auto proceed if there is only one method (will be removed in next major version)\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      return true;\n    }\n    return super.canRemediate();\n  }\n\n  mapAuthenticator() {\n    // auto proceed with the only methodType option\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      const authenticatorFromRemediation = this.getAuthenticatorFromRemediation();\n      return authenticatorFromRemediation.form?.value.reduce((acc, curr) => {\n        if (curr.value) {\n          acc[curr.name] = curr.value;\n        } else if (curr.options) {\n          acc[curr.name] = curr.options![0].value;\n        } else {\n          throw new AuthSdkError(`Unsupported authenticator data type: ${curr}`);\n        }\n        return acc;\n      }, {});\n    }\n\n    return this.getAuthenticatorData();\n  }\n\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form!.value.find(({ name }) => name === 'methodType');\n    // if has methodType in form, let user select the methodType\n    if (methodType && methodType.options) {\n      return { \n        name: 'methodType', \n        type: 'string', \n        required: true, \n        options: methodType.options \n      };\n    }\n    // no methodType, then return form values\n    const inputs = [...authenticator.form!.value];\n    return inputs;\n  }\n\n  getValuesAfterProceed(): AuthenticatorVerificationDataValues {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}