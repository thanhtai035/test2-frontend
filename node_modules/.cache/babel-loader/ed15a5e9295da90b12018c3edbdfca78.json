{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport { isSameRefreshToken } from './util/refreshToken.js';\nimport { handleOAuthResponse } from './handleOAuthResponse.js';\nimport { postRefreshToken } from './endpoints/token.js';\nimport { isRefreshTokenInvalidError } from './util/errors.js';\n\nfunction renewTokensWithRefresh(_x, _x2, _x3) {\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nfunction _renewTokensWithRefresh() {\n  _renewTokensWithRefresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, tokenParams, refreshTokenObject) {\n    var clientId, renewTokenParams, tokenResponse, urls, _yield$handleOAuthRes, tokens, refreshToken;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            clientId = sdk.options.clientId;\n\n            if (clientId) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n\n          case 3:\n            _context.prev = 3;\n            renewTokenParams = Object.assign({}, tokenParams, {\n              clientId: clientId\n            });\n            _context.next = 7;\n            return postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n\n          case 7:\n            tokenResponse = _context.sent;\n            urls = getOAuthUrls(sdk, tokenParams);\n            _context.next = 11;\n            return handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n\n          case 11:\n            _yield$handleOAuthRes = _context.sent;\n            tokens = _yield$handleOAuthRes.tokens;\n            refreshToken = tokens.refreshToken;\n\n            if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n              sdk.tokenManager.updateRefreshToken(refreshToken);\n            }\n\n            return _context.abrupt(\"return\", tokens);\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](3);\n\n            if (isRefreshTokenInvalidError(_context.t0)) {\n              sdk.tokenManager.removeRefreshToken();\n            }\n\n            throw _context.t0;\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 18]]);\n  }));\n  return _renewTokensWithRefresh.apply(this, arguments);\n}\n\nexport { renewTokensWithRefresh };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;SAoBsBA,sB;;;;;uFAAf,iBACLC,GADK,EAELC,WAFK,EAGLC,kBAHK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAKGC,QALH,GAKgBH,GAAG,CAACI,OALpB,CAKGD,QALH;;YAAA,IAMAA,QANA;cAAA;cAAA;YAAA;;YAAA,MAOG,IAAIE,YAAJ,CAAiB,0EAAjB,CAPH;;UAAA;YAAA;YAWGC,gBAXH,GAWmCC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,WAAlB,EAA+B;cACnEE,QAAQ,EAARA;YADmE,CAA/B,CAXnC;YAAA;YAAA,OAcyBM,gBAAgB,CAACT,GAAD,EAAMM,gBAAN,EAAwBJ,kBAAxB,CAdzC;;UAAA;YAcGQ,aAdH;YAeGC,IAfH,GAeUC,YAAY,CAACZ,GAAD,EAAMC,WAAN,CAftB;YAAA;YAAA,OAgBsBY,mBAAmB,CAACb,GAAD,EAAMM,gBAAN,EAAwBI,aAAxB,EAAuCC,IAAvC,CAhBzC;;UAAA;YAAA;YAgBKG,MAhBL,yBAgBKA,MAhBL;YAmBKC,YAnBL,GAmBsBD,MAnBtB,CAmBKC,YAnBL;;YAoBH,IAAIA,YAAY,IAAI,CAACC,kBAAkB,CAACD,YAAD,EAAeb,kBAAf,CAAvC,EAA2E;cACzEF,GAAG,CAACiB,YAAJ,CAAiBC,kBAAjB,CAAoCH,YAApC;YACD;;YAtBE,iCAwBID,MAxBJ;;UAAA;YAAA;YAAA;;YA2BH,IAAIK,0BAA0B,aAA9B,EAAqC;cAEnCnB,GAAG,CAACiB,YAAJ,CAAiBG,kBAAjB;YACD;;YA9BE;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["renewTokensWithRefresh","sdk","tokenParams","refreshTokenObject","clientId","options","AuthSdkError","renewTokenParams","Object","assign","postRefreshToken","tokenResponse","urls","getOAuthUrls","handleOAuthResponse","tokens","refreshToken","isSameRefreshToken","tokenManager","updateRefreshToken","isRefreshTokenInvalidError","removeRefreshToken"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\renewTokensWithRefresh.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { getOAuthUrls } from './util/oauth';\nimport { isSameRefreshToken } from './util/refreshToken';\nimport { OktaAuthOIDCInterface, TokenParams, RefreshToken, Tokens } from '../types';\nimport { handleOAuthResponse } from './handleOAuthResponse';\nimport { postRefreshToken } from './endpoints/token';\nimport { isRefreshTokenInvalidError } from './util/errors';\n\nexport async function renewTokensWithRefresh(\n  sdk: OktaAuthOIDCInterface,\n  tokenParams: TokenParams,\n  refreshTokenObject: RefreshToken\n): Promise<Tokens> {\n  const { clientId } = sdk.options;\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to renew tokens');\n  }\n\n  try {\n    const renewTokenParams: TokenParams = Object.assign({}, tokenParams, {\n      clientId,\n    });\n    const tokenResponse = await postRefreshToken(sdk, renewTokenParams, refreshTokenObject);\n    const urls = getOAuthUrls(sdk, tokenParams);\n    const { tokens } = await handleOAuthResponse(sdk, renewTokenParams, tokenResponse, urls);\n\n    // Support rotating refresh tokens\n    const { refreshToken } = tokens;\n    if (refreshToken && !isSameRefreshToken(refreshToken, refreshTokenObject)) {\n      sdk.tokenManager.updateRefreshToken(refreshToken);\n    }\n\n    return tokens;\n  }\n  catch (err) {\n    if (isRefreshTokenInvalidError(err)) {\n      // if the refresh token is invalid, remove it from storage\n      sdk.tokenManager.removeRefreshToken();\n    }\n    throw err;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}