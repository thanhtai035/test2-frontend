{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { AutoRenewService } from './services/AutoRenewService.js';\nimport { SyncStorageService } from './services/SyncStorageService.js';\nimport { LeaderElectionService } from './services/LeaderElectionService.js';\nimport { removeNils } from './util/object.js';\nconst AUTO_RENEW = 'autoRenew';\nconst SYNC_STORAGE = 'syncStorage';\nconst LEADER_ELECTION = 'leaderElection';\n\nclass ServiceManager {\n  constructor(sdk) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.sdk = sdk;\n    this.onLeader = this.onLeader.bind(this);\n    const {\n      autoRenew,\n      autoRemove,\n      syncStorage\n    } = sdk.tokenManager.getOptions();\n    options.electionChannelName = options.electionChannelName || options.broadcastChannelName;\n    this.options = Object.assign({}, ServiceManager.defaultOptions, {\n      autoRenew,\n      autoRemove,\n      syncStorage\n    }, {\n      electionChannelName: `${sdk.options.clientId}-election`,\n      syncChannelName: `${sdk.options.clientId}-sync`\n    }, removeNils(options));\n    this.started = false;\n    this.services = new Map();\n    ServiceManager.knownServices.forEach(name => {\n      const svc = this.createService(name);\n\n      if (svc) {\n        this.services.set(name, svc);\n      }\n    });\n  }\n\n  async onLeader() {\n    if (this.started) {\n      await this.startServices();\n    }\n  }\n\n  isLeader() {\n    var _a;\n\n    return (_a = this.getService(LEADER_ELECTION)) === null || _a === void 0 ? void 0 : _a.isLeader();\n  }\n\n  isLeaderRequired() {\n    return [...this.services.values()].some(srv => srv.canStart() && srv.requiresLeadership());\n  }\n\n  async start() {\n    if (this.started) {\n      return;\n    }\n\n    await this.startServices();\n    this.started = true;\n  }\n\n  async stop() {\n    await this.stopServices();\n    this.started = false;\n  }\n\n  getService(name) {\n    return this.services.get(name);\n  }\n\n  async startServices() {\n    for (const [name, srv] of this.services.entries()) {\n      if (this.canStartService(name, srv)) {\n        await srv.start();\n      }\n    }\n  }\n\n  async stopServices() {\n    for (const srv of this.services.values()) {\n      await srv.stop();\n    }\n  }\n\n  canStartService(name, srv) {\n    let canStart = srv.canStart() && !srv.isStarted();\n\n    if (name === LEADER_ELECTION) {\n      canStart && (canStart = this.isLeaderRequired());\n    } else if (srv.requiresLeadership()) {\n      canStart && (canStart = this.isLeader());\n    }\n\n    return canStart;\n  }\n\n  createService(name) {\n    const tokenManager = this.sdk.tokenManager;\n    let service;\n\n    switch (name) {\n      case LEADER_ELECTION:\n        service = new LeaderElectionService(Object.assign(Object.assign({}, this.options), {\n          onLeader: this.onLeader\n        }));\n        break;\n\n      case AUTO_RENEW:\n        service = new AutoRenewService(tokenManager, Object.assign({}, this.options));\n        break;\n\n      case SYNC_STORAGE:\n        service = new SyncStorageService(tokenManager, Object.assign({}, this.options));\n        break;\n\n      default:\n        throw new Error(`Unknown service ${name}`);\n    }\n\n    return service;\n  }\n\n}\n\nServiceManager.knownServices = [AUTO_RENEW, SYNC_STORAGE, LEADER_ELECTION];\nServiceManager.defaultOptions = {\n  autoRenew: true,\n  autoRemove: true,\n  syncStorage: true\n};\nexport { ServiceManager };","map":{"version":3,"mappings":"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","names":["AUTO_RENEW","SYNC_STORAGE","LEADER_ELECTION","ServiceManager","constructor","options","sdk","onLeader","bind","autoRenew","autoRemove","syncStorage","tokenManager","getOptions","electionChannelName","broadcastChannelName","Object","assign","defaultOptions","clientId","syncChannelName","removeNils","started","services","Map","knownServices","forEach","name","svc","createService","set","startServices","isLeader","getService","_a","isLeaderRequired","values","some","srv","canStart","requiresLeadership","start","stop","stopServices","get","entries","canStartService","isStarted","service","LeaderElectionService","AutoRenewService","SyncStorageService","Error"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\ServiceManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport {\n  ServiceManagerInterface,\n  ServiceInterface,\n  ServiceManagerOptions\n} from './types';\nimport { OktaAuth } from '.';\nimport { AutoRenewService, SyncStorageService, LeaderElectionService } from './services';\nimport { removeNils } from './util';\n\nconst AUTO_RENEW = 'autoRenew';\nconst SYNC_STORAGE = 'syncStorage';\nconst LEADER_ELECTION = 'leaderElection';\n\nexport class ServiceManager implements ServiceManagerInterface {\n  private sdk: OktaAuth;\n  private options: ServiceManagerOptions;\n  private services: Map<string, ServiceInterface>;\n  private started: boolean;\n\n  private static knownServices = [AUTO_RENEW, SYNC_STORAGE, LEADER_ELECTION];\n\n  private static defaultOptions = {\n    autoRenew: true,\n    autoRemove: true,\n    syncStorage: true\n  };\n\n  constructor(sdk: OktaAuth, options: ServiceManagerOptions = {}) {\n    this.sdk = sdk;\n    this.onLeader = this.onLeader.bind(this);\n\n    // TODO: backwards compatibility, remove in next major version - OKTA-473815\n    const { autoRenew, autoRemove, syncStorage } = sdk.tokenManager.getOptions();\n    options.electionChannelName = options.electionChannelName || options.broadcastChannelName;\n    this.options = Object.assign({}, \n      ServiceManager.defaultOptions,\n      { autoRenew, autoRemove, syncStorage }, \n      {\n        electionChannelName: `${sdk.options.clientId}-election`,\n        syncChannelName: `${sdk.options.clientId}-sync`,\n      },\n      removeNils(options)\n    );\n\n    this.started = false;\n    this.services = new Map();\n\n    ServiceManager.knownServices.forEach(name => {\n      const svc = this.createService(name);\n      if (svc) {\n        this.services.set(name, svc);\n      }\n    });\n  }\n\n  private async onLeader() {\n    if (this.started) {\n      // Start services that requires leadership\n      await this.startServices();\n    }\n  }\n\n  isLeader() {\n    return (this.getService(LEADER_ELECTION) as LeaderElectionService)?.isLeader();\n  }\n\n  isLeaderRequired() {\n    return [...this.services.values()].some(srv => srv.canStart() && srv.requiresLeadership());\n  }\n\n  async start() {\n    if (this.started) {\n      return;     // noop if services have already started\n    }\n    await this.startServices();\n    this.started = true;\n  }\n  \n  async stop() {\n    await this.stopServices();\n    this.started = false;\n  }\n\n  getService(name: string): ServiceInterface | undefined {\n    return this.services.get(name);\n  }\n\n  private async startServices() {\n    for (const [name, srv] of this.services.entries()) {\n      if (this.canStartService(name, srv)) {\n        await srv.start();\n      }\n    }\n  }\n\n  private async stopServices() {\n    for (const srv of this.services.values()) {\n      await srv.stop();\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  private canStartService(name: string, srv: ServiceInterface): boolean {\n    let canStart = srv.canStart() && !srv.isStarted();\n    // only start election if a leader is required\n    if (name === LEADER_ELECTION) {\n      canStart &&= this.isLeaderRequired();\n    } else if (srv.requiresLeadership()) {\n      canStart &&= this.isLeader();\n    }\n    return canStart;\n  }\n\n  private createService(name: string): ServiceInterface {\n    const tokenManager = this.sdk.tokenManager;\n\n    let service: ServiceInterface;\n    switch (name) {\n      case LEADER_ELECTION:\n        service = new LeaderElectionService({...this.options, onLeader: this.onLeader});\n        break;\n      case AUTO_RENEW:\n        service = new AutoRenewService(tokenManager, {...this.options});\n        break;\n      case SYNC_STORAGE:\n        service = new SyncStorageService(tokenManager, {...this.options});\n        break;\n      default:\n        throw new Error(`Unknown service ${name}`);\n    }\n    return service;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}