{"ast":null,"code":"/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode, PROMISE_RESOLVED_VOID } from '../util.js';\nexport var microSeconds = micro;\nimport { ObliviousSet } from 'oblivious-set';\nimport { fillOptionsWithDefaults } from '../options.js';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport var TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport function commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nexport function getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return PROMISE_RESOLVED_VOID;\n  });\n}\n\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  if (isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};","map":{"version":3,"names":["sleep","randomInt","randomToken","microSeconds","micro","isNode","PROMISE_RESOLVED_VOID","ObliviousSet","fillOptionsWithDefaults","DB_PREFIX","OBJECT_STORE_ID","TRANSACTION_SETTINGS","durability","type","getIdb","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","commitIndexedDBTransaction","tx","commit","createDatabase","channelName","IndexedDB","dbName","openRequest","open","onupgradeneeded","ev","db","target","result","createObjectStore","keyPath","autoIncrement","dbPromise","Promise","res","rej","onerror","onsuccess","writeMessage","readerUuid","messageJson","time","Date","getTime","writeObject","uuid","data","transaction","oncomplete","objectStore","add","getAllMessages","ret","openCursor","cursor","push","value","getMessagesHigherThan","lastCursorId","keyRangeValue","IDBKeyRange","bound","Infinity","getAll","getAllRequest","err","e","openCursorRequest","id","removeMessagesById","ids","all","map","deleteRequest","getOldMessages","ttl","olderThen","msgObk","cleanOldMessages","then","tooOld","msg","create","options","state","closed","eMIs","idb","writeBlockPromise","messagesCallback","readQueuePromises","onclose","_readLoop","readNewMessages","fallbackInterval","_filterMessage","msgObj","has","messagesCallbackTime","newerMessages","useMessages","filter","sort","msgObjA","msgObjB","forEach","close","channelState","postMessage","onMessage","fn","canBeUsed","averageResponseTime"],"sources":["C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/jobs-ui/node_modules/broadcast-channel/dist/esbrowser/methods/indexed-db.js"],"sourcesContent":["/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n * \n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */\nimport { sleep, randomInt, randomToken, microSeconds as micro, isNode, PROMISE_RESOLVED_VOID } from '../util.js';\nexport var microSeconds = micro;\nimport { ObliviousSet } from 'oblivious-set';\nimport { fillOptionsWithDefaults } from '../options.js';\nvar DB_PREFIX = 'pubkey.broadcast-channel-0-';\nvar OBJECT_STORE_ID = 'messages';\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport var TRANSACTION_SETTINGS = {\n  durability: 'relaxed'\n};\nexport var type = 'idb';\nexport function getIdb() {\n  if (typeof indexedDB !== 'undefined') return indexedDB;\n\n  if (typeof window !== 'undefined') {\n    if (typeof window.mozIndexedDB !== 'undefined') return window.mozIndexedDB;\n    if (typeof window.webkitIndexedDB !== 'undefined') return window.webkitIndexedDB;\n    if (typeof window.msIndexedDB !== 'undefined') return window.msIndexedDB;\n  }\n\n  return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */\n\nexport function commitIndexedDBTransaction(tx) {\n  if (tx.commit) {\n    tx.commit();\n  }\n}\nexport function createDatabase(channelName) {\n  var IndexedDB = getIdb(); // create table\n\n  var dbName = DB_PREFIX + channelName;\n  /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */\n\n  var openRequest = IndexedDB.open(dbName);\n\n  openRequest.onupgradeneeded = function (ev) {\n    var db = ev.target.result;\n    db.createObjectStore(OBJECT_STORE_ID, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  };\n\n  var dbPromise = new Promise(function (res, rej) {\n    openRequest.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    openRequest.onsuccess = function () {\n      res(openRequest.result);\n    };\n  });\n  return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */\n\nexport function writeMessage(db, readerUuid, messageJson) {\n  var time = new Date().getTime();\n  var writeObject = {\n    uuid: readerUuid,\n    time: time,\n    data: messageJson\n  };\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  return new Promise(function (res, rej) {\n    tx.oncomplete = function () {\n      return res();\n    };\n\n    tx.onerror = function (ev) {\n      return rej(ev);\n    };\n\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    objectStore.add(writeObject);\n    commitIndexedDBTransaction(tx);\n  });\n}\nexport function getAllMessages(db) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        ret.push(cursor.value); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n        cursor[\"continue\"]();\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function getMessagesHigherThan(db, lastCursorId) {\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n  /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */\n\n  if (objectStore.getAll) {\n    var getAllRequest = objectStore.getAll(keyRangeValue);\n    return new Promise(function (res, rej) {\n      getAllRequest.onerror = function (err) {\n        return rej(err);\n      };\n\n      getAllRequest.onsuccess = function (e) {\n        res(e.target.result);\n      };\n    });\n  }\n\n  function openCursor() {\n    // Occasionally Safari will fail on IDBKeyRange.bound, this\n    // catches that error, having it open the cursor to the first\n    // item. When it gets data it will advance to the desired key.\n    try {\n      keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n      return objectStore.openCursor(keyRangeValue);\n    } catch (e) {\n      return objectStore.openCursor();\n    }\n  }\n\n  return new Promise(function (res, rej) {\n    var openCursorRequest = openCursor();\n\n    openCursorRequest.onerror = function (err) {\n      return rej(err);\n    };\n\n    openCursorRequest.onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        if (cursor.value.id < lastCursorId + 1) {\n          cursor[\"continue\"](lastCursorId + 1);\n        } else {\n          ret.push(cursor.value);\n          cursor[\"continue\"]();\n        }\n      } else {\n        commitIndexedDBTransaction(tx);\n        res(ret);\n      }\n    };\n  });\n}\nexport function removeMessagesById(db, ids) {\n  var tx = db.transaction([OBJECT_STORE_ID], 'readwrite', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  return Promise.all(ids.map(function (id) {\n    var deleteRequest = objectStore[\"delete\"](id);\n    return new Promise(function (res) {\n      deleteRequest.onsuccess = function () {\n        return res();\n      };\n    });\n  }));\n}\nexport function getOldMessages(db, ttl) {\n  var olderThen = new Date().getTime() - ttl;\n  var tx = db.transaction(OBJECT_STORE_ID, 'readonly', TRANSACTION_SETTINGS);\n  var objectStore = tx.objectStore(OBJECT_STORE_ID);\n  var ret = [];\n  return new Promise(function (res) {\n    objectStore.openCursor().onsuccess = function (ev) {\n      var cursor = ev.target.result;\n\n      if (cursor) {\n        var msgObk = cursor.value;\n\n        if (msgObk.time < olderThen) {\n          ret.push(msgObk); //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n\n          cursor[\"continue\"]();\n        } else {\n          // no more old messages,\n          commitIndexedDBTransaction(tx);\n          res(ret);\n          return;\n        }\n      } else {\n        res(ret);\n      }\n    };\n  });\n}\nexport function cleanOldMessages(db, ttl) {\n  return getOldMessages(db, ttl).then(function (tooOld) {\n    return removeMessagesById(db, tooOld.map(function (msg) {\n      return msg.id;\n    }));\n  });\n}\nexport function create(channelName, options) {\n  options = fillOptionsWithDefaults(options);\n  return createDatabase(channelName).then(function (db) {\n    var state = {\n      closed: false,\n      lastCursorId: 0,\n      channelName: channelName,\n      options: options,\n      uuid: randomToken(),\n\n      /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */\n      eMIs: new ObliviousSet(options.idb.ttl * 2),\n      // ensures we do not read messages in parrallel\n      writeBlockPromise: PROMISE_RESOLVED_VOID,\n      messagesCallback: null,\n      readQueuePromises: [],\n      db: db\n    };\n    /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */\n\n    db.onclose = function () {\n      state.closed = true;\n      if (options.idb.onclose) options.idb.onclose();\n    };\n    /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */\n\n\n    _readLoop(state);\n\n    return state;\n  });\n}\n\nfunction _readLoop(state) {\n  if (state.closed) return;\n  readNewMessages(state).then(function () {\n    return sleep(state.options.idb.fallbackInterval);\n  }).then(function () {\n    return _readLoop(state);\n  });\n}\n\nfunction _filterMessage(msgObj, state) {\n  if (msgObj.uuid === state.uuid) return false; // send by own\n\n  if (state.eMIs.has(msgObj.id)) return false; // already emitted\n\n  if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n\n  return true;\n}\n/**\n * reads all new messages from the database and emits them\n */\n\n\nfunction readNewMessages(state) {\n  // channel already closed\n  if (state.closed) return PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages\n\n  if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;\n  return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {\n    var useMessages = newerMessages\n    /**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */\n    .filter(function (msgObj) {\n      return !!msgObj;\n    }).map(function (msgObj) {\n      if (msgObj.id > state.lastCursorId) {\n        state.lastCursorId = msgObj.id;\n      }\n\n      return msgObj;\n    }).filter(function (msgObj) {\n      return _filterMessage(msgObj, state);\n    }).sort(function (msgObjA, msgObjB) {\n      return msgObjA.time - msgObjB.time;\n    }); // sort by time\n\n    useMessages.forEach(function (msgObj) {\n      if (state.messagesCallback) {\n        state.eMIs.add(msgObj.id);\n        state.messagesCallback(msgObj.data);\n      }\n    });\n    return PROMISE_RESOLVED_VOID;\n  });\n}\n\nexport function close(channelState) {\n  channelState.closed = true;\n  channelState.db.close();\n}\nexport function postMessage(channelState, messageJson) {\n  channelState.writeBlockPromise = channelState.writeBlockPromise.then(function () {\n    return writeMessage(channelState.db, channelState.uuid, messageJson);\n  }).then(function () {\n    if (randomInt(0, 10) === 0) {\n      /* await (do not await) */\n      cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n    }\n  });\n  return channelState.writeBlockPromise;\n}\nexport function onMessage(channelState, fn, time) {\n  channelState.messagesCallbackTime = time;\n  channelState.messagesCallback = fn;\n  readNewMessages(channelState);\n}\nexport function canBeUsed() {\n  if (isNode) return false;\n  var idb = getIdb();\n  if (!idb) return false;\n  return true;\n}\nexport function averageResponseTime(options) {\n  return options.idb.fallbackInterval * 2;\n}\nexport default {\n  create: create,\n  close: close,\n  onMessage: onMessage,\n  postMessage: postMessage,\n  canBeUsed: canBeUsed,\n  type: type,\n  averageResponseTime: averageResponseTime,\n  microSeconds: microSeconds\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}