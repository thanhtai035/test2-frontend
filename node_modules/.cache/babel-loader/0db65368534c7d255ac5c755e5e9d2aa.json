{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { sendRequest } from './request.js';\n\nvar getPhones = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oktaAuth, options) {\n    var transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sendRequest(oktaAuth, {\n              url: '/idp/myaccount/phones',\n              method: 'GET',\n              accessToken: options === null || options === void 0 ? void 0 : options.accessToken,\n              transactionClassName: 'PhoneTransaction'\n            });\n\n          case 2:\n            transaction = _context.sent;\n            return _context.abrupt(\"return\", transaction);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPhones(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getPhone = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(oktaAuth, options) {\n    var accessToken, id, transaction;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            accessToken = options.accessToken, id = options.id;\n            _context2.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/phones/\".concat(id),\n              method: 'GET',\n              accessToken: accessToken,\n              transactionClassName: 'PhoneTransaction'\n            });\n\n          case 3:\n            transaction = _context2.sent;\n            return _context2.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getPhone(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar addPhone = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(oktaAuth, options) {\n    var accessToken, payload, transaction;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            accessToken = options.accessToken, payload = options.payload;\n            _context3.next = 3;\n            return sendRequest(oktaAuth, {\n              url: '/idp/myaccount/phones',\n              method: 'POST',\n              payload: payload,\n              accessToken: accessToken,\n              transactionClassName: 'PhoneTransaction'\n            });\n\n          case 3:\n            transaction = _context3.sent;\n            return _context3.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function addPhone(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar deletePhone = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(oktaAuth, options) {\n    var id, accessToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            id = options.id, accessToken = options.accessToken;\n            _context4.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/phones/\".concat(id),\n              method: 'DELETE',\n              accessToken: accessToken\n            });\n\n          case 3:\n            transaction = _context4.sent;\n            return _context4.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function deletePhone(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar sendPhoneChallenge = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(oktaAuth, options) {\n    var accessToken, id, payload, transaction;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            accessToken = options.accessToken, id = options.id, payload = options.payload;\n            _context5.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/phones/\".concat(id, \"/challenge\"),\n              method: 'POST',\n              payload: payload,\n              accessToken: accessToken\n            });\n\n          case 3:\n            transaction = _context5.sent;\n            return _context5.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function sendPhoneChallenge(_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar verifyPhoneChallenge = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(oktaAuth, options) {\n    var id, payload, accessToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            id = options.id, payload = options.payload, accessToken = options.accessToken;\n            _context6.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/phones/\".concat(id, \"/verify\"),\n              method: 'POST',\n              payload: payload,\n              accessToken: accessToken\n            });\n\n          case 3:\n            transaction = _context6.sent;\n            return _context6.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function verifyPhoneChallenge(_x11, _x12) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nexport { addPhone, deletePhone, getPhone, getPhones, sendPhoneChallenge, verifyPhoneChallenge };","map":{"version":3,"mappings":"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","names":["oktaAuth","options","sendRequest","url","method","accessToken","transactionClassName","transaction","getPhones","id","getPhone","payload","addPhone","deletePhone","sendPhoneChallenge","verifyPhoneChallenge"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\myaccount\\phoneApi.ts"],"sourcesContent":["import { sendRequest } from './request';\nimport { \n  IAPIFunction,\n  BaseTransaction, \n  PhoneTransaction\n} from './types';\n\n/**\n * @scope: okta.myaccount.phone.read\n */\nexport const getPhones: IAPIFunction<PhoneTransaction[]> = async (\n  oktaAuth,\n  options?\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'GET',\n    accessToken: options?.accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction[];\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.read\n */\nexport const getPhone: IAPIFunction<PhoneTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { accessToken, id } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const addPhone: IAPIFunction<PhoneTransaction> = async (\n  oktaAuth, \n  options\n): Promise<PhoneTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const deletePhone: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'DELETE',\n    accessToken,\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const sendPhoneChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { accessToken, id, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/challenge`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const verifyPhoneChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { id, payload, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n"]},"metadata":{},"sourceType":"module"}