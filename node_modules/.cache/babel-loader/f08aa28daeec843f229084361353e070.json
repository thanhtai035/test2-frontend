{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { parseIdxResponse } from './idxResponseParser.js';\n\nfunction makeIdxState(authClient, idxResponse, toPersist, requestDidSucceed) {\n  var _a, _b, _c;\n\n  var rawIdxResponse = idxResponse;\n\n  var _parseIdxResponse = parseIdxResponse(authClient, idxResponse, toPersist),\n      remediations = _parseIdxResponse.remediations,\n      context = _parseIdxResponse.context,\n      actions = _parseIdxResponse.actions;\n\n  var neededToProceed = _toConsumableArray(remediations);\n\n  var proceed = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(remediationChoice) {\n      var paramsFromUser,\n          remediationChoiceObject,\n          actionFn,\n          _args = arguments;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              paramsFromUser = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              remediationChoiceObject = remediations.find(function (remediation) {\n                return remediation.name === remediationChoice;\n              });\n\n              if (remediationChoiceObject) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject(\"Unknown remediation choice: [\".concat(remediationChoice, \"]\")));\n\n            case 4:\n              actionFn = remediationChoiceObject.action;\n\n              if (!(typeof actionFn !== 'function')) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", Promise.reject(\"Current remediation cannot make form submit action: [\".concat(remediationChoice, \"]\")));\n\n            case 7:\n              return _context.abrupt(\"return\", remediationChoiceObject.action(paramsFromUser));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function proceed(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var findCode = function findCode(item) {\n    return item.name === 'interaction_code';\n  };\n\n  var interactionCode = (_c = (_b = (_a = rawIdxResponse.successWithInteractionCode) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.find(findCode)) === null || _c === void 0 ? void 0 : _c.value;\n  return {\n    proceed: proceed,\n    neededToProceed: neededToProceed,\n    actions: actions,\n    context: context,\n    rawIdxState: rawIdxResponse,\n    interactionCode: interactionCode,\n    toPersist: toPersist,\n    requestDidSucceed: requestDidSucceed\n  };\n}\n\nexport { makeIdxState };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAgBM,SAAUA,YAAV,CACJC,UADI,EAEJC,WAFI,EAGJC,SAHI,EAIJC,iBAJI,EAIsB;;;EAE1B,IAAMC,cAAc,GAAIH,WAAxB;;EACA,wBAA2CI,gBAAgB,CAAEL,UAAF,EAAcC,WAAd,EAA2BC,SAA3B,CAA3D;EAAA,IAAQI,YAAR,qBAAQA,YAAR;EAAA,IAAsBC,OAAtB,qBAAsBA,OAAtB;EAAA,IAA+BC,OAA/B,qBAA+BA,OAA/B;;EACA,IAAMC,eAAe,sBAAOH,YAAP,CAArB;;EAEA,IAAMI,OAAO;IAAA,sEAA2B,iBAAgBC,iBAAhB;MAAA;MAAA;MAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAmCC,cAAnC,2DAAoD,EAApD;cAOhCC,uBAPgC,GAONP,YAAY,CAACQ,IAAb,CAAkB,UAACC,WAAD;gBAAA,OAAiBA,WAAW,CAACC,IAAZ,KAAqBL,iBAAtC;cAAA,CAAlB,CAPM;;cAAA,IAQhCE,uBARgC;gBAAA;gBAAA;cAAA;;cAAA,iCAS7BI,OAAO,CAACC,MAAR,wCAA+CP,iBAA/C,OAT6B;;YAAA;cAYhCQ,QAZgC,GAYrBN,uBAAuB,CAACO,MAZH;;cAAA,MAalC,OAAOD,QAAP,KAAoB,UAbc;gBAAA;gBAAA;cAAA;;cAAA,iCAc7BF,OAAO,CAACC,MAAR,gEAAuEP,iBAAvE,OAd6B;;YAAA;cAAA,iCAiB/BE,uBAAuB,CAACO,MAAxB,CAA+BR,cAA/B,CAjB+B;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAA3B;;IAAA,gBAAPF,OAAO;MAAA;IAAA;EAAA,GAAb;;EAoBA,IAAMW,QAAQ,GAAG,SAAXA,QAAW,KAAI;IAAA,OAAIC,IAAI,CAACN,IAAL,KAAc,kBAAlB;EAAA,CAArB;;EACA,IAAMO,eAAe,GAAG,gCAAc,CAACC,0BAAf,MAA2C,IAA3C,IAA2CC,aAA3C,GAA2C,MAA3C,GAA2CA,QAA3C,MAAgD,IAAhD,IAAgDC,aAAhD,GAAgD,MAAhD,GAAgDA,GAAEZ,IAAF,CAAQO,QAAR,CAAhD,MAAkE,IAAlE,IAAkEM,aAAlE,GAAkE,MAAlE,GAAkEA,GAAEC,KAA5F;EAEA,OAAO;IACLlB,OAAO,EAAPA,OADK;IAELD,eAAe,EAAfA,eAFK;IAGLD,OAAO,EAAPA,OAHK;IAILD,OAAO,EAAPA,OAJK;IAKLsB,WAAW,EAAEzB,cALR;IAMLmB,eAAe,EAAfA,eANK;IAOLrB,SAAS,EAATA,SAPK;IAQLC,iBAAiB,EAAjBA;EARK,CAAP;AAUF","names":["makeIdxState","authClient","idxResponse","toPersist","requestDidSucceed","rawIdxResponse","parseIdxResponse","remediations","context","actions","neededToProceed","proceed","remediationChoice","paramsFromUser","remediationChoiceObject","find","remediation","name","Promise","reject","actionFn","action","findCode","item","interactionCode","successWithInteractionCode","_a","_b","_c","value","rawIdxState"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\idxState\\v1\\makeIdxState.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { IdxResponse, IdxToPersist } from '../../types/idx-js';\nimport { OktaAuthIdxInterface, RawIdxResponse } from '../../../types';    // auth-js/types\nimport { parseIdxResponse } from './idxResponseParser';\n\nexport function makeIdxState( \n  authClient: OktaAuthIdxInterface,\n  idxResponse: RawIdxResponse,\n  toPersist: IdxToPersist,\n  requestDidSucceed: boolean\n): IdxResponse {\n  const rawIdxResponse =  idxResponse;\n  const { remediations, context, actions } = parseIdxResponse( authClient, idxResponse, toPersist );\n  const neededToProceed = [...remediations];\n\n  const proceed: IdxResponse['proceed'] = async function( remediationChoice, paramsFromUser = {} ) {\n    /*\n    remediationChoice is the name attribute on each form\n    name should remain unique for items inside the remediation that are considered forms(identify, select-factor)\n    name can be duplicate for items like redirect where its not considered a form(redirect)\n    when names are not unique its a redirect to a href, so widget wont POST to idx-js layer.\n    */\n    const remediationChoiceObject = remediations.find((remediation) => remediation.name === remediationChoice);\n    if ( !remediationChoiceObject ) {\n      return Promise.reject(`Unknown remediation choice: [${remediationChoice}]`);\n    }\n\n    const actionFn = remediationChoiceObject.action;\n    if (typeof actionFn !== 'function') {\n      return Promise.reject(`Current remediation cannot make form submit action: [${remediationChoice}]`);\n    }\n\n    return remediationChoiceObject.action(paramsFromUser);\n  };\n\n  const findCode = item => item.name === 'interaction_code';\n  const interactionCode = rawIdxResponse.successWithInteractionCode?.value?.find( findCode )?.value as string;\n\n  return {\n    proceed,\n    neededToProceed,\n    actions,\n    context,\n    rawIdxState: rawIdxResponse,\n    interactionCode,\n    toPersist,\n    requestDidSucceed,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}