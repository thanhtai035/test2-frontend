{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { IDX_API_VERSION } from '../../constants.js';\nimport v1 from './v1/parsers.js';\n\nconst parsersForVersion = function parsersForVersion(version) {\n  switch (version) {\n    case '1.0.0':\n      return v1;\n\n    case undefined:\n    case null:\n      throw new Error('Api version is required');\n\n    default:\n      throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n  }\n};\n\nfunction validateVersionConfig(version) {\n  if (!version) {\n    throw new Error('version is required');\n  }\n\n  const cleanVersion = (version !== null && version !== void 0 ? version : '').replace(/[^0-9a-zA-Z._-]/, '');\n\n  if (cleanVersion !== version || !version) {\n    throw new Error('invalid version supplied - version is required and uses semver syntax');\n  }\n\n  parsersForVersion(version);\n}\n\nfunction makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed) {\n  var _a;\n\n  const version = (_a = rawIdxResponse === null || rawIdxResponse === void 0 ? void 0 : rawIdxResponse.version) !== null && _a !== void 0 ? _a : IDX_API_VERSION;\n  validateVersionConfig(version);\n  const {\n    makeIdxState\n  } = parsersForVersion(version);\n  return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\n\nexport { makeIdxState, parsersForVersion, validateVersionConfig };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAMa,uBAAiB,GAAG,SAASA,iBAAT,CAA4BC,OAA5B,EAAmC;EAClE,QAAQA,OAAR;IACE,KAAK,OAAL;MACE,OAAOC,EAAP;;IACF,KAAKC,SAAL;IACA,KAAK,IAAL;MACE,MAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;;IACF;MACE,MAAM,IAAIA,KAAJ,CAAU,wBAAwBH,OAAO,iCAAzC,CAAN;EAPJ;AASA,CAVW;;AAYP,SAAUI,qBAAV,CAAgCJ,OAAhC,EAAuC;EAC3C,IAAK,CAACA,OAAN,EAAgB;IACd,MAAM,IAAIG,KAAJ,CAAU,qBAAV,CAAN;EACD;;EAED,MAAME,YAAY,GAAG,CAACL,OAAO,KAAP,eAAO,WAAP,aAAW,EAAZ,EAAgBM,OAAhB,CAAwB,iBAAxB,EAA2C,EAA3C,CAArB;;EACA,IAAKD,YAAY,KAAKL,OAAjB,IAA4B,CAACA,OAAlC,EAA4C;IAC1C,MAAM,IAAIG,KAAJ,CAAU,uEAAV,CAAN;EACD;;EAEDJ,iBAAiB,CAACC,OAAD,CAAjB;AACD;;AAEK,SAAUO,YAAV,CACJC,UADI,EAEJC,cAFI,EAGJC,SAHI,EAIJC,iBAJI,EAIsB;;;EAE1B,MAAMX,OAAO,GAAG,oBAAc,KAAd,sBAAc,KAAd,gCAAc,CAAEA,OAAhB,MAA2B,IAA3B,IAA2BY,aAA3B,GAA2BA,EAA3B,GAA2BC,eAA3C;EACAT,qBAAqB,CAACJ,OAAD,CAArB;EAEA,MAAM;IAAEO;EAAF,IAAmBR,iBAAiB,CAACC,OAAD,CAA1C;EACA,OAAOO,YAAY,CAACC,UAAD,EAAaC,cAAb,EAA6BC,SAA7B,EAAwCC,iBAAxC,CAAnB;AACF","names":["parsersForVersion","version","v1","undefined","Error","validateVersionConfig","cleanVersion","replace","makeIdxState","authClient","rawIdxResponse","toPersist","requestDidSucceed","_a","IDX_API_VERSION"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\idxState\\index.ts"],"sourcesContent":["import { OktaAuthIdxInterface } from '../../types';    // auth-js/types\nimport { IdxResponse, IdxToPersist, RawIdxResponse } from '../types/idx-js';      // idx/types\nimport { IDX_API_VERSION } from '../../constants';\nimport v1 from './v1/parsers';\n\n\nexport const parsersForVersion = function parsersForVersion( version ) {\n  switch (version) {\n    case '1.0.0':\n      return v1;\n    case undefined:\n    case null:\n      throw new Error('Api version is required');\n    default:\n      throw new Error(`Unknown api version: ${version}.  Use an exact semver version.`);\n  }\n};\n\nexport function validateVersionConfig(version) {\n  if ( !version ) {\n    throw new Error('version is required');\n  }\n\n  const cleanVersion = (version ?? '').replace(/[^0-9a-zA-Z._-]/, '');\n  if ( cleanVersion !== version || !version ) {\n    throw new Error('invalid version supplied - version is required and uses semver syntax');\n  }\n\n  parsersForVersion(version); // will throw for invalid version\n}\n\nexport function makeIdxState ( \n  authClient: OktaAuthIdxInterface,\n  rawIdxResponse: RawIdxResponse,\n  toPersist: IdxToPersist,\n  requestDidSucceed: boolean,\n): IdxResponse {\n  const version = rawIdxResponse?.version ?? IDX_API_VERSION;\n  validateVersionConfig(version);\n  \n  const { makeIdxState } = parsersForVersion(version);\n  return makeIdxState(authClient, rawIdxResponse, toPersist, requestDidSucceed);\n}\n"]},"metadata":{},"sourceType":"module"}