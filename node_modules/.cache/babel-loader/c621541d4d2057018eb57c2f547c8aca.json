{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from './errors/AuthSdkError.js';\nimport { REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_NONCE_COOKIE_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants.js';\nimport { isTransactionMeta, isOAuthTransactionMeta } from './types/Transaction.js';\nimport './idx/types/api.js';\nimport { warn } from './util/console.js';\nimport './myaccount/types.js';\nimport { isRawIdxResponse } from './idx/types/idx-js.js';\nimport { clearTransactionFromSharedStorage, saveTransactionToSharedStorage, pruneSharedStorage, loadTransactionFromSharedStorage } from './util/sharedStorage.js';\n\nclass TransactionManager {\n  constructor(options) {\n    this.storageManager = options.storageManager;\n    this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;\n    this.saveNonceCookie = options.saveNonceCookie === false ? false : true;\n    this.saveStateCookie = options.saveStateCookie === false ? false : true;\n    this.saveParamsCookie = options.saveParamsCookie === false ? false : true;\n    this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n    this.saveLastResponse = options.saveLastResponse === false ? false : true;\n    this.options = options;\n  }\n\n  clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const transactionStorage = this.storageManager.getTransactionStorage();\n    const meta = transactionStorage.getStorage();\n    transactionStorage.clearStorage();\n\n    if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n      const state = options.state || (meta === null || meta === void 0 ? void 0 : meta.state);\n\n      if (state) {\n        clearTransactionFromSharedStorage(this.storageManager, state);\n      }\n    }\n\n    if (options.clearIdxResponse !== false) {\n      this.clearIdxResponse();\n    }\n\n    if (!this.legacyWidgetSupport) {\n      return;\n    }\n\n    if (options.oauth) {\n      this.clearLegacyOAuthParams();\n    }\n\n    if (options.pkce) {\n      this.clearLegacyPKCE();\n    }\n  }\n\n  save(meta) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let storage = this.storageManager.getTransactionStorage();\n    const obj = storage.getStorage();\n\n    if (isTransactionMeta(obj) && !options.muteWarning) {\n      warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n    }\n\n    storage.setStorage(meta);\n\n    if (this.enableSharedStorage && meta.state) {\n      saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n    }\n\n    if (!options.oauth) {\n      return;\n    }\n\n    if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {\n      const cookieStorage = this.storageManager.getStorage({\n        storageType: 'cookie'\n      });\n\n      if (this.saveParamsCookie) {\n        const {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        } = meta;\n        const oauthParams = {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        };\n        cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);\n      }\n\n      if (this.saveNonceCookie && meta.nonce) {\n        cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);\n      }\n\n      if (this.saveStateCookie && meta.state) {\n        cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);\n      }\n    }\n  }\n\n  exists() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      const meta = this.load(options);\n      return !!meta;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  load() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let meta;\n\n    if (this.enableSharedStorage && options.state) {\n      pruneSharedStorage(this.storageManager);\n      meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n    }\n\n    let storage = this.storageManager.getTransactionStorage();\n    meta = storage.getStorage();\n\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n\n    if (!this.legacyWidgetSupport) {\n      return null;\n    }\n\n    if (options.oauth) {\n      try {\n        const oauthParams = this.loadLegacyOAuthParams();\n        Object.assign(meta, oauthParams);\n      } finally {\n        this.clearLegacyOAuthParams();\n      }\n    }\n\n    if (options.pkce) {\n      try {\n        const pkceMeta = this.loadLegacyPKCE();\n        Object.assign(meta, pkceMeta);\n      } finally {\n        this.clearLegacyPKCE();\n      }\n    }\n\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n\n    return null;\n  }\n\n  clearLegacyPKCE() {\n    let storage;\n\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'localStorage'\n      });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'sessionStorage'\n      });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyPKCE() {\n    let storage;\n    let obj;\n\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'localStorage'\n      });\n      obj = storage.getStorage();\n\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({\n        storageType: 'sessionStorage'\n      });\n      obj = storage.getStorage();\n\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n\n    throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);\n  }\n\n  clearLegacyOAuthParams() {\n    let storage;\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'sessionStorage'\n      });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'cookie'\n      });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyOAuthParams() {\n    let storage;\n    let oauthParams;\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'sessionStorage'\n      });\n      oauthParams = storage.getStorage();\n    }\n\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({\n        storageType: 'cookie'\n      });\n      oauthParams = storage.getStorage();\n    }\n\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n    throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');\n  }\n\n  saveIdxResponse(data) {\n    if (!this.saveLastResponse) {\n      return;\n    }\n\n    const storage = this.storageManager.getIdxResponseStorage();\n\n    if (!storage) {\n      return;\n    }\n\n    storage.setStorage(data);\n  }\n\n  loadIdxResponse(options) {\n    if (!this.saveLastResponse) {\n      return null;\n    }\n\n    const storage = this.storageManager.getIdxResponseStorage();\n\n    if (!storage) {\n      return null;\n    }\n\n    const storedValue = storage.getStorage();\n\n    if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {\n      return null;\n    }\n\n    if (options) {\n      const {\n        stateHandle,\n        interactionHandle\n      } = options;\n\n      if (stateHandle && storedValue.stateHandle !== stateHandle) {\n        return null;\n      }\n\n      if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {\n        return null;\n      }\n    }\n\n    return storedValue;\n  }\n\n  clearIdxResponse() {\n    if (!this.saveLastResponse) {\n      return;\n    }\n\n    const storage = this.storageManager.getIdxResponseStorage();\n    storage === null || storage === void 0 ? void 0 : storage.clearStorage();\n  }\n\n}\n\nexport { TransactionManager as default };","map":{"version":3,"mappings":"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","names":["TransactionManager","constructor","options","storageManager","legacyWidgetSupport","saveNonceCookie","saveStateCookie","saveParamsCookie","enableSharedStorage","saveLastResponse","clear","transactionStorage","getTransactionStorage","meta","getStorage","clearStorage","clearSharedStorage","state","clearTransactionFromSharedStorage","clearIdxResponse","oauth","clearLegacyOAuthParams","pkce","clearLegacyPKCE","save","storage","obj","isTransactionMeta","muteWarning","warn","setStorage","saveTransactionToSharedStorage","cookieStorage","storageType","responseType","nonce","scopes","clientId","urls","ignoreSignature","oauthParams","setItem","REDIRECT_OAUTH_PARAMS_NAME","JSON","stringify","REDIRECT_NONCE_COOKIE_NAME","REDIRECT_STATE_COOKIE_NAME","exists","load","_a","pruneSharedStorage","loadTransactionFromSharedStorage","loadLegacyOAuthParams","Object","assign","pkceMeta","loadLegacyPKCE","storageUtil","testStorageType","getLegacyPKCEStorage","codeVerifier","AuthSdkError","undefined","getLegacyOAuthParamsStorage","isOAuthTransactionMeta","saveIdxResponse","data","getIdxResponseStorage","loadIdxResponse","storedValue","isRawIdxResponse","rawIdxResponse","stateHandle","interactionHandle"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\TransactionManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthSdkError } from './errors';\nimport { REDIRECT_NONCE_COOKIE_NAME, REDIRECT_OAUTH_PARAMS_NAME, REDIRECT_STATE_COOKIE_NAME } from './constants';\nimport { StorageManager } from './StorageManager';\nimport {\n  StorageProvider,\n  TransactionMeta,\n  isTransactionMeta,\n  isOAuthTransactionMeta,\n  PKCETransactionMeta,\n  OAuthTransactionMeta,\n  TransactionMetaOptions,\n  TransactionManagerOptions,\n  CookieStorage,\n  SavedIdxResponse,\n  IntrospectOptions\n} from './types';\nimport { isRawIdxResponse } from './idx/types/idx-js';\nimport { warn } from './util';\nimport {\n  clearTransactionFromSharedStorage,\n  loadTransactionFromSharedStorage,\n  pruneSharedStorage,\n  saveTransactionToSharedStorage\n} from './util/sharedStorage';\n\nexport interface ClearTransactionMetaOptions extends TransactionMetaOptions {\n  clearSharedStorage?: boolean; // true by default\n  clearIdxResponse?: boolean; // true by default\n}\nexport default class TransactionManager {\n  options: TransactionManagerOptions;\n  storageManager: StorageManager;\n  legacyWidgetSupport: boolean;\n  saveNonceCookie: boolean;\n  saveStateCookie: boolean;\n  saveParamsCookie: boolean;\n  enableSharedStorage: boolean;\n  saveLastResponse: boolean;\n\n  constructor(options: TransactionManagerOptions) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.storageManager = options.storageManager!;\n    this.legacyWidgetSupport = options.legacyWidgetSupport === false ? false : true;\n    this.saveNonceCookie = options.saveNonceCookie === false ? false : true;\n    this.saveStateCookie = options.saveStateCookie === false ? false : true;\n    this.saveParamsCookie = options.saveParamsCookie === false ? false : true;\n    this.enableSharedStorage = options.enableSharedStorage === false ? false : true;\n    this.saveLastResponse = options.saveLastResponse === false ? false : true;\n    this.options = options;\n  }\n\n  // eslint-disable-next-line complexity\n  clear(options: ClearTransactionMetaOptions = {}) {\n    const transactionStorage: StorageProvider = this.storageManager.getTransactionStorage();\n    const meta = transactionStorage.getStorage();\n\n    // Clear primary storage (by default, sessionStorage on browser)\n    transactionStorage.clearStorage();\n\n    // Usually we want to also clear shared storage unless another tab may need it to continue/complete a flow\n    if (this.enableSharedStorage && options.clearSharedStorage !== false) {\n      const state = options.state || meta?.state;\n      if (state) {\n        clearTransactionFromSharedStorage(this.storageManager, state);\n      }\n    }\n\n    if (options.clearIdxResponse !== false) {\n      this.clearIdxResponse();\n    }\n    \n    if (!this.legacyWidgetSupport) {\n      return;\n    }\n\n    // This is for compatibility with older versions of the signin widget. OKTA-304806\n    if (options.oauth) {\n      this.clearLegacyOAuthParams();\n    }\n\n    if (options.pkce) {\n      this.clearLegacyPKCE();\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  save(meta: TransactionMeta, options: TransactionMetaOptions = {}) {\n    // There must be only one transaction executing at a time.\n    // Before saving, check to see if a transaction is already stored.\n    // An existing transaction indicates a concurrency/race/overlap condition\n\n    let storage: StorageProvider = this.storageManager.getTransactionStorage();\n    const obj = storage.getStorage();\n    // oie process may need to update transaction in the middle of process for tracking purpose\n    // false alarm might be caused \n    // TODO: revisit for a better solution, https://oktainc.atlassian.net/browse/OKTA-430919\n    if (isTransactionMeta(obj) && !options.muteWarning) {\n      // eslint-disable-next-line max-len\n      warn('a saved auth transaction exists in storage. This may indicate another auth flow is already in progress.');\n    }\n\n    storage.setStorage(meta);\n\n    // Shared storage allows continuation of transaction in another tab\n    if (this.enableSharedStorage && meta.state) {\n      saveTransactionToSharedStorage(this.storageManager, meta.state, meta);\n    }\n\n    if (!options.oauth) {\n      return;\n    }\n  \n    // Legacy cookie storage\n    if (this.saveNonceCookie || this.saveStateCookie || this.saveParamsCookie) {\n      const cookieStorage: CookieStorage = this.storageManager.getStorage({ storageType: 'cookie' }) as CookieStorage;\n\n      if (this.saveParamsCookie) {\n        const { \n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        } = meta;\n        const oauthParams = {\n          responseType,\n          state,\n          nonce,\n          scopes,\n          clientId,\n          urls,\n          ignoreSignature\n        };\n        cookieStorage.setItem(REDIRECT_OAUTH_PARAMS_NAME, JSON.stringify(oauthParams), null);\n      }\n\n      if (this.saveNonceCookie && meta.nonce) {\n        // Set nonce cookie for servers to validate nonce in id_token\n        cookieStorage.setItem(REDIRECT_NONCE_COOKIE_NAME, meta.nonce, null);\n      }\n\n      if (this.saveStateCookie && meta.state) {\n        // Set state cookie for servers to validate state\n        cookieStorage.setItem(REDIRECT_STATE_COOKIE_NAME, meta.state, null);\n      }\n    }\n  }\n\n  exists(options: TransactionMetaOptions = {}): boolean {\n    try {\n      const meta = this.load(options);\n      return !!meta;\n    } catch {\n      return false;\n    }\n  }\n\n  // load transaction meta from storage\n  // eslint-disable-next-line complexity,max-statements\n  load(options: TransactionMetaOptions = {}): TransactionMeta | null {\n\n    let meta: TransactionMeta;\n\n    // If state was passed, try loading transaction data from shared storage\n    if (this.enableSharedStorage && options.state) {\n      pruneSharedStorage(this.storageManager); // prune before load\n      meta = loadTransactionFromSharedStorage(this.storageManager, options.state);\n      if (isTransactionMeta(meta)) {\n        return meta;\n      }\n    }\n\n    let storage: StorageProvider = this.storageManager.getTransactionStorage();\n    meta = storage.getStorage();\n    if (isTransactionMeta(meta)) {\n      // if we have meta in the new location, there is no need to go further\n      return meta;\n    }\n\n    if (!this.legacyWidgetSupport) {\n      return null;\n    }\n\n    // This is for compatibility with older versions of the signin widget. OKTA-304806\n    if (options.oauth) {\n      try {\n        const oauthParams = this.loadLegacyOAuthParams();\n        Object.assign(meta, oauthParams);\n      } finally {\n        this.clearLegacyOAuthParams();\n      }\n    }\n\n    if (options.pkce) {\n      try {\n        const pkceMeta: PKCETransactionMeta = this.loadLegacyPKCE();\n        Object.assign(meta, pkceMeta);\n      } finally {\n        this.clearLegacyPKCE();\n      }\n    }\n\n    if (isTransactionMeta(meta)) {\n      return meta;\n    }\n    return null;\n  }\n\n  // This is for compatibility with older versions of the signin widget. OKTA-304806\n  clearLegacyPKCE(): void {\n    // clear storages\n    let storage: StorageProvider;\n\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyPKCE(): PKCETransactionMeta {\n    let storage: StorageProvider;\n    let obj;\n    \n    // Try reading from localStorage first.\n    if (this.storageManager.storageUtil.testStorageType('localStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'localStorage' });\n      obj = storage.getStorage();\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n\n    // If meta is not valid, read from sessionStorage. This is expected for more recent versions of the widget.\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyPKCEStorage({ storageType: 'sessionStorage' });\n      obj = storage.getStorage();\n      if (obj && obj.codeVerifier) {\n        return obj;\n      }\n    }\n    \n    // If meta is not valid, throw an exception to avoid misleading server-side error\n    // The most likely cause of this error is trying to handle a callback twice\n    // eslint-disable-next-line max-len\n    throw new AuthSdkError('Could not load PKCE codeVerifier from storage. This may indicate the auth flow has already completed or multiple auth flows are executing concurrently.', undefined);\n  }\n\n  clearLegacyOAuthParams(): void {\n    // clear storages\n    let storage: StorageProvider;\n\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });\n      storage.clearStorage();\n    }\n\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });\n      storage.clearStorage();\n    }\n  }\n\n  loadLegacyOAuthParams(): OAuthTransactionMeta {\n    let storage: StorageProvider;\n    let oauthParams;\n  \n    // load first from session storage\n    if (this.storageManager.storageUtil.testStorageType('sessionStorage')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'sessionStorage' });\n      oauthParams = storage.getStorage();\n    }\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n    // try to load from cookie\n    if (this.storageManager.storageUtil.testStorageType('cookie')) {\n      storage = this.storageManager.getLegacyOAuthParamsStorage({ storageType: 'cookie' });\n      oauthParams = storage.getStorage();\n    }\n\n    if (isOAuthTransactionMeta(oauthParams)) {\n      return oauthParams;\n    }\n\n\n    throw new AuthSdkError('Unable to retrieve OAuth redirect params from storage');\n\n    // Something is there but we don't recognize it\n    // throw new AuthSdkError('Unable to parse the ' + REDIRECT_OAUTH_PARAMS_NAME + ' value from storage');\n  }\n\n  saveIdxResponse(data: SavedIdxResponse): void {\n    if (!this.saveLastResponse) {\n      return;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    if (!storage) {\n      return;\n    }\n    storage.setStorage(data);\n  }\n\n  // eslint-disable-next-line complexity\n  loadIdxResponse(options?: IntrospectOptions): SavedIdxResponse | null {\n    if (!this.saveLastResponse) {\n      return null;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    if (!storage) {\n      return null;\n    }\n    const storedValue = storage.getStorage();\n    if (!storedValue || !isRawIdxResponse(storedValue.rawIdxResponse)) {\n      return null;\n    }\n\n    if (options) {\n      const { stateHandle, interactionHandle } = options;\n      if (stateHandle && storedValue.stateHandle !== stateHandle) {\n        return null;\n      }\n      if (interactionHandle && storedValue.interactionHandle !== interactionHandle) {\n        return null;\n      }\n    }\n\n    return storedValue;\n  }\n\n  clearIdxResponse(): void {\n    if (!this.saveLastResponse) {\n      return;\n    }\n    const storage = this.storageManager.getIdxResponseStorage();\n    storage?.clearStorage();\n  }\n}"]},"metadata":{},"sourceType":"module"}