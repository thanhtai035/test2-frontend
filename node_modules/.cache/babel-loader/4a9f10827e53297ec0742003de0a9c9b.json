{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { clone } from '../util/object.js';\nimport { createOAuthMeta } from './util/oauthMeta.js';\nimport { prepareTokenParams } from './util/prepareTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { buildAuthorizeParams } from './endpoints/authorize.js';\n\nasync function getWithRedirect(sdk, options) {\n  if (arguments.length > 2) {\n    return Promise.reject(new AuthSdkError('As of version 3.0, \"getWithRedirect\" takes only a single set of options'));\n  }\n\n  options = clone(options) || {};\n  const tokenParams = await prepareTokenParams(sdk, options);\n  const meta = createOAuthMeta(sdk, tokenParams);\n  const requestUrl = meta.urls.authorizeUrl + buildAuthorizeParams(tokenParams);\n  sdk.transactionManager.save(meta, {\n    oauth: true\n  });\n\n  sdk.token.getWithRedirect._setLocation(requestUrl);\n}\n\nexport { getWithRedirect };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAmBO,eAAeA,eAAf,CAA+BC,GAA/B,EAA2DC,OAA3D,EAAgF;EACrF,IAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;IACxB,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,YAAJ,CAAiB,yEAAjB,CAAf,CAAP;EACD;;EAEDL,OAAO,GAAGM,KAAK,CAACN,OAAD,CAAL,IAAkB,EAA5B;EAEA,MAAMO,WAAW,GAAG,MAAMC,kBAAkB,CAACT,GAAD,EAAMC,OAAN,CAA5C;EACA,MAAMS,IAAI,GAAGC,eAAe,CAACX,GAAD,EAAMQ,WAAN,CAA5B;EACA,MAAMI,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAUC,YAAV,GAAyBC,oBAAoB,CAACP,WAAD,CAAhE;EACAR,GAAG,CAACgB,kBAAJ,CAAuBC,IAAvB,CAA4BP,IAA5B,EAAkC;IAAEQ,KAAK,EAAE;EAAT,CAAlC;;EACAlB,GAAG,CAACmB,KAAJ,CAAUpB,eAAV,CAA0BqB,YAA1B,CAAuCR,UAAvC;AACF","names":["getWithRedirect","sdk","options","arguments","length","Promise","reject","AuthSdkError","clone","tokenParams","prepareTokenParams","meta","createOAuthMeta","requestUrl","urls","authorizeUrl","buildAuthorizeParams","transactionManager","save","oauth","token","_setLocation"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\oidc\\getWithRedirect.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { OktaAuthOIDCInterface, TokenParams } from '../types';\nimport { clone } from '../util';\nimport { prepareTokenParams, createOAuthMeta } from './util';\nimport { buildAuthorizeParams } from './endpoints/authorize';\n\nexport async function getWithRedirect(sdk: OktaAuthOIDCInterface, options?: TokenParams): Promise<void> {\n  if (arguments.length > 2) {\n    return Promise.reject(new AuthSdkError('As of version 3.0, \"getWithRedirect\" takes only a single set of options'));\n  }\n\n  options = clone(options) || {};\n\n  const tokenParams = await prepareTokenParams(sdk, options);\n  const meta = createOAuthMeta(sdk, tokenParams);\n  const requestUrl = meta.urls.authorizeUrl + buildAuthorizeParams(tokenParams);\n  sdk.transactionManager.save(meta, { oauth: true });\n  sdk.token.getWithRedirect._setLocation(requestUrl);\n}\n"]},"metadata":{},"sourceType":"module"}