{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { sendRequest } from './request.js';\n\nvar getEmails = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oktaAuth, options) {\n    var transaction;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sendRequest(oktaAuth, {\n              url: '/idp/myaccount/emails',\n              method: 'GET',\n              accessToken: options === null || options === void 0 ? void 0 : options.accessToken,\n              transactionClassName: 'EmailTransaction'\n            });\n\n          case 2:\n            transaction = _context.sent;\n            return _context.abrupt(\"return\", transaction);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getEmails(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getEmail = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(oktaAuth, options) {\n    var id, accessToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            id = options.id, accessToken = options.accessToken;\n            _context2.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/emails/\".concat(id),\n              method: 'GET',\n              accessToken: accessToken,\n              transactionClassName: 'EmailTransaction'\n            });\n\n          case 3:\n            transaction = _context2.sent;\n            return _context2.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getEmail(_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar addEmail = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(oktaAuth, options) {\n    var accessToken, payload, transaction;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            accessToken = options.accessToken, payload = options.payload;\n            _context3.next = 3;\n            return sendRequest(oktaAuth, {\n              url: '/idp/myaccount/emails',\n              method: 'POST',\n              payload: payload,\n              accessToken: accessToken,\n              transactionClassName: 'EmailTransaction'\n            });\n\n          case 3:\n            transaction = _context3.sent;\n            return _context3.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function addEmail(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar deleteEmail = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(oktaAuth, options) {\n    var id, accessToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            id = options.id, accessToken = options.accessToken;\n            _context4.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/emails/\".concat(id),\n              method: 'DELETE',\n              accessToken: accessToken\n            });\n\n          case 3:\n            transaction = _context4.sent;\n            return _context4.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function deleteEmail(_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar sendEmailChallenge = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(oktaAuth, options) {\n    var id, accessToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            id = options.id, accessToken = options.accessToken;\n            _context5.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/emails/\".concat(id, \"/challenge\"),\n              method: 'POST',\n              accessToken: accessToken,\n              transactionClassName: 'EmailChallengeTransaction'\n            });\n\n          case 3:\n            transaction = _context5.sent;\n            return _context5.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function sendEmailChallenge(_x9, _x10) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar getEmailChallenge = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(oktaAuth, options) {\n    var emailId, challengeId, accessToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            emailId = options.emailId, challengeId = options.challengeId, accessToken = options.accessToken;\n            _context6.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/emails/\".concat(emailId, \"/challenge/\").concat(challengeId),\n              method: 'POST',\n              accessToken: accessToken,\n              transactionClassName: 'EmailChallengeTransaction'\n            });\n\n          case 3:\n            transaction = _context6.sent;\n            return _context6.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function getEmailChallenge(_x11, _x12) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar verifyEmailChallenge = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(oktaAuth, options) {\n    var emailId, challengeId, payload, accessToken, transaction;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            emailId = options.emailId, challengeId = options.challengeId, payload = options.payload, accessToken = options.accessToken;\n            _context7.next = 3;\n            return sendRequest(oktaAuth, {\n              url: \"/idp/myaccount/emails/\".concat(emailId, \"/challenge/\").concat(challengeId, \"/verify\"),\n              method: 'POST',\n              payload: payload,\n              accessToken: accessToken\n            });\n\n          case 3:\n            transaction = _context7.sent;\n            return _context7.abrupt(\"return\", transaction);\n\n          case 5:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n\n  return function verifyEmailChallenge(_x13, _x14) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nexport { addEmail, deleteEmail, getEmail, getEmailChallenge, getEmails, sendEmailChallenge, verifyEmailChallenge };","map":{"version":3,"mappings":"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","names":["oktaAuth","options","sendRequest","url","method","accessToken","transactionClassName","transaction","getEmails","id","getEmail","payload","addEmail","deleteEmail","sendEmailChallenge","emailId","challengeId","getEmailChallenge","verifyEmailChallenge"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\myaccount\\emailApi.ts"],"sourcesContent":["import { sendRequest } from './request';\nimport { \n  IAPIFunction, \n  BaseTransaction, \n  EmailTransaction, \n  EmailChallengeTransaction \n} from './types';\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmails: IAPIFunction<EmailTransaction[]> = async (\n  oktaAuth,\n  options?\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'GET',\n    accessToken: options?.accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction[];\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmail: IAPIFunction<EmailTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const addEmail: IAPIFunction<EmailTransaction> = async (\n  oktaAuth, \n  options\n): Promise<EmailTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const deleteEmail: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'DELETE',\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const sendEmailChallenge: IAPIFunction<EmailChallengeTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}/challenge`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  }) as EmailChallengeTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmailChallenge: IAPIFunction<EmailChallengeTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { emailId, challengeId, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  }) as EmailChallengeTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const verifyEmailChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { emailId, challengeId, payload, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n"]},"metadata":{},"sourceType":"module"}