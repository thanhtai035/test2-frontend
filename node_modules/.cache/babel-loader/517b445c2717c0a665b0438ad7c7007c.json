{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Base/Remediator.js';\n\nclass EnrollProfile extends Remediator {\n  canRemediate() {\n    const userProfileFromValues = this.getData().userProfile;\n\n    if (!userProfileFromValues) {\n      return false;\n    }\n\n    const userProfileFromRemediation = this.remediation.value.find(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'userProfile';\n    });\n    return userProfileFromRemediation.form.value.reduce((canRemediate, curr) => {\n      if (curr.required) {\n        canRemediate = canRemediate && !!userProfileFromValues[curr.name];\n      }\n\n      return canRemediate;\n    }, true);\n  }\n\n  mapUserProfile(_ref2) {\n    let {\n      form: {\n        value: profileAttributes\n      }\n    } = _ref2;\n    const attributeNames = profileAttributes.map(_ref3 => {\n      let {\n        name\n      } = _ref3;\n      return name;\n    });\n    const data = attributeNames.reduce((attributeValues, attributeName) => this.values[attributeName] ? Object.assign(Object.assign({}, attributeValues), {\n      [attributeName]: this.values[attributeName]\n    }) : attributeValues, {});\n\n    if (Object.keys(data).length === 0) {\n      return;\n    }\n\n    return data;\n  }\n\n  getInputUserProfile(input) {\n    return [...input.form.value];\n  }\n\n  getErrorMessages(errorRemediation) {\n    return errorRemediation.value[0].form.value.reduce((errors, field) => {\n      if (field.messages) {\n        errors.push(field.messages.value[0].message);\n      }\n\n      return errors;\n    }, []);\n  }\n\n}\n\nEnrollProfile.remediationName = 'enroll-profile';\nexport { EnrollProfile };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAuBM,MAAOA,aAAP,SAA6BC,UAA7B,CAA4D;EAGhEC,YAAY;IACV,MAAMC,qBAAqB,GAAG,KAAKC,OAAL,GAAeC,WAA7C;;IACA,IAAI,CAACF,qBAAL,EAA4B;MAC1B,OAAO,KAAP;IACD;;IAED,MAAMG,0BAA0B,GAAG,KAAKC,WAAL,CAAiBC,KAAjB,CAAwBC,IAAxB,CAA6B;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAcA,IAAI,KAAK,aAAvB;IAAA,CAA7B,CAAnC;IACA,OAAOJ,0BAA0B,CAACK,IAA3B,CAAiCH,KAAjC,CAAuCI,MAAvC,CAA8C,CAACV,YAAD,EAAeW,IAAf,KAAuB;MAC1E,IAAIA,IAAI,CAACC,QAAT,EAAmB;QACjBZ,YAAY,GAAGA,YAAY,IAAI,CAAC,CAACC,qBAAqB,CAACU,IAAI,CAACH,IAAN,CAAtD;MACD;;MACD,OAAOR,YAAP;IACD,CALM,EAKJ,IALI,CAAP;EAMD;;EAEDa,cAAc,QAAqC;IAAA,IAApC;MAACJ,IAAI,EAAE;QAAEH,KAAK,EAAEQ;MAAT;IAAP,CAAoC;IACjD,MAAMC,cAAc,GAAGD,iBAAiB,CAACE,GAAlB,CAAsB;MAAA,IAAC;QAACR;MAAD,CAAD;MAAA,OAAYA,IAAZ;IAAA,CAAtB,CAAvB;IACA,MAAMS,IAAI,GAAGF,cAAc,CAACL,MAAf,CAAsB,CAACQ,eAAD,EAAkBC,aAAlB,KACjC,KAAKC,MAAL,CAAYD,aAAZ,IACGE,kDAAe;MAClB,CAACF,aAAD,GAAiB,KAAKC,MAAL,CAAYD,aAAZ;IADC,CAAf,CADH,GAGED,eAJS,EAIS,EAJT,CAAb;;IAKA,IAAIG,MAAM,CAACC,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,KAA6B,CAAjC,EAAoC;MAClC;IACD;;IACD,OAAON,IAAP;EACD;;EAEDO,mBAAmB,CAACC,KAAD,EAAM;IACvB,OAAO,CAAC,GAAGA,KAAK,CAAChB,IAAN,CAAWH,KAAf,CAAP;EACD;;EAEDoB,gBAAgB,CAACC,gBAAD,EAAiB;IAC/B,OAAOA,gBAAgB,CAACrB,KAAjB,CAAuB,CAAvB,EAA0BG,IAA1B,CAA+BH,KAA/B,CAAqCI,MAArC,CAA4C,CAACkB,MAAD,EAASC,KAAT,KAAkB;MACnE,IAAIA,KAAK,CAACC,QAAV,EAAoB;QAClBF,MAAM,CAACG,IAAP,CAAYF,KAAK,CAACC,QAAN,CAAexB,KAAf,CAAqB,CAArB,EAAwB0B,OAApC;MACD;;MACD,OAAOJ,MAAP;IACD,CALM,EAKJ,EALI,CAAP;EAMD;;AA1C+D;;AACzD9B,aAAe,gBAAf,GAAkB,gBAAlB","names":["EnrollProfile","Remediator","canRemediate","userProfileFromValues","getData","userProfile","userProfileFromRemediation","remediation","value","find","name","form","reduce","curr","required","mapUserProfile","profileAttributes","attributeNames","map","data","attributeValues","attributeName","values","Object","keys","length","getInputUserProfile","input","getErrorMessages","errorRemediation","errors","field","messages","push","message"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\remediators\\EnrollProfile.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { IdxRemediationValue } from '../types/idx-js';\nimport { Remediator, RemediationValues } from './Base/Remediator';\n\nexport interface EnrollProfileValues extends RemediationValues {\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n}\n\nexport class EnrollProfile extends Remediator<EnrollProfileValues> {\n  static remediationName = 'enroll-profile';\n\n  canRemediate() {\n    const userProfileFromValues = this.getData().userProfile;\n    if (!userProfileFromValues) {\n      return false;\n    }\n    // eslint-disable-next-line max-len\n    const userProfileFromRemediation = this.remediation.value!.find(({ name }) => name === 'userProfile') as IdxRemediationValue;\n    return userProfileFromRemediation.form!.value.reduce((canRemediate, curr) => {\n      if (curr.required) {\n        canRemediate = canRemediate && !!userProfileFromValues[curr.name];\n      }\n      return canRemediate;\n    }, true);\n  }\n\n  mapUserProfile({form: { value: profileAttributes }}) {\n    const attributeNames = profileAttributes.map(({name}) => name);\n    const data = attributeNames.reduce((attributeValues, attributeName) => (\n      this.values[attributeName] ? {\n      ...attributeValues,\n      [attributeName]: this.values[attributeName]\n    } : attributeValues), {});\n    if (Object.keys(data).length === 0) {\n      return;\n    }\n    return data;\n  }\n\n  getInputUserProfile(input) {\n    return [...input.form.value];\n  }\n\n  getErrorMessages(errorRemediation) {\n    return errorRemediation.value[0].form.value.reduce((errors, field) => {\n      if (field.messages) {\n        errors.push(field.messages.value[0].message);\n      }\n      return errors;\n    }, []);\n  }\n}"]},"metadata":{},"sourceType":"module"}