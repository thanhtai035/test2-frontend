{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport ProfileTransaction from './transactions/ProfileTransaction.js';\nimport ProfileSchemaTransaction from './transactions/ProfileSchemaTransaction.js';\nimport EmailTransaction from './transactions/EmailTransaction.js';\nimport EmailStatusTransaction from './transactions/EmailStatusTransaction.js';\nimport EmailChallengeTransaction from './transactions/EmailChallengeTransaction.js';\nimport PhoneTransaction from './transactions/PhoneTransaction.js';\nimport BaseTransaction from './transactions/Base.js';\nimport { httpRequest } from '../http/request.js';\nimport AuthApiError from '../errors/AuthApiError.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\n\nvar parseInsufficientAuthenticationError = function parseInsufficientAuthenticationError(header) {\n  if (!header) {\n    throw new AuthSdkError('Missing header string');\n  }\n\n  return header.split(',').map(function (part) {\n    return part.trim();\n  }).map(function (part) {\n    return part.split('=');\n  }).reduce(function (acc, curr) {\n    acc[curr[0]] = curr[1].replace(/^\"(.*)\"$/, '$1');\n    return acc;\n  }, {});\n};\n\nfunction sendRequest(_x, _x2) {\n  return _sendRequest.apply(this, arguments);\n}\n\nfunction _sendRequest() {\n  _sendRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(oktaAuth, options) {\n    var _a, _b, _oktaAuth$tokenManage, accessTokenObj, idTokenObj, idToken, accessToken, issuer, url, method, payload, requestUrl, res, errorResp, _parseInsufficientAut, error, error_description, max_age, insufficientAuthenticationError, map, TransactionClass;\n\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _oktaAuth$tokenManage = oktaAuth.tokenManager.getTokensSync(), accessTokenObj = _oktaAuth$tokenManage.accessToken, idTokenObj = _oktaAuth$tokenManage.idToken;\n            idToken = idTokenObj === null || idTokenObj === void 0 ? void 0 : idTokenObj.idToken;\n            accessToken = options.accessToken || (accessTokenObj === null || accessTokenObj === void 0 ? void 0 : accessTokenObj.accessToken);\n            issuer = oktaAuth.options.issuer;\n            url = options.url, method = options.method, payload = options.payload;\n            requestUrl = url.startsWith(issuer) ? url : \"\".concat(issuer).concat(url);\n\n            if (accessToken) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw new AuthSdkError('AccessToken is required to request MyAccount API endpoints.');\n\n          case 8:\n            _context3.prev = 8;\n            _context3.next = 11;\n            return httpRequest(oktaAuth, Object.assign({\n              headers: {\n                'Accept': '*/*;okta-version=1.0.0'\n              },\n              accessToken: accessToken,\n              url: requestUrl,\n              method: method\n            }, payload && {\n              args: payload\n            }));\n\n          case 11:\n            res = _context3.sent;\n            _context3.next = 28;\n            break;\n\n          case 14:\n            _context3.prev = 14;\n            _context3.t0 = _context3[\"catch\"](8);\n            errorResp = _context3.t0.xhr;\n\n            if (!(idToken && (errorResp === null || errorResp === void 0 ? void 0 : errorResp.status) === 403 && !!((_a = errorResp === null || errorResp === void 0 ? void 0 : errorResp.headers) === null || _a === void 0 ? void 0 : _a['www-authenticate']))) {\n              _context3.next = 27;\n              break;\n            }\n\n            _parseInsufficientAut = parseInsufficientAuthenticationError((_b = errorResp === null || errorResp === void 0 ? void 0 : errorResp.headers) === null || _b === void 0 ? void 0 : _b['www-authenticate']), error = _parseInsufficientAut.error, error_description = _parseInsufficientAut.error_description, max_age = _parseInsufficientAut.max_age;\n\n            if (!(error === 'insufficient_authentication_context')) {\n              _context3.next = 24;\n              break;\n            }\n\n            insufficientAuthenticationError = new AuthApiError({\n              errorSummary: error,\n              errorCauses: [{\n                errorSummary: error_description\n              }]\n            }, errorResp, {\n              max_age: +max_age\n            });\n            throw insufficientAuthenticationError;\n\n          case 24:\n            throw _context3.t0;\n\n          case 25:\n            _context3.next = 28;\n            break;\n\n          case 27:\n            throw _context3.t0;\n\n          case 28:\n            map = {\n              EmailTransaction: EmailTransaction,\n              EmailStatusTransaction: EmailStatusTransaction,\n              EmailChallengeTransaction: EmailChallengeTransaction,\n              ProfileTransaction: ProfileTransaction,\n              ProfileSchemaTransaction: ProfileSchemaTransaction,\n              PhoneTransaction: PhoneTransaction\n            };\n            TransactionClass = map[options.transactionClassName] || BaseTransaction;\n\n            if (!Array.isArray(res)) {\n              _context3.next = 32;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", res.map(function (item) {\n              return new TransactionClass(oktaAuth, {\n                res: item,\n                accessToken: accessToken\n              });\n            }));\n\n          case 32:\n            return _context3.abrupt(\"return\", new TransactionClass(oktaAuth, {\n              res: res,\n              accessToken: accessToken\n            }));\n\n          case 33:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[8, 14]]);\n  }));\n  return _sendRequest.apply(this, arguments);\n}\n\nfunction generateRequestFnFromLinks(_ref) {\n  var oktaAuth = _ref.oktaAuth,\n      accessToken = _ref.accessToken,\n      methodName = _ref.methodName,\n      links = _ref.links,\n      transactionClassName = _ref.transactionClassName;\n\n  var _loop = function _loop() {\n    var method = _arr[_i];\n\n    if (method.toLowerCase() === methodName) {\n      var _link = links.self;\n      return {\n        v: function () {\n          var _v = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(payload) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    return _context.abrupt(\"return\", sendRequest(oktaAuth, {\n                      accessToken: accessToken,\n                      url: _link.href,\n                      method: method,\n                      payload: payload,\n                      transactionClassName: transactionClassName\n                    }));\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function v(_x3) {\n            return _v.apply(this, arguments);\n          }\n\n          return v;\n        }()\n      };\n    }\n  };\n\n  for (var _i = 0, _arr = ['GET', 'POST', 'PUT', 'DELETE']; _i < _arr.length; _i++) {\n    var _ret = _loop();\n\n    if (typeof _ret === \"object\") return _ret.v;\n  }\n\n  var link = links[methodName];\n\n  if (!link) {\n    throw new AuthSdkError(\"No link is found with methodName: \".concat(methodName));\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(payload) {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", sendRequest(oktaAuth, {\n                accessToken: accessToken,\n                url: link.href,\n                method: link.hints.allow[0],\n                payload: payload,\n                transactionClassName: transactionClassName\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nexport { generateRequestFnFromLinks, sendRequest };","map":{"version":3,"mappings":"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","names":["parseInsufficientAuthenticationError","header","AuthSdkError","split","map","part","trim","reduce","acc","curr","replace","sendRequest","oktaAuth","options","tokenManager","getTokensSync","accessTokenObj","accessToken","idTokenObj","idToken","issuer","url","method","payload","requestUrl","startsWith","httpRequest","Object","headers","args","res","errorResp","xhr","status","_a","_b","error","error_description","max_age","insufficientAuthenticationError","AuthApiError","errorSummary","errorCauses","EmailTransaction","EmailStatusTransaction","EmailChallengeTransaction","ProfileTransaction","ProfileSchemaTransaction","PhoneTransaction","TransactionClass","transactionClassName","BaseTransaction","Array","isArray","item","methodName","links","toLowerCase","link","self","href","hints","allow"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\myaccount\\request.ts"],"sourcesContent":["import { \n  BaseTransaction,\n  EmailTransaction,\n  EmailStatusTransaction,\n  EmailChallengeTransaction,\n  ProfileTransaction,\n  ProfileSchemaTransaction,\n  PhoneTransaction\n} from './transactions';\nimport { httpRequest } from '../http';\nimport { AuthApiError, AuthSdkError } from '../errors';\nimport { MyAccountRequestOptions as RequestOptions } from './types';\nimport { OktaAuthInterface } from '../types';\n\nexport type TransactionLink = {\n  href: string;\n  hints?: {\n    allow?: string[];\n  };\n}\n\ntype TransactionLinks = {\n  self: TransactionLink;\n  [property: string]: TransactionLink;\n}\n\ntype SendRequestOptions = RequestOptions & {\n  url: string;\n  method: string;\n  transactionClassName?: string;\n}\n\ntype InsufficientAuthenticationError = {\n  error: string;\n  // eslint-disable-next-line camelcase\n  error_description: string;\n  // eslint-disable-next-line camelcase\n  max_age: string;\n}\n\nconst parseInsufficientAuthenticationError = (\n  header: string\n): InsufficientAuthenticationError => {\n  if (!header) {\n    throw new AuthSdkError('Missing header string');\n  }\n\n  return header\n    .split(',')\n    .map(part => part.trim())\n    .map(part => part.split('='))\n    .reduce((acc, curr) => {\n      // unwrap quotes from value\n      acc[curr[0]] = curr[1].replace(/^\"(.*)\"$/, '$1');\n      return acc;\n    }, {}) as InsufficientAuthenticationError;\n};\n\n/* eslint-disable complexity */\nexport async function sendRequest<T extends BaseTransaction> (\n  oktaAuth: OktaAuthInterface, \n  options: SendRequestOptions\n): Promise<T | T[]> {\n  const { \n    accessToken: accessTokenObj,\n    idToken: idTokenObj \n  } = oktaAuth.tokenManager.getTokensSync();\n  \n  const idToken = idTokenObj?.idToken;\n  const accessToken = options.accessToken || accessTokenObj?.accessToken;\n  const { issuer } = oktaAuth.options;\n  const { url, method, payload } = options;\n  const requestUrl = url.startsWith(issuer!) ? url : `${issuer}${url}`;\n\n  if (!accessToken) {\n    throw new AuthSdkError('AccessToken is required to request MyAccount API endpoints.');\n  }\n  \n  let res;\n  try {\n    res = await httpRequest(oktaAuth, {\n      headers: { 'Accept': '*/*;okta-version=1.0.0' },\n      accessToken,\n      url: requestUrl,\n      method,\n      ...(payload && { args: payload })\n    });\n  } catch (err) {\n    const errorResp = (err as AuthApiError).xhr;\n    if (idToken && errorResp?.status === 403 && !!errorResp?.headers?.['www-authenticate']) {\n      const { \n        error, \n        // eslint-disable-next-line camelcase\n        error_description,\n        // eslint-disable-next-line camelcase\n        max_age \n      } = parseInsufficientAuthenticationError(errorResp?.headers?.['www-authenticate']);\n      if (error === 'insufficient_authentication_context') {\n        const insufficientAuthenticationError = new AuthApiError(\n          { \n            errorSummary: error,\n            // eslint-disable-next-line camelcase\n            errorCauses: [{ errorSummary: error_description }]\n          }, \n          errorResp, \n          // eslint-disable-next-line camelcase\n          { max_age: +max_age }\n        );\n        throw insufficientAuthenticationError;\n      } else {\n        throw err;\n      }\n    } else {\n      throw err;\n    }\n  }\n\n  const map = {\n    EmailTransaction,\n    EmailStatusTransaction,\n    EmailChallengeTransaction,\n    ProfileTransaction,\n    ProfileSchemaTransaction,\n    PhoneTransaction\n  };\n  const TransactionClass = map[options.transactionClassName!] || BaseTransaction;\n\n  if (Array.isArray(res)) {\n    return res.map(item => new TransactionClass(oktaAuth, { \n      res: item, \n      accessToken\n    }));\n  }\n\n  return new TransactionClass(oktaAuth, { \n    res, \n    accessToken\n  });\n}\n/* eslint-enable complexity */\n\nexport type GenerateRequestFnFromLinksOptions = {\n  oktaAuth: OktaAuthInterface;\n  accessToken: string;\n  methodName: string;\n  links: TransactionLinks;\n  transactionClassName?: string;\n}\n\ntype IRequestFnFromLinks = <T extends BaseTransaction>(payload?) => Promise<T | T[]>;\n\nexport function generateRequestFnFromLinks ({\n  oktaAuth, \n  accessToken,\n  methodName,\n  links,\n  transactionClassName\n}: GenerateRequestFnFromLinksOptions): IRequestFnFromLinks {\n  for (const method of ['GET', 'POST', 'PUT', 'DELETE']) {\n    if (method.toLowerCase() === methodName) {\n      const link = links.self;\n      return (async (payload?) => sendRequest(oktaAuth, {\n        accessToken,\n        url: link.href,\n        method,\n        payload,\n        transactionClassName\n      }));\n    }\n  }\n  \n  const link = links[methodName];\n  if (!link) {\n    throw new AuthSdkError(`No link is found with methodName: ${methodName}`);\n  }\n\n  return (async (payload?) => sendRequest(oktaAuth, {\n    accessToken,\n    url: link.href,\n    method: link.hints!.allow![0],\n    payload,\n    transactionClassName\n  }));\n}\n"]},"metadata":{},"sourceType":"module"}