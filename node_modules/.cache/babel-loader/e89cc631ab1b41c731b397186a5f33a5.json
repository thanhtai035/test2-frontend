{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { validateVersionConfig, makeIdxState } from './idxState/index.js';\nimport { isRawIdxResponse } from './types/idx-js.js';\nimport { isAuthApiError } from '../errors/index.js';\nimport { httpRequest } from '../http/request.js';\nimport { getOAuthDomain } from '../oidc/util/oauth.js';\nimport { IDX_API_VERSION } from '../constants.js';\nimport './types/api.js';\nimport '../myaccount/types.js';\n\nasync function introspect(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  let rawIdxResponse;\n  let requestDidSucceed;\n  const savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n\n  if (savedIdxResponse) {\n    rawIdxResponse = savedIdxResponse.rawIdxResponse;\n    requestDidSucceed = savedIdxResponse.requestDidSucceed;\n  }\n\n  if (!rawIdxResponse) {\n    const version = options.version || IDX_API_VERSION;\n    const domain = getOAuthDomain(authClient);\n    const {\n      interactionHandle,\n      stateHandle\n    } = options;\n    const withCredentials = (_a = options.withCredentials) !== null && _a !== void 0 ? _a : true;\n\n    try {\n      requestDidSucceed = true;\n      validateVersionConfig(version);\n      const url = `${domain}/idp/idx/introspect`;\n      const body = stateHandle ? {\n        stateToken: stateHandle\n      } : {\n        interactionHandle\n      };\n      const headers = {\n        'Content-Type': `application/ion+json; okta-version=${version}`,\n        Accept: `application/ion+json; okta-version=${version}`\n      };\n      rawIdxResponse = await httpRequest(authClient, {\n        method: 'POST',\n        url,\n        headers,\n        withCredentials,\n        args: body\n      });\n    } catch (err) {\n      if (isAuthApiError(err) && err.xhr && isRawIdxResponse(err.xhr.responseJSON)) {\n        rawIdxResponse = err.xhr.responseJSON;\n        requestDidSucceed = false;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  const {\n    withCredentials\n  } = options;\n  return makeIdxState(authClient, rawIdxResponse, {\n    withCredentials\n  }, requestDidSucceed);\n}\n\nexport { introspect };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAqBO,eAAeA,UAAf,CACLC,UADK,EAE0B;EAAA,IAA/BC,OAA+B,uEAAF,EAAE;;;;EAE/B,IAAIC,cAAJ;EACA,IAAIC,iBAAJ;EAGA,MAAMC,gBAAgB,GAAGJ,UAAU,CAACK,kBAAX,CAA8BC,eAA9B,CAA8CL,OAA9C,CAAzB;;EACA,IAAIG,gBAAJ,EAAsB;IACpBF,cAAc,GAAGE,gBAAgB,CAACF,cAAlC;IACAC,iBAAiB,GAAGC,gBAAgB,CAACD,iBAArC;EACD;;EAGD,IAAI,CAACD,cAAL,EAAqB;IACnB,MAAMK,OAAO,GAAGN,OAAO,CAACM,OAAR,IAAmBC,eAAnC;IACA,MAAMC,MAAM,GAAGC,cAAc,CAACV,UAAD,CAA7B;IACA,MAAM;MAAEW,iBAAF;MAAqBC;IAArB,IAAqCX,OAA3C;IACA,MAAMY,eAAe,GAAG,aAAO,CAACA,eAAR,MAAuB,IAAvB,IAAuBC,aAAvB,GAAuBA,EAAvB,GAA2B,IAAnD;;IACA,IAAI;MACFX,iBAAiB,GAAG,IAApB;MACAY,qBAAqB,CAACR,OAAD,CAArB;MACA,MAAMS,GAAG,GAAM,SAAM,qBAArB;MACA,MAAMC,IAAI,GAAGL,WAAW,GAAG;QAAEM,UAAU,EAAEN;MAAd,CAAH,GAAiC;QAAED;MAAF,CAAzD;MACA,MAAMQ,OAAO,GAAG;QACd,gBAAsD,6CAAS,EADjD;QAEdC,MAAM,EAAwC,6CAAS;MAFzC,CAAhB;MAIAlB,cAAc,GAAG,MAAMmB,WAAW,CAACrB,UAAD,EAAa;QAC7CsB,MAAM,EAAE,MADqC;QAE7CN,GAF6C;QAG7CG,OAH6C;QAI7CN,eAJ6C;QAK7CU,IAAI,EAAEN;MALuC,CAAb,CAAlC;IAOD,CAhBD,CAgBE,OAAOO,GAAP,EAAY;MACZ,IAAIC,cAAc,CAACD,GAAD,CAAd,IAAuBA,GAAG,CAACE,GAA3B,IAAkCC,gBAAgB,CAACH,GAAG,CAACE,GAAJ,CAAQE,YAAT,CAAtD,EAA8E;QAC5E1B,cAAc,GAAGsB,GAAG,CAACE,GAAJ,CAAQE,YAAzB;QACAzB,iBAAiB,GAAG,KAApB;MACD,CAHD,MAGO;QACL,MAAMqB,GAAN;MACD;IACF;EACF;;EAED,MAAM;IAAEX;EAAF,IAAsBZ,OAA5B;EACA,OAAO4B,YAAY,CAAC7B,UAAD,EAAaE,cAAb,EAA6B;IAAEW;EAAF,CAA7B,EAAkDV,iBAAlD,CAAnB;AACF","names":["introspect","authClient","options","rawIdxResponse","requestDidSucceed","savedIdxResponse","transactionManager","loadIdxResponse","version","IDX_API_VERSION","domain","getOAuthDomain","interactionHandle","stateHandle","withCredentials","_a","validateVersionConfig","url","body","stateToken","headers","Accept","httpRequest","method","args","err","isAuthApiError","xhr","isRawIdxResponse","responseJSON","makeIdxState"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\introspect.ts"],"sourcesContent":["/* eslint-disable complexity */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { makeIdxState, validateVersionConfig } from './idxState';\nimport { IntrospectOptions, OktaAuthIdxInterface } from '../types';\nimport { IdxResponse, isRawIdxResponse } from './types/idx-js';\nimport { getOAuthDomain } from '../oidc';\nimport { IDX_API_VERSION } from '../constants';\nimport { httpRequest } from '../http';\nimport { isAuthApiError } from '../errors';\n\nexport async function introspect (\n  authClient: OktaAuthIdxInterface, \n  options: IntrospectOptions = {}\n): Promise<IdxResponse> {\n  let rawIdxResponse;\n  let requestDidSucceed;\n\n  // try load from storage first\n  const savedIdxResponse = authClient.transactionManager.loadIdxResponse(options);\n  if (savedIdxResponse) {\n    rawIdxResponse = savedIdxResponse.rawIdxResponse;\n    requestDidSucceed = savedIdxResponse.requestDidSucceed;\n  }\n\n  // call idx.introspect if no existing idx response available in storage\n  if (!rawIdxResponse) {\n    const version = options.version || IDX_API_VERSION;\n    const domain = getOAuthDomain(authClient);\n    const { interactionHandle, stateHandle } = options;\n    const withCredentials = options.withCredentials ?? true;\n    try {\n      requestDidSucceed = true;\n      validateVersionConfig(version);\n      const url = `${domain}/idp/idx/introspect`;\n      const body = stateHandle ? { stateToken: stateHandle } : { interactionHandle };\n      const headers = {\n        'Content-Type': `application/ion+json; okta-version=${version}`, // Server wants this version info\n        Accept: `application/ion+json; okta-version=${version}`,\n      };\n      rawIdxResponse = await httpRequest(authClient, {\n        method: 'POST',\n        url,\n        headers,\n        withCredentials,\n        args: body\n      });\n    } catch (err) {\n      if (isAuthApiError(err) && err.xhr && isRawIdxResponse(err.xhr.responseJSON)) {\n        rawIdxResponse = err.xhr.responseJSON;\n        requestDidSucceed = false;\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  const { withCredentials } = options;\n  return makeIdxState(authClient, rawIdxResponse, { withCredentials }, requestDidSucceed);\n}\n"]},"metadata":{},"sourceType":"module"}