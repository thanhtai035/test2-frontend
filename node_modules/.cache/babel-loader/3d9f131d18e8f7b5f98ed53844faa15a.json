{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { OktaVerifyTotp } from './OktaVerifyTotp.js';\nimport { VerificationCodeAuthenticator } from './VerificationCodeAuthenticator.js';\nimport { OktaPassword } from './OktaPassword.js';\nimport { SecurityQuestionEnrollment } from './SecurityQuestionEnrollment.js';\nimport { SecurityQuestionVerification } from './SecurityQuestionVerification.js';\nimport { WebauthnEnrollment } from './WebauthnEnrollment.js';\nimport { WebauthnVerification } from './WebauthnVerification.js';\nimport { AuthenticatorKey } from '../types/api.js';\n\nfunction getAuthenticator(remediation) {\n  var _a, _b;\n\n  const relatesTo = remediation.relatesTo;\n  const value = (relatesTo === null || relatesTo === void 0 ? void 0 : relatesTo.value) || {};\n\n  switch (value.key) {\n    case AuthenticatorKey.OKTA_PASSWORD:\n      return new OktaPassword(value);\n\n    case AuthenticatorKey.SECURITY_QUESTION:\n      if ((_a = value.contextualData) === null || _a === void 0 ? void 0 : _a.enrolledQuestion) {\n        return new SecurityQuestionVerification(value);\n      } else {\n        return new SecurityQuestionEnrollment(value);\n      }\n\n    case AuthenticatorKey.OKTA_VERIFY:\n      return new OktaVerifyTotp(value);\n\n    case AuthenticatorKey.WEBAUTHN:\n      if ((_b = value.contextualData) === null || _b === void 0 ? void 0 : _b.challengeData) {\n        return new WebauthnVerification(value);\n      } else {\n        return new WebauthnEnrollment(value);\n      }\n\n    default:\n      return new VerificationCodeAuthenticator(value);\n  }\n}\n\nexport { getAuthenticator };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAYM,SAAUA,gBAAV,CAA2BC,WAA3B,EAAsD;;;EAC1D,MAAMC,SAAS,GAAGD,WAAW,CAACC,SAA9B;EACA,MAAMC,KAAK,GAAG,UAAS,KAAT,iBAAS,KAAT,2BAAS,CAAEA,KAAX,KAAoB,EAAlC;;EACA,QAAQA,KAAK,CAACC,GAAd;IACE,KAAKC,gBAAgB,CAACC,aAAtB;MACE,OAAO,IAAIC,YAAJ,CAAiBJ,KAAjB,CAAP;;IACF,KAAKE,gBAAgB,CAACG,iBAAtB;MACE,IAAI,WAAK,CAACC,cAAN,MAAoB,IAApB,IAAoBC,aAApB,GAAoB,MAApB,GAAoBA,GAAEC,gBAA1B,EAA4C;QAC1C,OAAO,IAAIC,4BAAJ,CAAiCT,KAAjC,CAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAIU,0BAAJ,CAA+BV,KAA/B,CAAP;MACD;;IACH,KAAKE,gBAAgB,CAACS,WAAtB;MACE,OAAO,IAAIC,cAAJ,CAAmBZ,KAAnB,CAAP;;IACF,KAAKE,gBAAgB,CAACW,QAAtB;MACE,IAAI,WAAK,CAACP,cAAN,MAAoB,IAApB,IAAoBQ,aAApB,GAAoB,MAApB,GAAoBA,GAAEC,aAA1B,EAAyC;QACvC,OAAO,IAAIC,oBAAJ,CAAyBhB,KAAzB,CAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAIiB,kBAAJ,CAAuBjB,KAAvB,CAAP;MACD;;IACH;MACE,OAAO,IAAIkB,6BAAJ,CAAkClB,KAAlC,CAAP;EAlBJ;AAoBF","names":["getAuthenticator","remediation","relatesTo","value","key","AuthenticatorKey","OKTA_PASSWORD","OktaPassword","SECURITY_QUESTION","contextualData","_a","enrolledQuestion","SecurityQuestionVerification","SecurityQuestionEnrollment","OKTA_VERIFY","OktaVerifyTotp","WEBAUTHN","_b","challengeData","WebauthnVerification","WebauthnEnrollment","VerificationCodeAuthenticator"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\authenticator\\getAuthenticator.ts"],"sourcesContent":["import { OktaVerifyTotp } from './OktaVerifyTotp';\nimport { Authenticator } from './Authenticator';\nimport { VerificationCodeAuthenticator } from './VerificationCodeAuthenticator';\nimport { OktaPassword } from './OktaPassword';\nimport { SecurityQuestionEnrollment } from './SecurityQuestionEnrollment';\nimport { SecurityQuestionVerification } from './SecurityQuestionVerification';\nimport { WebauthnEnrollment } from './WebauthnEnrollment';\nimport { WebauthnVerification } from './WebauthnVerification';\nimport { IdxAuthenticator, IdxRemediation } from '../types/idx-js';\nimport { AuthenticatorKey } from '../types';\n\n/* eslint complexity:[0,8] */\nexport function getAuthenticator(remediation: IdxRemediation): Authenticator<any> {\n  const relatesTo = remediation.relatesTo;\n  const value = relatesTo?.value || {} as IdxAuthenticator;\n  switch (value.key) {\n    case AuthenticatorKey.OKTA_PASSWORD:\n      return new OktaPassword(value);\n    case AuthenticatorKey.SECURITY_QUESTION:\n      if (value.contextualData?.enrolledQuestion) {\n        return new SecurityQuestionVerification(value);\n      } else {\n        return new SecurityQuestionEnrollment(value);\n      }\n    case AuthenticatorKey.OKTA_VERIFY:\n      return new OktaVerifyTotp(value);\n    case AuthenticatorKey.WEBAUTHN:\n      if (value.contextualData?.challengeData) {\n        return new WebauthnVerification(value);\n      } else {\n        return new WebauthnEnrollment(value);\n      }\n    default:\n      return new VerificationCodeAuthenticator(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}