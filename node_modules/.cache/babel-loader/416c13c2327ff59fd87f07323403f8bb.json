{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../idx/types/api.js';\nimport { EVENT_EXPIRED } from '../types/TokenManager.js';\nimport '../myaccount/types.js';\nimport { isBrowser } from '../features.js';\n\nclass AutoRenewService {\n  constructor(tokenManager) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.started = false;\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.renewTimeQueue = [];\n    this.onTokenExpiredHandler = this.onTokenExpiredHandler.bind(this);\n  }\n\n  shouldThrottleRenew() {\n    let res = false;\n    this.renewTimeQueue.push(Date.now());\n\n    if (this.renewTimeQueue.length >= 10) {\n      const firstTime = this.renewTimeQueue.shift();\n      const lastTime = this.renewTimeQueue[this.renewTimeQueue.length - 1];\n      res = lastTime - firstTime < 30 * 1000;\n    }\n\n    return res;\n  }\n\n  requiresLeadership() {\n    return !!this.options.syncStorage && isBrowser();\n  }\n\n  onTokenExpiredHandler(key) {\n    if (this.options.autoRenew) {\n      if (this.shouldThrottleRenew()) {\n        const error = new AuthSdkError('Too many token renew requests');\n        this.tokenManager.emitError(error);\n      } else {\n        this.tokenManager.renew(key).catch(() => {});\n      }\n    } else if (this.options.autoRemove) {\n      this.tokenManager.remove(key);\n    }\n  }\n\n  canStart() {\n    return !!this.options.autoRenew || !!this.options.autoRemove;\n  }\n\n  async start() {\n    if (this.canStart()) {\n      await this.stop();\n      this.tokenManager.on(EVENT_EXPIRED, this.onTokenExpiredHandler);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      this.tokenManager.off(EVENT_EXPIRED, this.onTokenExpiredHandler);\n      this.renewTimeQueue = [];\n      this.started = false;\n    }\n  }\n\n  isStarted() {\n    return this.started;\n  }\n\n}\n\nexport { AutoRenewService };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;MAkBaA,iBAAgB;EAM3BC,WAAY,eAA+D;IAAA,IAAnCC,OAAmC,uEAAF,EAAE;IAFnE,KAAOC,OAAP,GAAU,KAAV;IAGN,KAAKC,YAAL,GAAoBA,YAApB;IACA,KAAKF,OAAL,GAAeA,OAAf;IACA,KAAKG,cAAL,GAAsB,EAAtB;IACA,KAAKC,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAA7B;EACD;;EAEOC,mBAAmB;IACzB,IAAIC,GAAG,GAAG,KAAV;IACA,KAAKJ,cAAL,CAAoBK,IAApB,CAAyBC,IAAI,CAACC,GAAL,EAAzB;;IACA,IAAI,KAAKP,cAAL,CAAoBQ,MAApB,IAA8B,EAAlC,EAAsC;MAEpC,MAAMC,SAAS,GAAG,KAAKT,cAAL,CAAoBU,KAApB,EAAlB;MACA,MAAMC,QAAQ,GAAG,KAAKX,cAAL,CAAoB,KAAKA,cAAL,CAAoBQ,MAApB,GAA6B,CAAjD,CAAjB;MACAJ,GAAG,GAAIO,QAAQ,GAAGF,SAAZ,GAAyB,KAAK,IAApC;IACD;;IACD,OAAOL,GAAP;EACD;;EAEDQ,kBAAkB;IAEhB,OAAO,CAAC,CAAC,KAAKf,OAAL,CAAagB,WAAf,IAA8BC,SAAS,EAA9C;EACD;;EAEOb,qBAAqB,CAACc,GAAD,EAAY;IACvC,IAAI,KAAKlB,OAAL,CAAamB,SAAjB,EAA4B;MAC1B,IAAI,KAAKb,mBAAL,EAAJ,EAAgC;QAC9B,MAAMc,KAAK,GAAG,IAAIC,YAAJ,CAAiB,+BAAjB,CAAd;QACA,KAAKnB,YAAL,CAAkBoB,SAAlB,CAA4BF,KAA5B;MACD,CAHD,MAGO;QACL,KAAKlB,YAAL,CAAkBqB,KAAlB,CAAwBL,GAAxB,EAA6BM,KAA7B,CAAmC,MAAK,CAAG,CAA3C;MACD;IACF,CAPD,MAOO,IAAI,KAAKxB,OAAL,CAAayB,UAAjB,EAA6B;MAClC,KAAKvB,YAAL,CAAkBwB,MAAlB,CAAyBR,GAAzB;IACD;EACF;;EAEDS,QAAQ;IACN,OAAQ,CAAC,CAAC,KAAK3B,OAAL,CAAamB,SAAf,IAA4B,CAAC,CAAC,KAAKnB,OAAL,CAAayB,UAAnD;EACD;;EAEU,MAALG,KAAK;IACT,IAAI,KAAKD,QAAL,EAAJ,EAAqB;MACnB,MAAM,KAAKE,IAAL,EAAN;MACA,KAAK3B,YAAL,CAAkB4B,EAAlB,CAAqBC,aAArB,EAAoC,KAAK3B,qBAAzC;MACA,KAAKH,OAAL,GAAe,IAAf;IACD;EACF;;EAES,MAAJ4B,IAAI;IACR,IAAI,KAAK5B,OAAT,EAAkB;MAChB,KAAKC,YAAL,CAAkB8B,GAAlB,CAAsBD,aAAtB,EAAqC,KAAK3B,qBAA1C;MACA,KAAKD,cAAL,GAAsB,EAAtB;MACA,KAAKF,OAAL,GAAe,KAAf;IACD;EACF;;EAEDgC,SAAS;IACP,OAAO,KAAKhC,OAAZ;EACD;;AAjE0B","names":["AutoRenewService","constructor","options","started","tokenManager","renewTimeQueue","onTokenExpiredHandler","bind","shouldThrottleRenew","res","push","Date","now","length","firstTime","shift","lastTime","requiresLeadership","syncStorage","isBrowser","key","autoRenew","error","AuthSdkError","emitError","renew","catch","autoRemove","remove","canStart","start","stop","on","EVENT_EXPIRED","off","isStarted"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\services\\AutoRenewService.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { TokenManager } from '../TokenManager';\nimport { AuthSdkError } from '../errors';\nimport { ServiceInterface, ServiceManagerOptions, EVENT_EXPIRED } from '../types';\nimport { isBrowser } from '../features';\n\nexport class AutoRenewService implements ServiceInterface {\n  private tokenManager: TokenManager;\n  private options: ServiceManagerOptions;\n  private renewTimeQueue: Array<number>;\n  private started = false;\n\n  constructor(tokenManager: TokenManager, options: ServiceManagerOptions = {}) {\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.renewTimeQueue = [];\n    this.onTokenExpiredHandler = this.onTokenExpiredHandler.bind(this);\n  }\n  \n  private shouldThrottleRenew(): boolean {\n    let res = false;\n    this.renewTimeQueue.push(Date.now());\n    if (this.renewTimeQueue.length >= 10) {\n      // get and remove first item from queue\n      const firstTime = this.renewTimeQueue.shift() as number;\n      const lastTime = this.renewTimeQueue[this.renewTimeQueue.length - 1];\n      res = (lastTime - firstTime) < 30 * 1000;\n    }\n    return res;\n  }\n\n  requiresLeadership() {\n    // If tokens sync storage is enabled, handle tokens expiration only in 1 leader tab\n    return !!this.options.syncStorage && isBrowser();\n  }\n\n  private onTokenExpiredHandler(key: string) {\n    if (this.options.autoRenew) {\n      if (this.shouldThrottleRenew()) {\n        const error = new AuthSdkError('Too many token renew requests');\n        this.tokenManager.emitError(error);\n      } else {\n        this.tokenManager.renew(key).catch(() => {}); // Renew errors will emit an \"error\" event \n      }\n    } else if (this.options.autoRemove) {\n      this.tokenManager.remove(key);\n    }\n  }\n\n  canStart() {\n    return (!!this.options.autoRenew || !!this.options.autoRemove);\n  }\n\n  async start() {\n    if (this.canStart()) {\n      await this.stop();\n      this.tokenManager.on(EVENT_EXPIRED, this.onTokenExpiredHandler);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      this.tokenManager.off(EVENT_EXPIRED, this.onTokenExpiredHandler);\n      this.renewTimeQueue = [];\n      this.started = false;\n    }\n  }\n\n  isStarted() {\n    return this.started;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}