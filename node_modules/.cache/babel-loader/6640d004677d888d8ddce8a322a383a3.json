{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { isAuthenticator } from '../types/api.js';\n\nfunction formatAuthenticator(incoming) {\n  let authenticator;\n\n  if (isAuthenticator(incoming)) {\n    authenticator = incoming;\n  } else if (typeof incoming === 'string') {\n    authenticator = {\n      key: incoming\n    };\n  } else {\n    throw new Error('Invalid format for authenticator');\n  }\n\n  return authenticator;\n}\n\nfunction compareAuthenticators(auth1, auth2) {\n  if (!auth1 || !auth2) {\n    return false;\n  }\n\n  if (auth1.id && auth2.id) {\n    return auth1.id === auth2.id;\n  }\n\n  if (auth1.key && auth2.key) {\n    return auth1.key === auth2.key;\n  }\n\n  return false;\n}\n\nfunction findMatchedOption(authenticators, options) {\n  let option;\n\n  for (let authenticator of authenticators) {\n    option = options.find(_ref => {\n      let {\n        relatesTo\n      } = _ref;\n      return relatesTo.key === authenticator.key;\n    });\n\n    if (option) {\n      break;\n    }\n  }\n\n  return option;\n}\n\nexport { compareAuthenticators, findMatchedOption, formatAuthenticator };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAEM,SAAUA,mBAAV,CAA8BC,QAA9B,EAA+C;EACnD,IAAIC,aAAJ;;EACA,IAAKC,eAAe,CAACF,QAAD,CAApB,EAAgC;IAC9BC,aAAa,GAAGD,QAAhB;EACD,CAFD,MAEO,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;IACvCC,aAAa,GAAG;MACdE,GAAG,EAAEH;IADS,CAAhB;EAGD,CAJM,MAIA;IACL,MAAM,IAAII,KAAJ,CAAU,kCAAV,CAAN;EACD;;EACD,OAAOH,aAAP;AACD;;AAGe,+BAAsBI,KAAtB,EAA6BC,KAA7B,EAAkC;EAChD,IAAI,CAACD,KAAD,IAAU,CAACC,KAAf,EAAsB;IACpB,OAAO,KAAP;EACD;;EAED,IAAID,KAAK,CAACE,EAAN,IAAYD,KAAK,CAACC,EAAtB,EAA0B;IACxB,OAAQF,KAAK,CAACE,EAAN,KAAaD,KAAK,CAACC,EAA3B;EACD;;EAED,IAAIF,KAAK,CAACF,GAAN,IAAaG,KAAK,CAACH,GAAvB,EAA4B;IAC1B,OAAQE,KAAK,CAACF,GAAN,KAAcG,KAAK,CAACH,GAA5B;EACD;;EACD,OAAO,KAAP;AACD;;AAGe,2BAAkBK,cAAlB,EAAkCC,OAAlC,EAAyC;EACvD,IAAIC,MAAJ;;EACA,KAAK,IAAIT,aAAT,IAA0BO,cAA1B,EAA0C;IACxCE,MAAM,GAAGD,OAAO,CACbE,IADM,CACD;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAmBA,SAAS,CAACT,GAAV,KAAkBF,aAAa,CAACE,GAAnD;IAAA,CADC,CAAT;;IAEA,IAAIO,MAAJ,EAAY;MACV;IACD;EACF;;EACD,OAAOA,MAAP;AACF","names":["formatAuthenticator","incoming","authenticator","isAuthenticator","key","Error","auth1","auth2","id","authenticators","options","option","find","relatesTo"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\authenticator\\util.ts"],"sourcesContent":["import { Authenticator, isAuthenticator } from '../types';\n\nexport function formatAuthenticator(incoming: unknown): Authenticator {\n  let authenticator: Authenticator;\n  if  (isAuthenticator(incoming)) {\n    authenticator = incoming;\n  } else if (typeof incoming === 'string') {\n    authenticator = {\n      key: incoming\n    };\n  } else {\n    throw new Error('Invalid format for authenticator');\n  }\n  return authenticator;\n}\n\n// Returns true if the authenticators are equivalent\nexport function compareAuthenticators(auth1, auth2) {\n  if (!auth1 || !auth2) {\n    return false;\n  }\n  // by id\n  if (auth1.id && auth2.id) {\n    return (auth1.id === auth2.id);\n  }\n  // by key\n  if (auth1.key && auth2.key) {\n    return (auth1.key === auth2.key);\n  }\n  return false;\n}\n\n// Find matched authenticator in provided order\nexport function findMatchedOption(authenticators, options) {\n  let option;\n  for (let authenticator of authenticators) {\n    option = options\n      .find(({ relatesTo }) => relatesTo.key === authenticator.key);\n    if (option) {\n      break;\n    }\n  }\n  return option;\n}"]},"metadata":{},"sourceType":"module"}