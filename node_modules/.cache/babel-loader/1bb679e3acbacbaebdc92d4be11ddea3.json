{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { interact } from './interact.js';\nimport { introspect } from './introspect.js';\nimport { remediate } from './remediate.js';\nimport { IdxStatus } from './types/api.js';\nimport './remediators/EnrollAuthenticator.js';\nimport './remediators/EnrollPoll.js';\nimport './remediators/SelectEnrollmentChannel.js';\nimport './remediators/EnrollmentChannelData.js';\nimport './remediators/ChallengeAuthenticator.js';\nimport './remediators/ChallengePoll.js';\nimport './remediators/ResetAuthenticator.js';\nimport './remediators/EnrollProfile.js';\nimport './remediators/Identify.js';\nimport './remediators/ReEnrollAuthenticator.js';\nimport './remediators/RedirectIdp.js';\nimport './remediators/SelectAuthenticatorAuthenticate.js';\nimport './remediators/SelectAuthenticatorEnroll.js';\nimport './remediators/SelectAuthenticatorUnlockAccount.js';\nimport './remediators/SelectEnrollProfile.js';\nimport './remediators/AuthenticatorVerificationData.js';\nimport './remediators/AuthenticatorEnrollmentData.js';\nimport './remediators/Skip.js';\nimport { getFlowSpecification } from './flow/FlowSpecification.js';\nimport '../myaccount/types.js';\nimport { isIdxResponse } from './types/idx-js.js';\nimport { saveTransactionMeta, getSavedTransactionMeta } from './transactionMeta.js';\nimport { getEnabledFeatures, getAvailableSteps, getMessagesFromResponse, isTerminalResponse } from './util.js';\n\nfunction initializeValues(options) {\n  var knownOptions = ['flow', 'remediators', 'actions', 'withCredentials', 'step', 'useGenericRemediator', 'exchangeCodeForTokens', 'shouldProceedWithEmailAuthenticator'];\n  var values = Object.assign({}, options);\n  knownOptions.forEach(function (option) {\n    delete values[option];\n  });\n  return values;\n}\n\nfunction initializeData(authClient, data) {\n  var options = data.options;\n  options = Object.assign(Object.assign({}, authClient.options.idx), options);\n  var _options = options,\n      flow = _options.flow,\n      withCredentials = _options.withCredentials,\n      remediators = _options.remediators,\n      actions = _options.actions;\n  var status = IdxStatus.PENDING;\n  flow = flow || authClient.idx.getFlow() || 'default';\n\n  if (flow) {\n    authClient.idx.setFlow(flow);\n    var flowSpec = getFlowSpecification(authClient, flow);\n    withCredentials = typeof withCredentials !== 'undefined' ? withCredentials : flowSpec.withCredentials;\n    remediators = remediators || flowSpec.remediators;\n    actions = actions || flowSpec.actions;\n  }\n\n  return Object.assign(Object.assign({}, data), {\n    options: Object.assign(Object.assign({}, options), {\n      flow: flow,\n      withCredentials: withCredentials,\n      remediators: remediators,\n      actions: actions\n    }),\n    status: status\n  });\n}\n\nfunction getDataFromIntrospect(_x, _x2) {\n  return _getDataFromIntrospect.apply(this, arguments);\n}\n\nfunction _getDataFromIntrospect() {\n  _getDataFromIntrospect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient, data) {\n    var options, stateHandle, withCredentials, version, state, scopes, recoveryToken, activationToken, maxAge, idxResponse, meta, interactionHandle, interactResponse;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = data.options;\n            stateHandle = options.stateHandle, withCredentials = options.withCredentials, version = options.version, state = options.state, scopes = options.scopes, recoveryToken = options.recoveryToken, activationToken = options.activationToken, maxAge = options.maxAge;\n            meta = getSavedTransactionMeta(authClient, {\n              state: state,\n              recoveryToken: recoveryToken,\n              activationToken: activationToken\n            });\n\n            if (!stateHandle) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 6;\n            return introspect(authClient, {\n              withCredentials: withCredentials,\n              version: version,\n              stateHandle: stateHandle\n            });\n\n          case 6:\n            idxResponse = _context.sent;\n            _context.next = 20;\n            break;\n\n          case 9:\n            interactionHandle = meta === null || meta === void 0 ? void 0 : meta.interactionHandle;\n\n            if (interactionHandle) {\n              _context.next = 17;\n              break;\n            }\n\n            authClient.transactionManager.clear();\n            _context.next = 14;\n            return interact(authClient, {\n              withCredentials: withCredentials,\n              state: state,\n              scopes: scopes,\n              activationToken: activationToken,\n              recoveryToken: recoveryToken,\n              maxAge: maxAge\n            });\n\n          case 14:\n            interactResponse = _context.sent;\n            interactionHandle = interactResponse.interactionHandle;\n            meta = interactResponse.meta;\n\n          case 17:\n            _context.next = 19;\n            return introspect(authClient, {\n              withCredentials: withCredentials,\n              version: version,\n              interactionHandle: interactionHandle\n            });\n\n          case 19:\n            idxResponse = _context.sent;\n\n          case 20:\n            return _context.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n              idxResponse: idxResponse,\n              meta: meta\n            }));\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getDataFromIntrospect.apply(this, arguments);\n}\n\nfunction getDataFromRemediate(_x3, _x4) {\n  return _getDataFromRemediate.apply(this, arguments);\n}\n\nfunction _getDataFromRemediate() {\n  _getDataFromRemediate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(authClient, data) {\n    var idxResponse, options, values, autoRemediate, remediators, actions, flow, step, shouldProceedWithEmailAuthenticator, useGenericRemediator, shouldRemediate, _yield$remediate, idxResponseFromRemediation, nextStep, canceled;\n\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            idxResponse = data.idxResponse, options = data.options, values = data.values;\n            autoRemediate = options.autoRemediate, remediators = options.remediators, actions = options.actions, flow = options.flow, step = options.step, shouldProceedWithEmailAuthenticator = options.shouldProceedWithEmailAuthenticator, useGenericRemediator = options.useGenericRemediator;\n            shouldRemediate = autoRemediate !== false && (remediators || actions || step);\n\n            if (shouldRemediate) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", data);\n\n          case 5:\n            values = Object.assign(Object.assign({}, values), {\n              stateHandle: idxResponse.rawIdxState.stateHandle\n            });\n            _context2.next = 8;\n            return remediate(authClient, idxResponse, values, {\n              remediators: remediators,\n              actions: actions,\n              flow: flow,\n              step: step,\n              shouldProceedWithEmailAuthenticator: shouldProceedWithEmailAuthenticator,\n              useGenericRemediator: useGenericRemediator\n            });\n\n          case 8:\n            _yield$remediate = _context2.sent;\n            idxResponseFromRemediation = _yield$remediate.idxResponse;\n            nextStep = _yield$remediate.nextStep;\n            canceled = _yield$remediate.canceled;\n            idxResponse = idxResponseFromRemediation;\n            return _context2.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n              idxResponse: idxResponse,\n              nextStep: nextStep,\n              canceled: canceled\n            }));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getDataFromRemediate.apply(this, arguments);\n}\n\nfunction getTokens(_x5, _x6) {\n  return _getTokens.apply(this, arguments);\n}\n\nfunction _getTokens() {\n  _getTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(authClient, data) {\n    var meta, idxResponse, interactionCode, clientId, codeVerifier, ignoreSignature, redirectUri, urls, scopes, tokenResponse;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            meta = data.meta, idxResponse = data.idxResponse;\n            interactionCode = idxResponse.interactionCode;\n            clientId = meta.clientId, codeVerifier = meta.codeVerifier, ignoreSignature = meta.ignoreSignature, redirectUri = meta.redirectUri, urls = meta.urls, scopes = meta.scopes;\n            _context3.next = 5;\n            return authClient.token.exchangeCodeForTokens({\n              interactionCode: interactionCode,\n              clientId: clientId,\n              codeVerifier: codeVerifier,\n              ignoreSignature: ignoreSignature,\n              redirectUri: redirectUri,\n              scopes: scopes\n            }, urls);\n\n          case 5:\n            tokenResponse = _context3.sent;\n            return _context3.abrupt(\"return\", tokenResponse.tokens);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getTokens.apply(this, arguments);\n}\n\nfunction finalizeData(_x7, _x8) {\n  return _finalizeData.apply(this, arguments);\n}\n\nfunction _finalizeData() {\n  _finalizeData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(authClient, data) {\n    var options, idxResponse, canceled, status, exchangeCodeForTokens, shouldSaveResponse, shouldClearTransaction, clearSharedStorage, interactionCode, tokens, enabledFeatures, availableSteps, messages, terminal, hasActions, hasErrors, isTerminalSuccess;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            options = data.options, idxResponse = data.idxResponse, canceled = data.canceled, status = data.status;\n            exchangeCodeForTokens = options.exchangeCodeForTokens;\n            shouldSaveResponse = false;\n            shouldClearTransaction = false;\n            clearSharedStorage = true;\n\n            if (idxResponse) {\n              shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n              enabledFeatures = getEnabledFeatures(idxResponse);\n              availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n              messages = getMessagesFromResponse(idxResponse, options);\n              terminal = isTerminalResponse(idxResponse);\n            }\n\n            if (!terminal) {\n              _context4.next = 15;\n              break;\n            }\n\n            status = IdxStatus.TERMINAL;\n            hasActions = Object.keys(idxResponse.actions).length > 0;\n            hasErrors = !!messages.find(function (msg) {\n              return msg.class === 'ERROR';\n            });\n            isTerminalSuccess = !hasActions && !hasErrors && idxResponse.requestDidSucceed === true;\n\n            if (isTerminalSuccess) {\n              shouldClearTransaction = true;\n            } else {\n              shouldSaveResponse = shouldSaveResponse && hasActions;\n            }\n\n            clearSharedStorage = false;\n            _context4.next = 32;\n            break;\n\n          case 15:\n            if (!canceled) {\n              _context4.next = 20;\n              break;\n            }\n\n            status = IdxStatus.CANCELED;\n            shouldClearTransaction = true;\n            _context4.next = 32;\n            break;\n\n          case 20:\n            if (!(idxResponse === null || idxResponse === void 0 ? void 0 : idxResponse.interactionCode)) {\n              _context4.next = 32;\n              break;\n            }\n\n            interactionCode = idxResponse.interactionCode;\n\n            if (!(exchangeCodeForTokens === false)) {\n              _context4.next = 27;\n              break;\n            }\n\n            status = IdxStatus.SUCCESS;\n            shouldClearTransaction = false;\n            _context4.next = 32;\n            break;\n\n          case 27:\n            _context4.next = 29;\n            return getTokens(authClient, data);\n\n          case 29:\n            tokens = _context4.sent;\n            status = IdxStatus.SUCCESS;\n            shouldClearTransaction = true;\n\n          case 32:\n            return _context4.abrupt(\"return\", Object.assign(Object.assign({}, data), {\n              status: status,\n              interactionCode: interactionCode,\n              tokens: tokens,\n              shouldSaveResponse: shouldSaveResponse,\n              shouldClearTransaction: shouldClearTransaction,\n              clearSharedStorage: clearSharedStorage,\n              enabledFeatures: enabledFeatures,\n              availableSteps: availableSteps,\n              messages: messages,\n              terminal: terminal\n            }));\n\n          case 33:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _finalizeData.apply(this, arguments);\n}\n\nfunction handleError(err, data) {\n  var error = data.error,\n      status = data.status,\n      shouldClearTransaction = data.shouldClearTransaction;\n\n  if (isIdxResponse(err)) {\n    error = err;\n    status = IdxStatus.FAILURE;\n    shouldClearTransaction = true;\n  } else {\n    throw err;\n  }\n\n  return Object.assign(Object.assign({}, data), {\n    error: error,\n    status: status,\n    shouldClearTransaction: shouldClearTransaction\n  });\n}\n\nfunction run(_x9) {\n  return _run.apply(this, arguments);\n}\n\nfunction _run() {\n  _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(authClient) {\n    var options,\n        _a,\n        data,\n        _data,\n        idxResponse,\n        meta,\n        shouldSaveResponse,\n        shouldClearTransaction,\n        clearSharedStorage,\n        status,\n        enabledFeatures,\n        availableSteps,\n        tokens,\n        nextStep,\n        messages,\n        error,\n        interactionCode,\n        rawIdxResponse,\n        _requestDidSucceed,\n        _ref,\n        actions,\n        context,\n        neededToProceed,\n        proceed,\n        rawIdxState,\n        requestDidSucceed,\n        stepUp,\n        _args5 = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n            data = {\n              options: options,\n              values: initializeValues(options)\n            };\n            data = initializeData(authClient, data);\n            _context5.prev = 3;\n            _context5.next = 6;\n            return getDataFromIntrospect(authClient, data);\n\n          case 6:\n            data = _context5.sent;\n            _context5.next = 9;\n            return getDataFromRemediate(authClient, data);\n\n          case 9:\n            data = _context5.sent;\n            _context5.next = 15;\n            break;\n\n          case 12:\n            _context5.prev = 12;\n            _context5.t0 = _context5[\"catch\"](3);\n            data = handleError(_context5.t0, data);\n\n          case 15:\n            _context5.next = 17;\n            return finalizeData(authClient, data);\n\n          case 17:\n            data = _context5.sent;\n            _data = data, idxResponse = _data.idxResponse, meta = _data.meta, shouldSaveResponse = _data.shouldSaveResponse, shouldClearTransaction = _data.shouldClearTransaction, clearSharedStorage = _data.clearSharedStorage, status = _data.status, enabledFeatures = _data.enabledFeatures, availableSteps = _data.availableSteps, tokens = _data.tokens, nextStep = _data.nextStep, messages = _data.messages, error = _data.error, interactionCode = _data.interactionCode;\n\n            if (shouldClearTransaction) {\n              authClient.transactionManager.clear({\n                clearSharedStorage: clearSharedStorage\n              });\n            } else {\n              saveTransactionMeta(authClient, Object.assign({}, meta));\n\n              if (shouldSaveResponse) {\n                rawIdxResponse = idxResponse.rawIdxState, _requestDidSucceed = idxResponse.requestDidSucceed;\n                authClient.transactionManager.saveIdxResponse({\n                  rawIdxResponse: rawIdxResponse,\n                  requestDidSucceed: _requestDidSucceed,\n                  stateHandle: (_a = idxResponse.context) === null || _a === void 0 ? void 0 : _a.stateHandle,\n                  interactionHandle: meta === null || meta === void 0 ? void 0 : meta.interactionHandle\n                });\n              }\n            }\n\n            _ref = idxResponse || {}, actions = _ref.actions, context = _ref.context, neededToProceed = _ref.neededToProceed, proceed = _ref.proceed, rawIdxState = _ref.rawIdxState, requestDidSucceed = _ref.requestDidSucceed, stepUp = _ref.stepUp;\n            return _context5.abrupt(\"return\", Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({\n              status: status\n            }, meta && {\n              meta: meta\n            }), enabledFeatures && {\n              enabledFeatures: enabledFeatures\n            }), availableSteps && {\n              availableSteps: availableSteps\n            }), tokens && {\n              tokens: tokens\n            }), nextStep && {\n              nextStep: nextStep\n            }), messages && messages.length && {\n              messages: messages\n            }), error && {\n              error: error\n            }), stepUp && {\n              stepUp: stepUp\n            }), {\n              interactionCode: interactionCode,\n              actions: actions,\n              context: context,\n              neededToProceed: neededToProceed,\n              proceed: proceed,\n              rawIdxState: rawIdxState,\n              requestDidSucceed: requestDidSucceed\n            }));\n\n          case 22:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[3, 12]]);\n  }));\n  return _run.apply(this, arguments);\n}\n\nexport { run };","map":{"version":3,"mappings":"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","names":["initializeValues","options","knownOptions","values","forEach","option","initializeData","authClient","data","idx","flow","withCredentials","remediators","actions","status","IdxStatus","PENDING","getFlow","setFlow","flowSpec","getFlowSpecification","Object","getDataFromIntrospect","stateHandle","version","state","scopes","recoveryToken","activationToken","maxAge","meta","getSavedTransactionMeta","introspect","idxResponse","interactionHandle","transactionManager","clear","interact","interactResponse","getDataFromRemediate","autoRemediate","step","shouldProceedWithEmailAuthenticator","useGenericRemediator","shouldRemediate","rawIdxState","remediate","idxResponseFromRemediation","nextStep","canceled","getTokens","interactionCode","clientId","codeVerifier","ignoreSignature","redirectUri","urls","token","exchangeCodeForTokens","tokenResponse","tokens","finalizeData","shouldSaveResponse","shouldClearTransaction","clearSharedStorage","requestDidSucceed","stepUp","enabledFeatures","getEnabledFeatures","availableSteps","getAvailableSteps","messages","getMessagesFromResponse","terminal","isTerminalResponse","TERMINAL","hasActions","keys","length","hasErrors","find","msg","class","isTerminalSuccess","CANCELED","SUCCESS","handleError","err","error","isIdxResponse","FAILURE","run","saveTransactionMeta","rawIdxResponse","saveIdxResponse","context","_a","neededToProceed","proceed"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\run.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable max-statements, complexity, max-depth */\nimport { interact } from './interact';\nimport { introspect } from './introspect';\nimport { remediate } from './remediate';\nimport { getFlowSpecification } from './flow';\nimport * as remediators from './remediators';\nimport { \n  OktaAuthIdxInterface,\n  IdxStatus,\n  IdxTransaction,\n  IdxFeature,\n  NextStep,\n  RunOptions,\n  IdxTransactionMeta,\n  Tokens,\n  APIError,\n} from '../types';\nimport { IdxMessage, IdxResponse, isIdxResponse } from './types/idx-js';\nimport { getSavedTransactionMeta, saveTransactionMeta } from './transactionMeta';\nimport { getAvailableSteps, getEnabledFeatures, getMessagesFromResponse, isTerminalResponse } from './util';\ndeclare interface RunData {\n  options: RunOptions;\n  values: remediators.RemediationValues;\n  status?: IdxStatus;\n  tokens?: Tokens;\n  nextStep?: NextStep;\n  messages?: IdxMessage[];\n  error?: APIError | IdxResponse;\n  meta?: IdxTransactionMeta;\n  enabledFeatures?: IdxFeature[];\n  availableSteps?: NextStep[];\n  idxResponse?: IdxResponse;\n  canceled?: boolean;\n  interactionCode?: string;\n  shouldSaveResponse?: boolean;\n  shouldClearTransaction?: boolean;\n  clearSharedStorage?: boolean;\n  terminal?: boolean;\n}\n\nfunction initializeValues(options: RunOptions) {\n  // remove known options, everything else is assumed to be a value\n  const knownOptions = [\n    'flow', \n    'remediators', \n    'actions', \n    'withCredentials', \n    'step',\n    'useGenericRemediator',\n    'exchangeCodeForTokens',\n    'shouldProceedWithEmailAuthenticator'\n  ];\n  const values = { ...options };\n  knownOptions.forEach(option => {\n    delete values[option];\n  });\n  return values;\n}\n\nfunction initializeData(authClient, data: RunData): RunData {\n  let { options } = data;\n  options = {\n    ...authClient.options.idx,\n    ...options\n  };\n  let {\n    flow,\n    withCredentials,\n    remediators,\n    actions,\n  } = options;\n\n  const status = IdxStatus.PENDING;\n\n  // certain options can be set by the flow specification\n  flow = flow || authClient.idx.getFlow() || 'default';\n  if (flow) {\n    authClient.idx.setFlow(flow);\n    const flowSpec = getFlowSpecification(authClient, flow);\n    // Favor option values over flow spec\n    withCredentials = (typeof withCredentials !== 'undefined') ? withCredentials : flowSpec.withCredentials;\n    remediators = remediators || flowSpec.remediators;\n    actions = actions || flowSpec.actions;\n  }\n\n  return { \n    ...data,\n    options: { \n      ...options, \n      flow, \n      withCredentials, \n      remediators, \n      actions,\n    },\n    status\n  };\n}\n\nasync function getDataFromIntrospect(authClient, data: RunData): Promise<RunData> {\n  const { options } = data;\n  const {\n    stateHandle,\n    withCredentials,\n    version,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken,\n    maxAge,\n  } = options;\n\n  let idxResponse;\n  let meta = getSavedTransactionMeta(authClient, { state, recoveryToken, activationToken }); // may be undefined\n\n  if (stateHandle) {\n    idxResponse = await introspect(authClient, { withCredentials, version, stateHandle });\n  } else {\n    let interactionHandle = meta?.interactionHandle; // may be undefined\n    if (!interactionHandle) {\n      // start a new transaction\n      authClient.transactionManager.clear();\n      const interactResponse = await interact(authClient, {\n        withCredentials,\n        state,\n        scopes,\n        activationToken,\n        recoveryToken,\n        maxAge,\n      }); \n      interactionHandle = interactResponse.interactionHandle;\n      meta = interactResponse.meta;\n    }\n  \n    // Introspect to get idx response\n    idxResponse = await introspect(authClient, { withCredentials, version, interactionHandle });\n  }\n  return { ...data, idxResponse, meta };\n}\n\nasync function getDataFromRemediate(authClient, data: RunData): Promise<RunData> {\n  let {\n    idxResponse,\n    options,\n    values\n  } = data;\n\n  const {\n    autoRemediate,\n    remediators,\n    actions,\n    flow,\n    step,\n    shouldProceedWithEmailAuthenticator, // will be removed in next major version\n    useGenericRemediator,\n  } = options;\n  \n  const shouldRemediate = (autoRemediate !== false && (remediators || actions || step));\n  if (!shouldRemediate) {\n    return data;\n  }\n\n  values = { \n    ...values, \n    stateHandle: idxResponse!.rawIdxState.stateHandle \n  };\n\n  // Can we handle the remediations?\n  const { \n    idxResponse: idxResponseFromRemediation, \n    nextStep,\n    canceled,\n  } = await remediate(\n    authClient,\n    idxResponse!, \n    values, \n    {\n      remediators,\n      actions,\n      flow,\n      step,\n      shouldProceedWithEmailAuthenticator, // will be removed in next major version\n      useGenericRemediator,\n    }\n  );\n  idxResponse = idxResponseFromRemediation;\n\n  return { ...data, idxResponse, nextStep, canceled };\n}\n\nasync function getTokens(authClient, data: RunData): Promise<Tokens> {\n  let { meta, idxResponse } = data;\n  const { interactionCode } = idxResponse as IdxResponse;\n  const {\n    clientId,\n    codeVerifier,\n    ignoreSignature,\n    redirectUri,\n    urls,\n    scopes,\n  } = meta as IdxTransactionMeta;\n  const tokenResponse = await authClient.token.exchangeCodeForTokens({\n    interactionCode,\n    clientId,\n    codeVerifier,\n    ignoreSignature,\n    redirectUri,\n    scopes\n  }, urls);\n  return tokenResponse.tokens;\n}\n\nasync function finalizeData(authClient, data: RunData): Promise<RunData> {\n  let {\n    options,\n    idxResponse,\n    canceled,\n    status,\n  } = data;\n  const { exchangeCodeForTokens } = options;\n  let shouldSaveResponse = false;\n  let shouldClearTransaction = false;\n  let clearSharedStorage = true;\n  let interactionCode;\n  let tokens;\n  let enabledFeatures;\n  let availableSteps;\n  let messages;\n  let terminal;\n\n  if (idxResponse) {\n    shouldSaveResponse = !!(idxResponse.requestDidSucceed || idxResponse.stepUp);\n    enabledFeatures = getEnabledFeatures(idxResponse);\n    availableSteps = getAvailableSteps(authClient, idxResponse, options.useGenericRemediator);\n    messages = getMessagesFromResponse(idxResponse, options);\n    terminal = isTerminalResponse(idxResponse);\n  }\n\n  if (terminal) {\n    status = IdxStatus.TERMINAL;\n\n    // In most cases a terminal response should not clear transaction data. The user should cancel or skip to continue.\n    // A terminal \"success\" is a non-error response with no further actions available.\n    // In these narrow cases, saved transaction data should be cleared.\n    // One example of a terminal success is when the email verify flow is continued in another tab\n    const hasActions = Object.keys(idxResponse!.actions).length > 0;\n    const hasErrors = !!messages.find(msg => msg.class === 'ERROR');\n    const isTerminalSuccess = !hasActions && !hasErrors && idxResponse!.requestDidSucceed === true;\n    if (isTerminalSuccess) {\n      shouldClearTransaction = true;\n    } else {\n      // only save response if there are actions available (ignore messages)\n      shouldSaveResponse = shouldSaveResponse && hasActions;\n    }\n    // leave shared storage intact so the transaction can be continued in another tab\n    clearSharedStorage = false;\n  } else if (canceled) {\n    status = IdxStatus.CANCELED;\n    shouldClearTransaction = true;\n  } else if (idxResponse?.interactionCode) { \n    interactionCode = idxResponse.interactionCode;\n    if (exchangeCodeForTokens === false) {\n      status = IdxStatus.SUCCESS;\n      shouldClearTransaction = false;\n    } else {\n      tokens = await getTokens(authClient, data);\n      status = IdxStatus.SUCCESS;\n      shouldClearTransaction = true;\n    }\n  }\n  return {\n    ...data,\n    status,\n    interactionCode,\n    tokens,\n    shouldSaveResponse,\n    shouldClearTransaction,\n    clearSharedStorage,\n    enabledFeatures,\n    availableSteps,\n    messages,\n    terminal\n  };\n}\n\nfunction handleError(err, data: RunData): RunData {\n  let { error, status, shouldClearTransaction } = data;\n\n  // current version of idx-js will throw/reject IDX responses. Handle these differently than regular errors\n  if (isIdxResponse(err)) {\n    error = err;\n    status = IdxStatus.FAILURE;\n    shouldClearTransaction = true;\n  } else {\n    // error is not an IDX response, throw it like a regular error\n    throw err;\n  }\n\n  return { ...data, error, status, shouldClearTransaction };\n}\n\nexport async function run(\n  authClient: OktaAuthIdxInterface, \n  options: RunOptions = {},\n): Promise<IdxTransaction> {\n  let data: RunData = {\n    options,\n    values: initializeValues(options)\n  };\n\n  data = initializeData(authClient, data);\n  try {\n    data = await getDataFromIntrospect(authClient, data);\n    data = await getDataFromRemediate(authClient, data);\n  } catch (err) {\n    data = handleError(err, data);\n  }\n  data = await finalizeData(authClient, data);\n\n  const {\n    idxResponse,\n    meta,\n    shouldSaveResponse,\n    shouldClearTransaction,\n    clearSharedStorage,\n    status,\n    enabledFeatures,\n    availableSteps,\n    tokens,\n    nextStep,\n    messages,\n    error,\n    interactionCode\n  } = data;\n\n  if (shouldClearTransaction) {\n    authClient.transactionManager.clear({ clearSharedStorage });\n  }\n  else {\n    // ensures state is saved to sessionStorage\n    saveTransactionMeta(authClient, { ...meta });\n\n    if (shouldSaveResponse) {\n      // Save intermediate idx response in storage to reduce introspect call\n      const { rawIdxState: rawIdxResponse, requestDidSucceed } = idxResponse!;\n      authClient.transactionManager.saveIdxResponse({\n        rawIdxResponse,\n        requestDidSucceed,\n        stateHandle: idxResponse!.context?.stateHandle,\n        interactionHandle: meta?.interactionHandle\n      });\n    }\n  }\n  \n  // copy all fields from idxResponse which are needed by the widget\n  const { actions, context, neededToProceed, proceed, rawIdxState, requestDidSucceed, stepUp } = idxResponse || {};\n  return {\n    status: status!,\n    ...(meta && { meta }),\n    ...(enabledFeatures && { enabledFeatures }),\n    ...(availableSteps && { availableSteps }),\n    ...(tokens && { tokens }),\n    ...(nextStep && { nextStep }),\n    ...(messages && messages.length && { messages }),\n    ...(error && { error }),\n    ...(stepUp && { stepUp }),\n    interactionCode, // if options.exchangeCodeForTokens is false\n\n    // from idx-js\n    actions: actions!,\n    context: context!,\n    neededToProceed: neededToProceed!,\n    proceed: proceed!,\n    rawIdxState: rawIdxState!,\n    requestDidSucceed\n  };\n}\n"]},"metadata":{},"sourceType":"module"}