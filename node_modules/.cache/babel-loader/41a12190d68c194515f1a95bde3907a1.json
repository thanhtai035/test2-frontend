{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { hasSavedInteractionHandle } from './transactionMeta.js';\nimport { startTransaction } from './startTransaction.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { IdxFeature } from './types/api.js';\nimport '../myaccount/types.js';\n\nfunction register(_x) {\n  return _register.apply(this, arguments);\n}\n\nfunction _register() {\n  _register = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n        _yield$startTransacti,\n        enabledFeatures,\n        availableSteps,\n        error,\n        _error,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n            if (hasSavedInteractionHandle(authClient)) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 4;\n            return startTransaction(authClient, Object.assign(Object.assign({}, options), {\n              flow: 'register',\n              autoRemediate: false\n            }));\n\n          case 4:\n            _yield$startTransacti = _context.sent;\n            enabledFeatures = _yield$startTransacti.enabledFeatures;\n            availableSteps = _yield$startTransacti.availableSteps;\n\n            if (!(!options.activationToken && enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION))) {\n              _context.next = 10;\n              break;\n            }\n\n            error = new AuthSdkError('Registration is not supported based on your current org configuration.');\n            throw error;\n\n          case 10:\n            if (!(options.activationToken && (availableSteps === null || availableSteps === void 0 ? void 0 : availableSteps.some(function (_ref) {\n              var name = _ref.name;\n              return name === 'identify';\n            })))) {\n              _context.next = 13;\n              break;\n            }\n\n            _error = new AuthSdkError('activationToken is not supported based on your current org configuration.');\n            throw _error;\n\n          case 13:\n            return _context.abrupt(\"return\", run(authClient, Object.assign(Object.assign({}, options), {\n              flow: 'register'\n            })));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _register.apply(this, arguments);\n}\n\nexport { register };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;SAwBsBA,Q;;;;;yEAAf,iBACLC,UADK;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAC6BC,OAD7B,2DAC4D,EAD5D;;YAAA,IAKAC,yBAAyB,CAACF,UAAD,CALzB;cAAA;cAAA;YAAA;;YAAA;YAAA,OAM+CG,gBAAgB,CAACH,UAAD,EAAWI,gCACxEH,OADwE,GACjE;cACVI,IAAI,EAAE,UADI;cAEVC,aAAa,EAAE;YAFL,CADiE,CAAX,CAN/D;;UAAA;YAAA;YAMKC,eANL,yBAMKA,eANL;YAMsBC,cANtB,yBAMsBA,cANtB;;YAAA,MAWC,CAACP,OAAO,CAACQ,eAAT,IAA4BF,eAA5B,IAA+C,CAACA,eAAe,CAACG,QAAhB,CAAyBC,UAAU,CAACC,YAApC,CAXjD;cAAA;cAAA;YAAA;;YAYKC,KAZL,GAYa,IAAIC,YAAJ,CAAiB,wEAAjB,CAZb;YAAA,MAaKD,KAbL;;UAAA;YAAA,MAgBCZ,OAAO,CAACQ,eAAR,KAA2BD,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEO,IAAhB,CAAqB;cAAA,IAAGC,IAAH,QAAGA,IAAH;cAAA,OAAcA,IAAI,KAAK,UAAvB;YAAA,CAArB,CAA3B,CAhBD;cAAA;cAAA;YAAA;;YAiBKH,MAjBL,GAiBa,IAAIC,YAAJ,CAAiB,2EAAjB,CAjBb;YAAA,MAkBKD,MAlBL;;UAAA;YAAA,iCAuBEI,GAAG,CAACjB,UAAD,EACLI,0CAAO;cACVC,IAAI,EAAE;YADI,CAAP,CADK,CAvBL;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["register","authClient","options","hasSavedInteractionHandle","startTransaction","Object","flow","autoRemediate","enabledFeatures","availableSteps","activationToken","includes","IdxFeature","REGISTRATION","error","AuthSdkError","some","name","run"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\register.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run } from './run';\nimport { hasSavedInteractionHandle } from './transactionMeta';\nimport { startTransaction } from './startTransaction';\nimport { AuthSdkError } from '../errors';\nimport { \n  RegistrationOptions, \n  IdxTransaction, \n  OktaAuthIdxInterface, \n  IdxFeature,\n} from '../types';\n\nexport async function register(\n  authClient: OktaAuthIdxInterface, options: RegistrationOptions = {}\n): Promise<IdxTransaction> {\n\n  // Only check at the beginning of the transaction\n  if (!hasSavedInteractionHandle(authClient)) {\n    const { enabledFeatures, availableSteps } = await startTransaction(authClient, {\n      ...options,\n      flow: 'register',\n      autoRemediate: false\n    });\n    if (!options.activationToken && enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION)) {\n      const error = new AuthSdkError('Registration is not supported based on your current org configuration.');\n      throw error;\n    // return { status: IdxStatus.FAILURE, error } as unknown as IdxTransaction; // TODO: wny not just throw the error?\n    }\n    if (options.activationToken && availableSteps?.some(({ name }) => name === 'identify')) {\n      const error = new AuthSdkError('activationToken is not supported based on your current org configuration.');\n      throw error;\n    // return { status: IdxStatus.FAILURE, error } as unknown as IdxTransaction; // TODO: wny not just throw the error?\n    }\n  }\n\n  return run(authClient, {\n    ...options,\n    flow: 'register'\n  });\n}\n"]},"metadata":{},"sourceType":"module"}