{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { post } from '../http/request.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { STATE_TOKEN_KEY_NAME } from '../constants.js';\nimport { addStateToken } from './util.js';\n\nfunction transactionStatus(sdk, args) {\n  args = addStateToken(sdk, args);\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn', args, {\n    withCredentials: true\n  });\n}\n\nfunction resumeTransaction(sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to resume'));\n    }\n  }\n\n  return sdk.tx.status(args).then(function (res) {\n    return sdk.tx.createTransaction(res);\n  });\n}\n\nfunction introspectAuthn(sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to evaluate'));\n    }\n  }\n\n  return transactionStep(sdk, args).then(function (res) {\n    return sdk.tx.createTransaction(res);\n  });\n}\n\nfunction transactionStep(sdk, args) {\n  args = addStateToken(sdk, args);\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn/introspect', args, {\n    withCredentials: true\n  });\n}\n\nfunction transactionExists(sdk) {\n  return !!sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n}\n\nfunction postToTransaction(sdk, url, args, options) {\n  options = Object.assign({\n    withCredentials: true\n  }, options);\n  return post(sdk, url, args, options).then(function (res) {\n    return sdk.tx.createTransaction(res);\n  });\n}\n\nexport { introspectAuthn, postToTransaction, resumeTransaction, transactionExists, transactionStatus, transactionStep };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAmBgB,2BAAkBA,GAAlB,EAAuBC,IAAvB,EAA2B;EACzCA,IAAI,GAAGC,aAAa,CAACF,GAAD,EAAMC,IAAN,CAApB;EACA,OAAOE,IAAI,CAACH,GAAD,EAAMA,GAAG,CAACI,eAAJ,KAAwB,eAA9B,EAA+CH,IAA/C,EAAqD;IAAEI,eAAe,EAAE;EAAnB,CAArD,CAAX;AACD;;AAEe,2BAAkBL,GAAlB,EAAuBC,IAAvB,EAA2B;EACzC,IAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACK,UAAnB,EAA+B;IAC7B,IAAIA,UAAU,GAAGN,GAAG,CAACO,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmBC,oBAAnB,CAAjB;;IACA,IAAIJ,UAAJ,EAAgB;MACdL,IAAI,GAAG;QACLK,UAAU,EAAEA;MADP,CAAP;IAGD,CAJD,MAIO;MACL,OAAOK,OAAO,CAACC,MAAR,CAAe,IAAIC,YAAJ,CAAiB,0BAAjB,CAAf,CAAP;IACD;EACF;;EACD,OAAOb,GAAG,CAACO,EAAJ,CAAOO,MAAP,CAAcb,IAAd,EACJc,IADI,CACC,UAASC,GAAT,EAAY;IAChB,OAAOhB,GAAG,CAACO,EAAJ,CAAOU,iBAAP,CAAyBD,GAAzB,CAAP;EACD,CAHI,CAAP;AAID;;AAEe,yBAAiBhB,GAAjB,EAAsBC,IAAtB,EAA0B;EACxC,IAAI,CAACA,IAAD,IAAS,CAACA,IAAI,CAACK,UAAnB,EAA+B;IAC7B,IAAIA,UAAU,GAAGN,GAAG,CAACO,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmBC,oBAAnB,CAAjB;;IACA,IAAIJ,UAAJ,EAAgB;MACdL,IAAI,GAAG;QACLK,UAAU,EAAEA;MADP,CAAP;IAGD,CAJD,MAIO;MACL,OAAOK,OAAO,CAACC,MAAR,CAAe,IAAIC,YAAJ,CAAiB,4BAAjB,CAAf,CAAP;IACD;EACF;;EACD,OAAOK,eAAe,CAAClB,GAAD,EAAMC,IAAN,CAAf,CACJc,IADI,CACC,UAAUC,GAAV,EAAa;IACjB,OAAOhB,GAAG,CAACO,EAAJ,CAAOU,iBAAP,CAAyBD,GAAzB,CAAP;EACD,CAHI,CAAP;AAID;;AAEe,yBAAgBhB,GAAhB,EAAqBC,IAArB,EAAyB;EACvCA,IAAI,GAAGC,aAAa,CAACF,GAAD,EAAMC,IAAN,CAApB;EAEA,OAAOE,IAAI,CAACH,GAAD,EAAMA,GAAG,CAACI,eAAJ,KAAwB,0BAA9B,EAA0DH,IAA1D,EAAgE;IAAEI,eAAe,EAAE;EAAnB,CAAhE,CAAX;AACD;;AAEK,SAAUc,iBAAV,CAA4BnB,GAA5B,EAA+B;EAEnC,OAAO,CAAC,CAACA,GAAG,CAACO,EAAJ,CAAOC,MAAP,CAAcC,IAAd,CAAmBC,oBAAnB,CAAT;AACD;;AAEK,SAAUU,iBAAV,CAA4BpB,GAA5B,EAAiCqB,GAAjC,EAAsCpB,IAAtC,EAA4CqB,OAA5C,EAAoD;EACxDA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;IAAEnB,eAAe,EAAE;EAAnB,CAAd,EAAyCiB,OAAzC,CAAV;EACA,OAAOnB,IAAI,CAACH,GAAD,EAAMqB,GAAN,EAAWpB,IAAX,EAAiBqB,OAAjB,CAAJ,CACJP,IADI,CACC,UAASC,GAAT,EAAY;IAChB,OAAOhB,GAAG,CAACO,EAAJ,CAAOU,iBAAP,CAAyBD,GAAzB,CAAP;EACD,CAHI,CAAP;AAIF","names":["sdk","args","addStateToken","post","getIssuerOrigin","withCredentials","stateToken","tx","exists","_get","STATE_TOKEN_KEY_NAME","Promise","reject","AuthSdkError","status","then","res","createTransaction","transactionStep","transactionExists","postToTransaction","url","options","Object","assign"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\tx\\api.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n/* eslint-disable complexity, max-statements */\nimport { post } from '../http';\nimport AuthSdkError from '../errors/AuthSdkError';\nimport { STATE_TOKEN_KEY_NAME } from '../constants';\nimport { addStateToken } from './util';\n\nexport function transactionStatus(sdk, args) {\n  args = addStateToken(sdk, args);\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn', args, { withCredentials: true });\n}\n\nexport function resumeTransaction(sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to resume'));\n    }\n  }\n  return sdk.tx.status(args)\n    .then(function(res) {\n      return sdk.tx.createTransaction(res);\n    });\n}\n\nexport function introspectAuthn (sdk, args) {\n  if (!args || !args.stateToken) {\n    var stateToken = sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n    if (stateToken) {\n      args = {\n        stateToken: stateToken\n      };\n    } else {\n      return Promise.reject(new AuthSdkError('No transaction to evaluate'));\n    }\n  }\n  return transactionStep(sdk, args)\n    .then(function (res) {\n      return sdk.tx.createTransaction(res);\n    });\n}\n\nexport function transactionStep(sdk, args) {\n  args = addStateToken(sdk, args);\n  // v1 pipeline introspect API\n  return post(sdk, sdk.getIssuerOrigin() + '/api/v1/authn/introspect', args, { withCredentials: true });\n}\n\nexport function transactionExists(sdk) {\n  // We have a cookie state token\n  return !!sdk.tx.exists._get(STATE_TOKEN_KEY_NAME);\n}\n\nexport function postToTransaction(sdk, url, args, options?) {\n  options = Object.assign({ withCredentials: true }, options);\n  return post(sdk, url, args, options)\n    .then(function(res) {\n      return sdk.tx.createTransaction(res);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}