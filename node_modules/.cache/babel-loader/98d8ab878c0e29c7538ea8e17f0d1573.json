{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { clone } from '../util/object.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport OAuthError from '../errors/OAuthError.js';\nimport { verifyToken } from './verifyToken.js';\nimport { getDefaultTokenParams } from './util/defaultTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\n\nfunction validateResponse(res, oauthParams) {\n  if (res['error'] && res['error_description']) {\n    throw new OAuthError(res['error'], res['error_description']);\n  }\n\n  if (res.state !== oauthParams.state) {\n    throw new AuthSdkError('OAuth flow response state doesn\\'t match request state');\n  }\n}\n\nfunction handleOAuthResponse(_x, _x2, _x3, _x4) {\n  return _handleOAuthResponse.apply(this, arguments);\n}\n\nfunction _handleOAuthResponse() {\n  _handleOAuthResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, tokenParams, res, urls) {\n    var pkce, responseType, scopes, clientId, tokenDict, expiresIn, tokenType, accessToken, idToken, refreshToken, now, accessJwt, idJwt, idTokenObj, validationParams;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            pkce = sdk.options.pkce !== false;\n\n            if (!(pkce && (res.code || res.interaction_code))) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", sdk.token.exchangeCodeForTokens(Object.assign({}, tokenParams, {\n              authorizationCode: res.code,\n              interactionCode: res.interaction_code\n            }), urls));\n\n          case 3:\n            tokenParams = tokenParams || getDefaultTokenParams(sdk);\n            urls = urls || getOAuthUrls(sdk, tokenParams);\n            responseType = tokenParams.responseType || [];\n\n            if (!Array.isArray(responseType)) {\n              responseType = [responseType];\n            }\n\n            if (res.scope) {\n              scopes = res.scope.split(' ');\n            } else {\n              scopes = clone(tokenParams.scopes);\n            }\n\n            clientId = tokenParams.clientId || sdk.options.clientId;\n            validateResponse(res, tokenParams);\n            tokenDict = {};\n            expiresIn = res.expires_in;\n            tokenType = res.token_type;\n            accessToken = res.access_token;\n            idToken = res.id_token;\n            refreshToken = res.refresh_token;\n            now = Math.floor(Date.now() / 1000);\n\n            if (accessToken) {\n              accessJwt = sdk.token.decode(accessToken);\n              tokenDict.accessToken = {\n                accessToken: accessToken,\n                claims: accessJwt.payload,\n                expiresAt: Number(expiresIn) + now,\n                tokenType: tokenType,\n                scopes: scopes,\n                authorizeUrl: urls.authorizeUrl,\n                userinfoUrl: urls.userinfoUrl\n              };\n            }\n\n            if (refreshToken) {\n              tokenDict.refreshToken = {\n                refreshToken: refreshToken,\n                expiresAt: Number(expiresIn) + now,\n                scopes: scopes,\n                tokenUrl: urls.tokenUrl,\n                authorizeUrl: urls.authorizeUrl,\n                issuer: urls.issuer\n              };\n            }\n\n            if (!idToken) {\n              _context.next = 27;\n              break;\n            }\n\n            idJwt = sdk.token.decode(idToken);\n            idTokenObj = {\n              idToken: idToken,\n              claims: idJwt.payload,\n              expiresAt: idJwt.payload.exp - idJwt.payload.iat + now,\n              scopes: scopes,\n              authorizeUrl: urls.authorizeUrl,\n              issuer: urls.issuer,\n              clientId: clientId\n            };\n            validationParams = {\n              clientId: clientId,\n              issuer: urls.issuer,\n              nonce: tokenParams.nonce,\n              accessToken: accessToken\n            };\n\n            if (tokenParams.ignoreSignature !== undefined) {\n              validationParams.ignoreSignature = tokenParams.ignoreSignature;\n            }\n\n            _context.next = 26;\n            return verifyToken(sdk, idTokenObj, validationParams);\n\n          case 26:\n            tokenDict.idToken = idTokenObj;\n\n          case 27:\n            if (!(responseType.indexOf('token') !== -1 && !tokenDict.accessToken)) {\n              _context.next = 29;\n              break;\n            }\n\n            throw new AuthSdkError('Unable to parse OAuth flow response: response type \"token\" was requested but \"access_token\" was not returned.');\n\n          case 29:\n            if (!(responseType.indexOf('id_token') !== -1 && !tokenDict.idToken)) {\n              _context.next = 31;\n              break;\n            }\n\n            throw new AuthSdkError('Unable to parse OAuth flow response: response type \"id_token\" was requested but \"id_token\" was not returned.');\n\n          case 31:\n            return _context.abrupt(\"return\", {\n              tokens: tokenDict,\n              state: res.state,\n              code: res.code\n            });\n\n          case 32:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleOAuthResponse.apply(this, arguments);\n}\n\nexport { handleOAuthResponse };","map":{"version":3,"mappings":"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","names":["validateResponse","res","oauthParams","OAuthError","state","AuthSdkError","handleOAuthResponse","sdk","tokenParams","urls","pkce","options","code","interaction_code","token","exchangeCodeForTokens","Object","assign","authorizationCode","interactionCode","getDefaultTokenParams","getOAuthUrls","responseType","Array","isArray","scope","scopes","split","clone","clientId","tokenDict","expiresIn","expires_in","tokenType","token_type","accessToken","access_token","idToken","id_token","refreshToken","refresh_token","now","Math","floor","Date","accessJwt","decode","claims","payload","expiresAt","Number","authorizeUrl","userinfoUrl","tokenUrl","issuer","idJwt","idTokenObj","exp","iat","validationParams","nonce","ignoreSignature","undefined","verifyToken","indexOf","tokens"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\handleOAuthResponse.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n/* eslint-disable complexity, max-statements */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { clone } from '../util';\nimport {\n  getOAuthUrls,\n} from './util/oauth';\nimport { AuthSdkError, OAuthError } from '../errors';\nimport {\n  OktaAuthOIDCInterface,\n  TokenVerifyParams,\n  IDToken,\n  OAuthResponse,\n  TokenParams,\n  TokenResponse,\n  CustomUrls,\n  Tokens,\n} from '../types';\nimport { verifyToken } from './verifyToken';\nimport { getDefaultTokenParams } from './util';\n\nfunction validateResponse(res: OAuthResponse, oauthParams: TokenParams) {\n  if (res['error'] && res['error_description']) {\n    throw new OAuthError(res['error'], res['error_description']);\n  }\n\n  if (res.state !== oauthParams.state) {\n    throw new AuthSdkError('OAuth flow response state doesn\\'t match request state');\n  }\n}\n\nexport async function handleOAuthResponse(\n  sdk: OktaAuthOIDCInterface,\n  tokenParams: TokenParams,\n  res: OAuthResponse,\n  urls?: CustomUrls\n): Promise<TokenResponse> {\n  var pkce = sdk.options.pkce !== false;\n\n  // The result contains an authorization_code and PKCE is enabled \n  // `exchangeCodeForTokens` will call /token then call `handleOauthResponse` recursively with the result\n  if (pkce && (res.code || res.interaction_code)) {\n    return sdk.token.exchangeCodeForTokens(Object.assign({}, tokenParams, {\n      authorizationCode: res.code,\n      interactionCode: res.interaction_code\n    }), urls);\n  }\n\n  tokenParams = tokenParams || getDefaultTokenParams(sdk);\n  urls = urls || getOAuthUrls(sdk, tokenParams);\n\n  var responseType = tokenParams.responseType || [];\n  if (!Array.isArray(responseType)) {\n    responseType = [responseType];\n  }\n\n  var scopes;\n  if (res.scope) {\n    scopes = res.scope.split(' ');\n  } else {\n    scopes = clone(tokenParams.scopes);\n  }\n  var clientId = tokenParams.clientId || sdk.options.clientId;\n\n  // Handling the result from implicit flow or PKCE token exchange\n  validateResponse(res, tokenParams);\n\n  var tokenDict = {} as Tokens;\n  var expiresIn = res.expires_in;\n  var tokenType = res.token_type;\n  var accessToken = res.access_token;\n  var idToken = res.id_token;\n  var refreshToken = res.refresh_token;\n  var now = Math.floor(Date.now()/1000);\n\n  if (accessToken) {\n    var accessJwt = sdk.token.decode(accessToken);\n    tokenDict.accessToken = {\n      accessToken: accessToken,\n      claims: accessJwt.payload,\n      expiresAt: Number(expiresIn) + now,\n      tokenType: tokenType!,\n      scopes: scopes,\n      authorizeUrl: urls.authorizeUrl!,\n      userinfoUrl: urls.userinfoUrl!\n    };\n  }\n\n  if (refreshToken) {\n    tokenDict.refreshToken = {\n      refreshToken: refreshToken,\n      // should not be used, this is the accessToken expire time\n      // TODO: remove \"expiresAt\" in the next major version OKTA-407224\n      expiresAt: Number(expiresIn) + now, \n      scopes: scopes,\n      tokenUrl: urls.tokenUrl!,\n      authorizeUrl: urls.authorizeUrl!,\n      issuer: urls.issuer!,\n    };\n  }\n\n  if (idToken) {\n    var idJwt = sdk.token.decode(idToken);\n    var idTokenObj: IDToken = {\n      idToken: idToken,\n      claims: idJwt.payload,\n      expiresAt: idJwt.payload.exp! - idJwt.payload.iat! + now, // adjusting expiresAt to be in local time\n      scopes: scopes,\n      authorizeUrl: urls.authorizeUrl!,\n      issuer: urls.issuer!,\n      clientId: clientId!\n    };\n\n    var validationParams: TokenVerifyParams = {\n      clientId: clientId!,\n      issuer: urls.issuer!,\n      nonce: tokenParams.nonce,\n      accessToken: accessToken\n    };\n\n    if (tokenParams.ignoreSignature !== undefined) {\n      validationParams.ignoreSignature = tokenParams.ignoreSignature;\n    }\n\n    await verifyToken(sdk, idTokenObj, validationParams);\n    tokenDict.idToken = idTokenObj;\n  }\n\n  // Validate received tokens against requested response types \n  if (responseType.indexOf('token') !== -1 && !tokenDict.accessToken) {\n    // eslint-disable-next-line max-len\n    throw new AuthSdkError('Unable to parse OAuth flow response: response type \"token\" was requested but \"access_token\" was not returned.');\n  }\n  if (responseType.indexOf('id_token') !== -1 && !tokenDict.idToken) {\n    // eslint-disable-next-line max-len\n    throw new AuthSdkError('Unable to parse OAuth flow response: response type \"id_token\" was requested but \"id_token\" was not returned.');\n  }\n\n  return {\n    tokens: tokenDict,\n    state: res.state!,\n    code: res.code\n  };\n  \n}"]},"metadata":{},"sourceType":"module"}