{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { clone } from '../util/object.js';\nimport { stringToBuffer, base64UrlDecode } from './base64.js';\nimport { webcrypto as c } from './browser.js';\n\nfunction verifyToken(idToken, key) {\n  key = clone(key);\n  var format = 'jwk';\n  var algo = {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  };\n  var extractable = true;\n  var usages = ['verify'];\n  delete key.use;\n  return c.subtle.importKey(format, key, algo, extractable, usages).then(function (cryptoKey) {\n    var jwt = idToken.split('.');\n    var payload = stringToBuffer(jwt[0] + '.' + jwt[1]);\n    var b64Signature = base64UrlDecode(jwt[2]);\n    var signature = stringToBuffer(b64Signature);\n    return c.subtle.verify(algo, cryptoKey, signature, payload);\n  });\n}\n\nexport { verifyToken };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAgBgB,qBAAYA,OAAZ,EAAqBC,GAArB,EAAwB;EACtCA,GAAG,GAAGC,KAAK,CAACD,GAAD,CAAX;EAEA,IAAIE,MAAM,GAAG,KAAb;EACA,IAAIC,IAAI,GAAG;IACTC,IAAI,EAAE,mBADG;IAETC,IAAI,EAAE;MAAED,IAAI,EAAE;IAAR;EAFG,CAAX;EAIA,IAAIE,WAAW,GAAG,IAAlB;EACA,IAAIC,MAAM,GAAG,CAAC,QAAD,CAAb;EAKA,OAAOP,GAAG,CAACQ,GAAX;EAIA,OAAOC,CAAS,CAACC,MAAVD,CAAiBE,SAAjBF,CACLP,MADKO,EAELT,GAFKS,EAGLN,IAHKM,EAILH,WAJKG,EAKLF,MALKE,EAONG,IAPMH,CAOD,UAASI,SAAT,EAAkB;IACtB,IAAIC,GAAG,GAAGf,OAAO,CAACgB,KAAR,CAAc,GAAd,CAAV;IACA,IAAIC,OAAO,GAAGC,cAAc,CAACH,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT,GAAeA,GAAG,CAAC,CAAD,CAAnB,CAA5B;IACA,IAAII,YAAY,GAAGC,eAAe,CAACL,GAAG,CAAC,CAAD,CAAJ,CAAlC;IACA,IAAIM,SAAS,GAAGH,cAAc,CAACC,YAAD,CAA9B;IAEA,OAAOT,CAAS,CAACC,MAAVD,CAAiBY,MAAjBZ,CACLN,IADKM,EAELI,SAFKJ,EAGLW,SAHKX,EAILO,OAJKP,CAAP;EAMD,CAnBMA,CAAP;AAoBF","names":["idToken","key","clone","format","algo","name","hash","extractable","usages","use","webcrypto","subtle","importKey","then","cryptoKey","jwt","split","payload","stringToBuffer","b64Signature","base64UrlDecode","signature","verify"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\crypto\\verifyToken.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { clone } from '../util';\nimport { stringToBuffer, base64UrlDecode } from './base64';\nimport { webcrypto } from './webcrypto';\n\nexport function verifyToken(idToken, key) {\n  key = clone(key);\n\n  var format = 'jwk';\n  var algo = {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: { name: 'SHA-256' }\n  };\n  var extractable = true;\n  var usages = ['verify'];\n\n  // https://connect.microsoft.com/IE/feedback/details/2242108/webcryptoapi-importing-jwk-with-use-field-fails\n  // This is a metadata tag that specifies the intent of how the key should be used.\n  // It's not necessary to properly verify the jwt's signature.\n  delete key.use;\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return webcrypto.subtle.importKey(\n    format,\n    key,\n    algo,\n    extractable,\n    usages\n  )\n  .then(function(cryptoKey) {\n    var jwt = idToken.split('.');\n    var payload = stringToBuffer(jwt[0] + '.' + jwt[1]);\n    var b64Signature = base64UrlDecode(jwt[2]);\n    var signature = stringToBuffer(b64Signature);\n\n    return webcrypto.subtle.verify(\n      algo,\n      cryptoKey,\n      signature,\n      payload\n    );\n  });\n}\n\n"]},"metadata":{},"sourceType":"module"}