{"ast":null,"code":"import { isPromise, PROMISE_RESOLVED_FALSE, PROMISE_RESOLVED_VOID } from './util.js';\nimport { chooseMethod } from './method-chooser.js';\nimport { fillOptionsWithDefaults } from './options.js';\n/**\n * Contains all open channels,\n * used in tests to ensure everything is closed.\n */\n\nexport var OPEN_BROADCAST_CHANNELS = new Set();\nvar lastId = 0;\nexport var BroadcastChannel = function BroadcastChannel(name, options) {\n  // identifier of the channel to debug stuff\n  this.id = lastId++;\n  OPEN_BROADCAST_CHANNELS.add(this);\n  this.name = name;\n\n  if (ENFORCED_OPTIONS) {\n    options = ENFORCED_OPTIONS;\n  }\n\n  this.options = fillOptionsWithDefaults(options);\n  this.method = chooseMethod(this.options); // isListening\n\n  this._iL = false;\n  /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */\n\n  this._onML = null;\n  /**\n   * _addEventListeners\n   */\n\n  this._addEL = {\n    message: [],\n    internal: []\n  };\n  /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */\n\n  this._uMP = new Set();\n  /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */\n\n  this._befC = [];\n  /**\n   * _preparePromise\n   */\n\n  this._prepP = null;\n\n  _prepareChannel(this);\n}; // STATICS\n\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */\n\nBroadcastChannel._pubkey = true;\n/**\n * clears the tmp-folder if is node\n * @return {Promise<boolean>} true if has run, false if not node\n */\n\nexport function clearNodeFolder(options) {\n  options = fillOptionsWithDefaults(options);\n  var method = chooseMethod(options);\n\n  if (method.type === 'node') {\n    return method.clearNodeFolder().then(function () {\n      return true;\n    });\n  } else {\n    return PROMISE_RESOLVED_FALSE;\n  }\n}\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */\n\nvar ENFORCED_OPTIONS;\nexport function enforceOptions(options) {\n  ENFORCED_OPTIONS = options;\n} // PROTOTYPE\n\nBroadcastChannel.prototype = {\n  postMessage: function postMessage(msg) {\n    if (this.closed) {\n      throw new Error('BroadcastChannel.postMessage(): ' + 'Cannot post message after channel has closed ' +\n      /**\n       * In the past when this error appeared, it was realy hard to debug.\n       * So now we log the msg together with the error so it at least\n       * gives some clue about where in your application this happens.\n       */\n      JSON.stringify(msg));\n    }\n\n    return _post(this, 'message', msg);\n  },\n  postInternal: function postInternal(msg) {\n    return _post(this, 'internal', msg);\n  },\n\n  set onmessage(fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _removeListenerObject(this, 'message', this._onML);\n\n    if (fn && typeof fn === 'function') {\n      this._onML = listenObj;\n\n      _addListenerObject(this, 'message', listenObj);\n    } else {\n      this._onML = null;\n    }\n  },\n\n  addEventListener: function addEventListener(type, fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _addListenerObject(this, type, listenObj);\n  },\n  removeEventListener: function removeEventListener(type, fn) {\n    var obj = this._addEL[type].find(function (obj) {\n      return obj.fn === fn;\n    });\n\n    _removeListenerObject(this, type, obj);\n  },\n  close: function close() {\n    var _this = this;\n\n    if (this.closed) {\n      return;\n    }\n\n    OPEN_BROADCAST_CHANNELS[\"delete\"](this);\n    this.closed = true;\n    var awaitPrepare = this._prepP ? this._prepP : PROMISE_RESOLVED_VOID;\n    this._onML = null;\n    this._addEL.message = [];\n    return awaitPrepare // wait until all current sending are processed\n    .then(function () {\n      return Promise.all(Array.from(_this._uMP));\n    }) // run before-close hooks\n    .then(function () {\n      return Promise.all(_this._befC.map(function (fn) {\n        return fn();\n      }));\n    }) // close the channel\n    .then(function () {\n      return _this.method.close(_this._state);\n    });\n  },\n\n  get type() {\n    return this.method.type;\n  },\n\n  get isClosed() {\n    return this.closed;\n  }\n\n};\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */\n\nfunction _post(broadcastChannel, type, msg) {\n  var time = broadcastChannel.method.microSeconds();\n  var msgObj = {\n    time: time,\n    type: type,\n    data: msg\n  };\n  var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : PROMISE_RESOLVED_VOID;\n  return awaitPrepare.then(function () {\n    var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj); // add/remove to unsend messages list\n\n    broadcastChannel._uMP.add(sendPromise);\n\n    sendPromise[\"catch\"]().then(function () {\n      return broadcastChannel._uMP[\"delete\"](sendPromise);\n    });\n    return sendPromise;\n  });\n}\n\nfunction _prepareChannel(channel) {\n  var maybePromise = channel.method.create(channel.name, channel.options);\n\n  if (isPromise(maybePromise)) {\n    channel._prepP = maybePromise;\n    maybePromise.then(function (s) {\n      // used in tests to simulate slow runtime\n\n      /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/\n      channel._state = s;\n    });\n  } else {\n    channel._state = maybePromise;\n  }\n}\n\nfunction _hasMessageListeners(channel) {\n  if (channel._addEL.message.length > 0) return true;\n  if (channel._addEL.internal.length > 0) return true;\n  return false;\n}\n\nfunction _addListenerObject(channel, type, obj) {\n  channel._addEL[type].push(obj);\n\n  _startListening(channel);\n}\n\nfunction _removeListenerObject(channel, type, obj) {\n  channel._addEL[type] = channel._addEL[type].filter(function (o) {\n    return o !== obj;\n  });\n\n  _stopListening(channel);\n}\n\nfunction _startListening(channel) {\n  if (!channel._iL && _hasMessageListeners(channel)) {\n    // someone is listening, start subscribing\n    var listenerFn = function listenerFn(msgObj) {\n      channel._addEL[msgObj.type].forEach(function (listenerObject) {\n        /**\n         * Getting the current time in JavaScript has no good precision.\n         * So instead of only listening to events that happend 'after' the listener\n         * was added, we also listen to events that happended 100ms before it.\n         * This ensures that when another process, like a WebWorker, sends events\n         * we do not miss them out because their timestamp is a bit off compared to the main process.\n         * Not doing this would make messages missing when we send data directly after subscribing and awaiting a response.\n         * @link https://johnresig.com/blog/accuracy-of-javascript-time/\n         */\n        var hundredMsInMicro = 100 * 1000;\n        var minMessageTime = listenerObject.time - hundredMsInMicro;\n\n        if (msgObj.time >= minMessageTime) {\n          listenerObject.fn(msgObj.data);\n        }\n      });\n    };\n\n    var time = channel.method.microSeconds();\n\n    if (channel._prepP) {\n      channel._prepP.then(function () {\n        channel._iL = true;\n        channel.method.onMessage(channel._state, listenerFn, time);\n      });\n    } else {\n      channel._iL = true;\n      channel.method.onMessage(channel._state, listenerFn, time);\n    }\n  }\n}\n\nfunction _stopListening(channel) {\n  if (channel._iL && !_hasMessageListeners(channel)) {\n    // noone is listening, stop subscribing\n    channel._iL = false;\n    var time = channel.method.microSeconds();\n    channel.method.onMessage(channel._state, null, time);\n  }\n}","map":{"version":3,"names":["isPromise","PROMISE_RESOLVED_FALSE","PROMISE_RESOLVED_VOID","chooseMethod","fillOptionsWithDefaults","OPEN_BROADCAST_CHANNELS","Set","lastId","BroadcastChannel","name","options","id","add","ENFORCED_OPTIONS","method","_iL","_onML","_addEL","message","internal","_uMP","_befC","_prepP","_prepareChannel","_pubkey","clearNodeFolder","type","then","enforceOptions","prototype","postMessage","msg","closed","Error","JSON","stringify","_post","postInternal","onmessage","fn","time","microSeconds","listenObj","_removeListenerObject","_addListenerObject","addEventListener","removeEventListener","obj","find","close","_this","awaitPrepare","Promise","all","Array","from","map","_state","isClosed","broadcastChannel","msgObj","data","sendPromise","channel","maybePromise","create","s","_hasMessageListeners","length","push","_startListening","filter","o","_stopListening","listenerFn","forEach","listenerObject","hundredMsInMicro","minMessageTime","onMessage"],"sources":["C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2-s3760615/node_modules/broadcast-channel/dist/esbrowser/broadcast-channel.js"],"sourcesContent":["import { isPromise, PROMISE_RESOLVED_FALSE, PROMISE_RESOLVED_VOID } from './util.js';\nimport { chooseMethod } from './method-chooser.js';\nimport { fillOptionsWithDefaults } from './options.js';\n/**\n * Contains all open channels,\n * used in tests to ensure everything is closed.\n */\n\nexport var OPEN_BROADCAST_CHANNELS = new Set();\nvar lastId = 0;\nexport var BroadcastChannel = function BroadcastChannel(name, options) {\n  // identifier of the channel to debug stuff\n  this.id = lastId++;\n  OPEN_BROADCAST_CHANNELS.add(this);\n  this.name = name;\n\n  if (ENFORCED_OPTIONS) {\n    options = ENFORCED_OPTIONS;\n  }\n\n  this.options = fillOptionsWithDefaults(options);\n  this.method = chooseMethod(this.options); // isListening\n\n  this._iL = false;\n  /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */\n\n  this._onML = null;\n  /**\n   * _addEventListeners\n   */\n\n  this._addEL = {\n    message: [],\n    internal: []\n  };\n  /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */\n\n  this._uMP = new Set();\n  /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */\n\n  this._befC = [];\n  /**\n   * _preparePromise\n   */\n\n  this._prepP = null;\n\n  _prepareChannel(this);\n}; // STATICS\n\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */\n\nBroadcastChannel._pubkey = true;\n/**\n * clears the tmp-folder if is node\n * @return {Promise<boolean>} true if has run, false if not node\n */\n\nexport function clearNodeFolder(options) {\n  options = fillOptionsWithDefaults(options);\n  var method = chooseMethod(options);\n\n  if (method.type === 'node') {\n    return method.clearNodeFolder().then(function () {\n      return true;\n    });\n  } else {\n    return PROMISE_RESOLVED_FALSE;\n  }\n}\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */\n\nvar ENFORCED_OPTIONS;\nexport function enforceOptions(options) {\n  ENFORCED_OPTIONS = options;\n} // PROTOTYPE\n\nBroadcastChannel.prototype = {\n  postMessage: function postMessage(msg) {\n    if (this.closed) {\n      throw new Error('BroadcastChannel.postMessage(): ' + 'Cannot post message after channel has closed ' +\n      /**\n       * In the past when this error appeared, it was realy hard to debug.\n       * So now we log the msg together with the error so it at least\n       * gives some clue about where in your application this happens.\n       */\n      JSON.stringify(msg));\n    }\n\n    return _post(this, 'message', msg);\n  },\n  postInternal: function postInternal(msg) {\n    return _post(this, 'internal', msg);\n  },\n\n  set onmessage(fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _removeListenerObject(this, 'message', this._onML);\n\n    if (fn && typeof fn === 'function') {\n      this._onML = listenObj;\n\n      _addListenerObject(this, 'message', listenObj);\n    } else {\n      this._onML = null;\n    }\n  },\n\n  addEventListener: function addEventListener(type, fn) {\n    var time = this.method.microSeconds();\n    var listenObj = {\n      time: time,\n      fn: fn\n    };\n\n    _addListenerObject(this, type, listenObj);\n  },\n  removeEventListener: function removeEventListener(type, fn) {\n    var obj = this._addEL[type].find(function (obj) {\n      return obj.fn === fn;\n    });\n\n    _removeListenerObject(this, type, obj);\n  },\n  close: function close() {\n    var _this = this;\n\n    if (this.closed) {\n      return;\n    }\n\n    OPEN_BROADCAST_CHANNELS[\"delete\"](this);\n    this.closed = true;\n    var awaitPrepare = this._prepP ? this._prepP : PROMISE_RESOLVED_VOID;\n    this._onML = null;\n    this._addEL.message = [];\n    return awaitPrepare // wait until all current sending are processed\n    .then(function () {\n      return Promise.all(Array.from(_this._uMP));\n    }) // run before-close hooks\n    .then(function () {\n      return Promise.all(_this._befC.map(function (fn) {\n        return fn();\n      }));\n    }) // close the channel\n    .then(function () {\n      return _this.method.close(_this._state);\n    });\n  },\n\n  get type() {\n    return this.method.type;\n  },\n\n  get isClosed() {\n    return this.closed;\n  }\n\n};\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */\n\nfunction _post(broadcastChannel, type, msg) {\n  var time = broadcastChannel.method.microSeconds();\n  var msgObj = {\n    time: time,\n    type: type,\n    data: msg\n  };\n  var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : PROMISE_RESOLVED_VOID;\n  return awaitPrepare.then(function () {\n    var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj); // add/remove to unsend messages list\n\n    broadcastChannel._uMP.add(sendPromise);\n\n    sendPromise[\"catch\"]().then(function () {\n      return broadcastChannel._uMP[\"delete\"](sendPromise);\n    });\n    return sendPromise;\n  });\n}\n\nfunction _prepareChannel(channel) {\n  var maybePromise = channel.method.create(channel.name, channel.options);\n\n  if (isPromise(maybePromise)) {\n    channel._prepP = maybePromise;\n    maybePromise.then(function (s) {\n      // used in tests to simulate slow runtime\n\n      /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/\n      channel._state = s;\n    });\n  } else {\n    channel._state = maybePromise;\n  }\n}\n\nfunction _hasMessageListeners(channel) {\n  if (channel._addEL.message.length > 0) return true;\n  if (channel._addEL.internal.length > 0) return true;\n  return false;\n}\n\nfunction _addListenerObject(channel, type, obj) {\n  channel._addEL[type].push(obj);\n\n  _startListening(channel);\n}\n\nfunction _removeListenerObject(channel, type, obj) {\n  channel._addEL[type] = channel._addEL[type].filter(function (o) {\n    return o !== obj;\n  });\n\n  _stopListening(channel);\n}\n\nfunction _startListening(channel) {\n  if (!channel._iL && _hasMessageListeners(channel)) {\n    // someone is listening, start subscribing\n    var listenerFn = function listenerFn(msgObj) {\n      channel._addEL[msgObj.type].forEach(function (listenerObject) {\n        /**\n         * Getting the current time in JavaScript has no good precision.\n         * So instead of only listening to events that happend 'after' the listener\n         * was added, we also listen to events that happended 100ms before it.\n         * This ensures that when another process, like a WebWorker, sends events\n         * we do not miss them out because their timestamp is a bit off compared to the main process.\n         * Not doing this would make messages missing when we send data directly after subscribing and awaiting a response.\n         * @link https://johnresig.com/blog/accuracy-of-javascript-time/\n         */\n        var hundredMsInMicro = 100 * 1000;\n        var minMessageTime = listenerObject.time - hundredMsInMicro;\n\n        if (msgObj.time >= minMessageTime) {\n          listenerObject.fn(msgObj.data);\n        }\n      });\n    };\n\n    var time = channel.method.microSeconds();\n\n    if (channel._prepP) {\n      channel._prepP.then(function () {\n        channel._iL = true;\n        channel.method.onMessage(channel._state, listenerFn, time);\n      });\n    } else {\n      channel._iL = true;\n      channel.method.onMessage(channel._state, listenerFn, time);\n    }\n  }\n}\n\nfunction _stopListening(channel) {\n  if (channel._iL && !_hasMessageListeners(channel)) {\n    // noone is listening, stop subscribing\n    channel._iL = false;\n    var time = channel.method.microSeconds();\n    channel.method.onMessage(channel._state, null, time);\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}