{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { sendRequest } from './request.js';\n\nconst getPhones = async (oktaAuth, options) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'GET',\n    accessToken: options === null || options === void 0 ? void 0 : options.accessToken,\n    transactionClassName: 'PhoneTransaction'\n  });\n  return transaction;\n};\n\nconst getPhone = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    id\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  });\n  return transaction;\n};\n\nconst addPhone = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    payload\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  });\n  return transaction;\n};\n\nconst deletePhone = async (oktaAuth, options) => {\n  const {\n    id,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'DELETE',\n    accessToken\n  });\n  return transaction;\n};\n\nconst sendPhoneChallenge = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    id,\n    payload\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/challenge`,\n    method: 'POST',\n    payload,\n    accessToken\n  });\n  return transaction;\n};\n\nconst verifyPhoneChallenge = async (oktaAuth, options) => {\n  const {\n    id,\n    payload,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  });\n  return transaction;\n};\n\nexport { addPhone, deletePhone, getPhone, getPhones, sendPhoneChallenge, verifyPhoneChallenge };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAUa,eAAS,GAAqC,OACzDA,QADyD,EAEzDC,OAFyD,KAGvD;EACF,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAAE,uBADyC;IAE9CC,MAAM,EAAE,KAFsC;IAG9CC,WAAW,EAAEL,OAAO,SAAP,WAAO,KAAP,yBAAO,CAAEK,WAHwB;IAI9CC,oBAAoB,EAAE;EAJwB,CAAX,CAArC;EAMA,OAAOL,WAAP;AACA,CAXW;;AAgBA,cAAQ,GAAmC,OACtDF,QADsD,EAEtDC,OAFsD,KAGpD;EACF,MAAM;IAAEK,WAAF;IAAeE;EAAf,IAAsBP,OAA5B;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAA2B,2BAAI,EADY;IAE9CC,MAAM,EAAE,KAFsC;IAG9CC,WAH8C;IAI9CC,oBAAoB,EAAE;EAJwB,CAAX,CAArC;EAMA,OAAOL,WAAP;AACA,CAZW;;AAiBA,cAAQ,GAAmC,OACtDF,QADsD,EAEtDC,OAFsD,KAGzB;EAC7B,MAAM;IAAEK,WAAF;IAAeG;EAAf,IAA2BR,OAAjC;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAAE,uBADyC;IAE9CC,MAAM,EAAE,MAFsC;IAG9CI,OAH8C;IAI9CH,WAJ8C;IAK9CC,oBAAoB,EAAE;EALwB,CAAX,CAArC;EAOA,OAAOL,WAAP;AACA,CAbW;;AAkBA,iBAAW,GAAkC,OACxDF,QADwD,EAExDC,OAFwD,KAGtD;EACF,MAAM;IAAEO,EAAF;IAAMF;EAAN,IAAsBL,OAA5B;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAA2B,2BAAI,EADY;IAE9CC,MAAM,EAAE,QAFsC;IAG9CC;EAH8C,CAAX,CAArC;EAKA,OAAOJ,WAAP;AACA,CAXW;;AAgBA,wBAAkB,GAAkC,OAC/DF,QAD+D,EAE/DC,OAF+D,KAG7D;EACF,MAAM;IAAEK,WAAF;IAAeE,EAAf;IAAmBC;EAAnB,IAA+BR,OAArC;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAA2B,2BAAc,YADE;IAE9CC,MAAM,EAAE,MAFsC;IAG9CI,OAH8C;IAI9CH;EAJ8C,CAAX,CAArC;EAMA,OAAOJ,WAAP;AACA,CAZW;;AAiBA,0BAAoB,GAAkC,OACjEF,QADiE,EAEjEC,OAFiE,KAG/D;EACF,MAAM;IAAEO,EAAF;IAAMC,OAAN;IAAeH;EAAf,IAA+BL,OAArC;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAA2B,2BAAW,SADK;IAE9CC,MAAM,EAAE,MAFsC;IAG9CI,OAH8C;IAI9CH;EAJ8C,CAAX,CAArC;EAMA,OAAOJ,WAAP;AACF,CAZa","names":["oktaAuth","options","transaction","sendRequest","url","method","accessToken","transactionClassName","id","payload"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\myaccount\\phoneApi.ts"],"sourcesContent":["import { sendRequest } from './request';\nimport { \n  IAPIFunction,\n  BaseTransaction, \n  PhoneTransaction\n} from './types';\n\n/**\n * @scope: okta.myaccount.phone.read\n */\nexport const getPhones: IAPIFunction<PhoneTransaction[]> = async (\n  oktaAuth,\n  options?\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'GET',\n    accessToken: options?.accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction[];\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.read\n */\nexport const getPhone: IAPIFunction<PhoneTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { accessToken, id } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const addPhone: IAPIFunction<PhoneTransaction> = async (\n  oktaAuth, \n  options\n): Promise<PhoneTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/phones',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'PhoneTransaction'\n  }) as PhoneTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const deletePhone: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}`,\n    method: 'DELETE',\n    accessToken,\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const sendPhoneChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { accessToken, id, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/challenge`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.phone.manage\n */\nexport const verifyPhoneChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { id, payload, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/phones/${id}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n"]},"metadata":{},"sourceType":"module"}