{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Base/Remediator.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\n\nclass SelectEnrollmentChannel extends Remediator {\n  canRemediate() {\n    if (this.values.channel) {\n      return true;\n    }\n\n    if (this.values.authenticator) {\n      const {\n        id,\n        channel\n      } = this.values.authenticator;\n\n      if (!!id && !!channel) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getNextStep(authClient, context) {\n    const common = super.getNextStep(authClient, context);\n    const options = this.getChannels();\n    const authenticator = context.currentAuthenticator.value;\n    return Object.assign(Object.assign(Object.assign({}, common), options && {\n      options\n    }), {\n      authenticator\n    });\n  }\n\n  getChannels() {\n    var _a;\n\n    const authenticator = getAuthenticatorFromRemediation(this.remediation);\n    const remediationValue = authenticator.value;\n    return (_a = remediationValue.form.value.find(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'channel';\n    })) === null || _a === void 0 ? void 0 : _a.options;\n  }\n\n  getData() {\n    var _a;\n\n    const remediationValue = this.remediation.value[0].value;\n    return {\n      authenticator: {\n        id: remediationValue.form.value[0].value,\n        channel: ((_a = this.values.authenticator) === null || _a === void 0 ? void 0 : _a.channel) || this.values.channel\n      },\n      stateHandle: this.values.stateHandle\n    };\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    delete this.values.authenticators;\n    const filterKey = this.values.channel ? 'channel' : 'authenticator';\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== filterKey);\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n\n}\n\nSelectEnrollmentChannel.remediationName = 'select-enrollment-channel';\nexport { SelectEnrollmentChannel };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAwBM,MAAOA,uBAAP,SAAuCC,UAAvC,CAAgF;EAGpFC,YAAY;IACV,IAAI,KAAKC,MAAL,CAAYC,OAAhB,EAAyB;MACvB,OAAO,IAAP;IACD;;IAED,IAAI,KAAKD,MAAL,CAAYE,aAAhB,EAA+B;MAC7B,MAAM;QAAEC,EAAF;QAAMF;MAAN,IAAkB,KAAKD,MAAL,CAAYE,aAApC;;MACA,IAAI,CAAC,CAACC,EAAF,IAAQ,CAAC,CAACF,OAAd,EAAuB;QACrB,OAAO,IAAP;MACD;IACF;;IAED,OAAO,KAAP;EACD;;EAEDG,WAAW,CAACC,UAAD,EAAmCC,OAAnC,EAAsD;IAC/D,MAAMC,MAAM,GAAG,MAAMH,WAAN,CAAkBC,UAAlB,EAA8BC,OAA9B,CAAf;IACA,MAAME,OAAO,GAAG,KAAKC,WAAL,EAAhB;IACA,MAAMP,aAAa,GAAGI,OAAO,CAACI,oBAAR,CAA6BC,KAAnD;IACA,OACKC,uDAECJ,OAAO,IAAI;MAAEA;IAAF,CAFZ,GAGH;MAAAN;IAAA,CAHG,CADL;EAMD;;EAEOO,WAAW;;;IACjB,MAAMP,aAAa,GAAwBW,+BAA+B,CAAC,KAAKC,WAAN,CAA1E;IACA,MAAMC,gBAAgB,GAAGb,aAAa,CAACS,KAAvC;IACA,OAAO,sBAAgB,CAACK,IAAjB,CAAsBL,KAAtB,CAA4BM,IAA5B,CAAiC;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAcA,IAAI,KAAK,SAAvB;IAAA,CAAjC,OAAoE,IAApE,IAAoEC,aAApE,GAAoE,MAApE,GAAoEA,UAA3E;EACD;;EAEDC,OAAO;;;IAEL,MAAML,gBAAgB,GAAG,KAAKD,WAAL,CAAkBH,KAAlB,CAAyB,CAAzB,EAA4BA,KAArD;IACA,OAAO;MACLT,aAAa,EAAE;QACbC,EAAE,EAAEY,gBAAgB,CAACC,IAAjB,CAAsBL,KAAtB,CAA4B,CAA5B,EAA+BA,KADtB;QAEbV,OAAO,EAAE,EAACkB,UAAKnB,MAAL,CAAYE,aAAb,MAA4C,IAA5C,IAA4CiB,aAA5C,GAA4C,MAA5C,GAA4CA,GAAElB,OAA9C,KAAyD,KAAKD,MAAL,CAAYC;MAFjE,CADV;MAKLoB,WAAW,EAAE,KAAKrB,MAAL,CAAYqB;IALpB,CAAP;EAQD;;EAEDC,qBAAqB;IACnB,KAAKtB,MAAL,GAAc,MAAMsB,qBAAN,EAAd;IACA,OAAO,KAAKtB,MAAL,CAAYuB,cAAnB;IACA,MAAMC,SAAS,GAAG,KAAKxB,MAAL,CAAYC,OAAZ,GAAsB,SAAtB,GAAkC,eAApD;IACA,IAAIwB,aAAa,GAAGb,MAAM,CAACc,IAAP,CAAY,KAAK1B,MAAjB,EAAyB2B,MAAzB,CAAgCC,QAAQ,IAAIA,QAAQ,KAAKJ,SAAzD,CAApB;IACA,OAAOC,aAAa,CAACI,MAAd,CAAqB,CAAC7B,MAAD,EAAS4B,QAAT,KAAsBhB,gCAAKZ,MAAL,GAAW;MAAE,CAAC4B,QAAD,GAAY,KAAK5B,MAAL,CAAY4B,QAAZ;IAAd,CAAX,CAA3C,EAA6F,EAA7F,CAAP;EACD;;AAvDmF;;AAC7E/B,uBAAe,gBAAf,GAAkB,2BAAlB","names":["SelectEnrollmentChannel","Remediator","canRemediate","values","channel","authenticator","id","getNextStep","authClient","context","common","options","getChannels","currentAuthenticator","value","Object","getAuthenticatorFromRemediation","remediation","remediationValue","form","find","name","_a","getData","stateHandle","getValuesAfterProceed","authenticators","filterKey","trimmedValues","keys","filter","valueKey","reduce"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\remediators\\SelectEnrollmentChannel.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Base/Remediator';\nimport { IdxRemediationValueForm, IdxOption, IdxRemediationValue, IdxContext } from '../types/idx-js';\nimport { Authenticator } from '../types';\nimport { getAuthenticatorFromRemediation } from './util';\nimport { OktaAuthIdxInterface } from '../../types';\n\n\nexport type SelectEnrollmentChannelValues = RemediationValues & {\n  channel?: string;\n};\n\nexport class SelectEnrollmentChannel extends Remediator<SelectEnrollmentChannelValues> {\n  static remediationName = 'select-enrollment-channel';\n\n  canRemediate() {\n    if (this.values.channel) {\n      return true;\n    }\n\n    if (this.values.authenticator) {\n      const { id, channel } = this.values.authenticator as Authenticator;\n      if (!!id && !!channel) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, context: IdxContext) {\n    const common = super.getNextStep(authClient, context);\n    const options = this.getChannels();\n    const authenticator = context.currentAuthenticator.value;\n    return {\n      ...common,\n      // TODO: remove options field in the next major version - OKTA-491236\n      ...(options && { options }),\n      authenticator,\n    };\n  }\n\n  private getChannels(): IdxOption[] | undefined {\n    const authenticator: IdxRemediationValue = getAuthenticatorFromRemediation(this.remediation);\n    const remediationValue = authenticator.value as IdxRemediationValueForm;\n    return remediationValue.form.value.find(({ name }) => name === 'channel')?.options;\n  }\n\n  getData() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const remediationValue = this.remediation!.value![0].value as IdxRemediationValueForm;\n    return {\n      authenticator: {\n        id: remediationValue.form.value[0].value,\n        channel: (this.values.authenticator as Authenticator)?.channel || this.values.channel,\n      },\n      stateHandle: this.values.stateHandle,\n\n    };\n  }\n\n  getValuesAfterProceed(): SelectEnrollmentChannelValues {\n    this.values = super.getValuesAfterProceed();\n    delete this.values.authenticators;    // required to prevent infinite loops from auto-remediating via values\n    const filterKey = this.values.channel ? 'channel' : 'authenticator';\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== filterKey);\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}