{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../_virtual/_tslib.js';\nimport { warn } from '../util/console.js';\nimport { split2 } from '../util/misc.js';\nimport * as index from './remediators/index.js';\nimport { GenericRemediator } from './remediators/GenericRemediator/GenericRemediator.js';\nimport { IdxFeature } from './types/api.js';\nimport { isIdxResponse } from './types/idx-js.js';\n\nfunction isTerminalResponse(idxResponse) {\n  var neededToProceed = idxResponse.neededToProceed,\n      interactionCode = idxResponse.interactionCode;\n  return !neededToProceed.length && !interactionCode;\n}\n\nfunction canSkipFn(idxResponse) {\n  return idxResponse.neededToProceed.some(function (_ref) {\n    var name = _ref.name;\n    return name === 'skip';\n  });\n}\n\nfunction canResendFn(idxResponse) {\n  return Object.keys(idxResponse.actions).some(function (actionName) {\n    return actionName.includes('resend');\n  });\n}\n\nfunction getMessagesFromIdxRemediationValue(value) {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n\n  return value.reduce(function (messages, value) {\n    if (value.messages) {\n      messages = [].concat(_toConsumableArray(messages), _toConsumableArray(value.messages.value));\n    }\n\n    if (value.form) {\n      var messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [].concat(_toConsumableArray(messages), _toConsumableArray(messagesFromForm));\n    }\n\n    if (value.options) {\n      var optionValues = [];\n      value.options.forEach(function (option) {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n\n        optionValues = [].concat(_toConsumableArray(optionValues), [option.value]);\n      });\n      var messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [].concat(_toConsumableArray(messages), _toConsumableArray(messagesFromOptions));\n    }\n\n    return messages;\n  }, []);\n}\n\nfunction getMessagesFromResponse(idxResponse, options) {\n  var _a;\n\n  var messages = [];\n  var rawIdxState = idxResponse.rawIdxState,\n      neededToProceed = idxResponse.neededToProceed;\n  var globalMessages = (_a = rawIdxState.messages) === null || _a === void 0 ? void 0 : _a.value.map(function (message) {\n    return message;\n  });\n\n  if (globalMessages) {\n    messages = [].concat(_toConsumableArray(messages), _toConsumableArray(globalMessages));\n  }\n\n  if (!options.useGenericRemediator) {\n    var _iterator = _createForOfIteratorHelper(neededToProceed),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var remediation = _step.value;\n        var fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n\n        if (fieldMessages) {\n          messages = [].concat(_toConsumableArray(messages), _toConsumableArray(fieldMessages));\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  var seen = {};\n  messages = messages.reduce(function (filtered, message) {\n    var _a;\n\n    var key = (_a = message.i18n) === null || _a === void 0 ? void 0 : _a.key;\n\n    if (key && seen[key]) {\n      return filtered;\n    }\n\n    seen[key] = message;\n    filtered = [].concat(_toConsumableArray(filtered), [message]);\n    return filtered;\n  }, []);\n  return messages;\n}\n\nfunction getEnabledFeatures(idxResponse) {\n  var res = [];\n  var actions = idxResponse.actions,\n      neededToProceed = idxResponse.neededToProceed;\n\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY);\n  }\n\n  if (neededToProceed.some(function (_ref2) {\n    var name = _ref2.name;\n    return name === 'select-enroll-profile';\n  })) {\n    res.push(IdxFeature.REGISTRATION);\n  }\n\n  if (neededToProceed.some(function (_ref3) {\n    var name = _ref3.name;\n    return name === 'redirect-idp';\n  })) {\n    res.push(IdxFeature.SOCIAL_IDP);\n  }\n\n  if (neededToProceed.some(function (_ref4) {\n    var name = _ref4.name;\n    return name === 'unlock-account';\n  })) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK);\n  }\n\n  return res;\n}\n\nfunction getAvailableSteps(authClient, idxResponse, useGenericRemediator) {\n  var _a;\n\n  var res = [];\n  var remediatorMap = Object.values(index).reduce(function (map, remediatorClass) {\n    if (remediatorClass.remediationName) {\n      map[remediatorClass.remediationName] = remediatorClass;\n    }\n\n    return map;\n  }, {});\n\n  var _iterator2 = _createForOfIteratorHelper(idxResponse.neededToProceed),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var remediation = _step2.value;\n      var T = getRemediatorClass(remediation, {\n        useGenericRemediator: useGenericRemediator,\n        remediators: remediatorMap\n      });\n\n      if (T) {\n        var remediator = new T(remediation);\n        res.push(remediator.getNextStep(authClient, idxResponse.context));\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _loop = function _loop() {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 1),\n        name = _Object$entries$_i[0];\n\n    var stepObj = {\n      name: name,\n      action: function () {\n        var _action = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", authClient.idx.proceed({\n                    actions: [{\n                      name: name,\n                      params: params\n                    }]\n                  }));\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function action(_x) {\n          return _action.apply(this, arguments);\n        }\n\n        return action;\n      }()\n    };\n\n    if (name.startsWith('currentAuthenticator')) {\n      var _split = split2(name, '-'),\n          _split2 = _slicedToArray(_split, 2),\n          part1 = _split2[0],\n          part2 = _split2[1];\n\n      var actionObj = idxResponse.rawIdxState[part1].value[part2];\n\n      var rest = __rest(actionObj, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\"]);\n\n      var value = (_a = actionObj.value) === null || _a === void 0 ? void 0 : _a.filter(function (item) {\n        return item.name !== 'stateHandle';\n      });\n      stepObj = Object.assign(Object.assign(Object.assign({}, rest), value && {\n        value: value\n      }), stepObj);\n    }\n\n    res.push(stepObj);\n  };\n\n  for (var _i = 0, _Object$entries = Object.entries(idxResponse.actions || {}); _i < _Object$entries.length; _i++) {\n    _loop();\n  }\n\n  return res;\n}\n\nfunction filterValuesForRemediation(idxResponse, remediationName, values) {\n  var remediations = idxResponse.neededToProceed || [];\n  var remediation = remediations.find(function (r) {\n    return r.name === remediationName;\n  });\n\n  if (!remediation) {\n    warn(\"filterValuesForRemediation: \\\"\".concat(remediationName, \"\\\" did not match any remediations\"));\n    return values;\n  }\n\n  var valuesForRemediation = remediation.value.reduce(function (res, entry) {\n    var name = entry.name,\n        value = entry.value;\n\n    if (name === 'stateHandle') {\n      res[name] = value;\n    } else {\n      res[name] = values[name];\n    }\n\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\n\nfunction getRemediatorClass(remediation, options) {\n  var useGenericRemediator = options.useGenericRemediator,\n      remediators = options.remediators;\n\n  if (!remediation) {\n    return undefined;\n  }\n\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n\n  return remediators[remediation.name];\n}\n\nfunction getRemediator(idxRemediations, values, options) {\n  var remediators = options.remediators;\n  var useGenericRemediator = options.useGenericRemediator;\n  var remediator;\n\n  if (options.step) {\n    var remediation = idxRemediations.find(function (_ref5) {\n      var name = _ref5.name;\n      return name === options.step;\n    });\n\n    if (remediation) {\n      var T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      warn(\"step \\\"\".concat(options.step, \"\\\" did not match any remediations\"));\n      return;\n    }\n  }\n\n  var remediatorCandidates = [];\n\n  if (useGenericRemediator) {\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    var _iterator3 = _createForOfIteratorHelper(idxRemediations),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var _remediation = _step3.value;\n        var isRemeditionInFlow = Object.keys(remediators).includes(_remediation.name);\n\n        if (!isRemeditionInFlow) {\n          continue;\n        }\n\n        var _T = getRemediatorClass(_remediation, options);\n\n        remediator = new _T(_remediation, values, options);\n\n        if (remediator.canRemediate()) {\n          return remediator;\n        }\n\n        remediatorCandidates.push(remediator);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n\n  return remediatorCandidates[0];\n}\n\nfunction getNextStep(authClient, remediator, idxResponse) {\n  var nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  var canSkip = canSkipFn(idxResponse);\n  var canResend = canResendFn(idxResponse);\n  return Object.assign(Object.assign(Object.assign({}, nextStep), canSkip && {\n    canSkip: canSkip\n  }), canResend && {\n    canResend: canResend\n  });\n}\n\nfunction handleIdxError(authClient, e) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var idxResponse = isIdxResponse(e) ? e : null;\n\n  if (!idxResponse) {\n    throw e;\n  }\n\n  idxResponse = Object.assign(Object.assign({}, idxResponse), {\n    requestDidSucceed: false\n  });\n  var terminal = isTerminalResponse(idxResponse);\n  var messages = getMessagesFromResponse(idxResponse, options);\n\n  if (terminal) {\n    return {\n      idxResponse: idxResponse,\n      terminal: terminal,\n      messages: messages\n    };\n  } else {\n    var remediator = getRemediator(idxResponse.neededToProceed, {}, options);\n    var nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return Object.assign({\n      idxResponse: idxResponse,\n      messages: messages\n    }, nextStep && {\n      nextStep: nextStep\n    });\n  }\n}\n\nexport { canResendFn, canSkipFn, filterValuesForRemediation, getAvailableSteps, getEnabledFeatures, getMessagesFromIdxRemediationValue, getMessagesFromResponse, getNextStep, getRemediator, handleIdxError, isTerminalResponse };","map":{"version":3,"mappings":"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","names":["isTerminalResponse","idxResponse","neededToProceed","interactionCode","length","canSkipFn","some","name","canResendFn","Object","keys","actions","actionName","includes","getMessagesFromIdxRemediationValue","value","Array","isArray","reduce","messages","form","messagesFromForm","options","optionValues","forEach","option","messagesFromOptions","rawIdxState","globalMessages","_a","map","message","useGenericRemediator","remediation","fieldMessages","seen","filtered","key","i18n","getEnabledFeatures","res","push","IdxFeature","PASSWORD_RECOVERY","REGISTRATION","SOCIAL_IDP","ACCOUNT_UNLOCK","getAvailableSteps","authClient","remediatorMap","values","remediators","remediatorClass","remediationName","T","getRemediatorClass","remediator","getNextStep","context","stepObj","action","params","idx","proceed","startsWith","split2","part1","part2","actionObj","rest","filter","item","entries","filterValuesForRemediation","remediations","find","r","warn","valuesForRemediation","entry","undefined","GenericRemediator","getRemediator","idxRemediations","step","remediatorCandidates","isRemeditionInFlow","canRemediate","nextStep","canSkip","canResend","handleIdxError","e","isIdxResponse","requestDidSucceed","terminal","getMessagesFromResponse"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\util.ts"],"sourcesContent":["import { warn, split2 } from '../util';\nimport * as remediators from './remediators';\nimport { RemediationValues, Remediator, RemediatorConstructor } from './remediators';\nimport { GenericRemediator } from './remediators/GenericRemediator';\nimport { IdxFeature, NextStep, RemediateOptions, RemediationResponse, RunOptions } from './types';\nimport { IdxMessage, IdxRemediation, IdxRemediationValue, IdxResponse, isIdxResponse } from './types/idx-js';\nimport { OktaAuthIdxInterface } from '../types';\n\nexport function isTerminalResponse(idxResponse: IdxResponse) {\n  const { neededToProceed, interactionCode } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nexport function canSkipFn(idxResponse: IdxResponse) {\n  return idxResponse.neededToProceed.some(({ name }) => name === 'skip');\n}\n\nexport function canResendFn(idxResponse: IdxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\n\nexport function getMessagesFromIdxRemediationValue(\n  value?: IdxRemediationValue[]\n): IdxMessage[] | undefined {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n  return value.reduce((messages, value) => {\n    if (value.messages) {\n      messages = [...messages, ...value.messages.value] as never;\n    }\n    if (value.form) {\n      const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [...messages, ...messagesFromForm] as never;\n    } \n    if (value.options) {\n      let optionValues = [];\n      value.options.forEach(option => {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n        optionValues = [...optionValues, option.value] as never;\n      });\n      const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [...messages, ...messagesFromOptions] as never;\n    }\n    return messages;\n  }, []);\n}\n\nexport function getMessagesFromResponse(idxResponse: IdxResponse, options: RunOptions): IdxMessage[] {\n  let messages: IdxMessage[] = [];\n  const { rawIdxState, neededToProceed } = idxResponse;\n\n  // Handle global messages\n  const globalMessages = rawIdxState.messages?.value.map(message => message);\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages] as never;\n  }\n\n  // Handle field messages for current flow\n  // Preserve existing logic for general cases, remove in the next major version\n  // Follow ion response format for top level messages when useGenericRemediator is true\n  if (!options.useGenericRemediator) {\n    for (let remediation of neededToProceed) {\n      const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n      if (fieldMessages) {\n        messages = [...messages, ...fieldMessages] as never;\n      }\n    }\n  }\n\n  // API may return identical error on same field, filter by i18n key\n  const seen = {};\n  messages = messages.reduce((filtered, message) => {\n    const key = message.i18n?.key;\n    if (key && seen[key]) {\n      return filtered;\n    }\n    seen[key] = message;\n    filtered = [...filtered, message] as never;\n    return filtered;\n  }, []);\n  return messages;\n}\n\n\nexport function getEnabledFeatures(idxResponse: IdxResponse): IdxFeature[] {\n  const res = [];\n  const { actions, neededToProceed } = idxResponse;\n\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'select-enroll-profile')) {\n    res.push(IdxFeature.REGISTRATION as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'redirect-idp')) {\n    res.push(IdxFeature.SOCIAL_IDP as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'unlock-account')) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK as never);\n  }\n\n  return res;\n}\n\nexport function getAvailableSteps(\n  authClient: OktaAuthIdxInterface, \n  idxResponse: IdxResponse, \n  useGenericRemediator?: boolean\n): NextStep[] {\n  const res: NextStep[] = [];\n\n  const remediatorMap: Record<string, RemediatorConstructor> = Object.values(remediators)\n    .reduce((map, remediatorClass) => {\n      // Only add concrete subclasses to the map\n      if (remediatorClass.remediationName) {\n        map[remediatorClass.remediationName] = remediatorClass;\n      }\n      return map;\n    }, {});\n\n  for (let remediation of idxResponse.neededToProceed) {\n    const T = getRemediatorClass(remediation, { useGenericRemediator, remediators: remediatorMap });\n    if (T) {\n      const remediator: Remediator = new T(remediation);\n      res.push (remediator.getNextStep(authClient, idxResponse.context) as never);\n    }\n  }\n\n  for (const [name] of Object.entries((idxResponse.actions || {}))) {\n    let stepObj = {\n      name, \n      action: async (params?) => {\n        return authClient.idx.proceed({ \n          actions: [{ name, params }] \n        });\n      }\n    };\n    if (name.startsWith('currentAuthenticator')) {\n      const [part1, part2] = split2(name, '-');\n      const actionObj = idxResponse.rawIdxState[part1].value[part2];\n      /* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const {\n        href, \n        method, \n        rel, \n        accepts, \n        produces, \n        ...rest\n      } = actionObj;\n      /* eslint-enable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const value = actionObj.value?.filter(item => item.name !== 'stateHandle');\n      stepObj = { \n        ...rest,  \n        ...(value && { value }),\n        ...stepObj,\n      };\n    }\n    res.push(stepObj);\n  }\n\n  return res;\n}\n\nexport function filterValuesForRemediation(\n  idxResponse: IdxResponse,\n  remediationName: string,\n  values: RemediationValues\n): RemediationValues {\n  const remediations = idxResponse.neededToProceed || [];\n  const remediation = remediations.find(r => r.name === remediationName);\n  if (!remediation) {\n    // step was specified, but remediation was not found. This is unexpected!\n    warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n    return values;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const valuesForRemediation = remediation.value!.reduce((res, entry) => {\n    const { name, value } = entry;\n    if (name === 'stateHandle') {\n      res[name] = value; // use the stateHandle value in the remediation\n    } else {\n      res[name] = values[name]; // use the value provided by the caller\n    }\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\n\nfunction getRemediatorClass(remediation: IdxRemediation, options: RemediateOptions) {\n  const { useGenericRemediator, remediators } = options;\n  \n  if (!remediation) {\n    return undefined;\n  }\n\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return remediators![remediation.name];\n}\n\n// Return first match idxRemediation in allowed remediators\n// eslint-disable-next-line complexity\nexport function getRemediator(\n  idxRemediations: IdxRemediation[],\n  values: RemediationValues,\n  options: RemediateOptions,\n): Remediator | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const remediators = options.remediators!;\n  const useGenericRemediator = options.useGenericRemediator;\n\n  let remediator: Remediator;\n  // remediation name specified by caller - fast-track remediator lookup \n  if (options.step) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const remediation = idxRemediations.find(({ name }) => name === options.step)!;\n    if (remediation) {\n      const T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      // step was specified, but remediation was not found. This is unexpected!\n      warn(`step \"${options.step}\" did not match any remediations`);\n      return;\n    }\n  }\n\n  const remediatorCandidates: Remediator[] = [];\n  if (useGenericRemediator) {\n    // always pick the first remediation for when use GenericRemediator\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    for (let remediation of idxRemediations) {\n      const isRemeditionInFlow = Object.keys(remediators as object).includes(remediation.name);\n      if (!isRemeditionInFlow) {\n        continue;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const T = getRemediatorClass(remediation, options)!;\n      remediator = new T(remediation, values, options);\n      if (remediator.canRemediate()) {\n        // found the remediator\n        return remediator;\n      }\n      // remediator cannot handle the current values\n      // maybe return for next step\n      remediatorCandidates.push(remediator);  \n    }\n  }\n  \n  return remediatorCandidates[0];\n}\n\n\nexport function getNextStep(\n  authClient: OktaAuthIdxInterface, remediator: Remediator, idxResponse: IdxResponse\n): NextStep {\n  const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return {\n    ...nextStep,\n    ...(canSkip && {canSkip}),\n    ...(canResend && {canResend}),\n  };\n}\n\nexport function handleIdxError(authClient: OktaAuthIdxInterface, e, options = {}): RemediationResponse {\n  // Handle idx messages\n  let idxResponse = isIdxResponse(e) ? e : null;\n  if (!idxResponse) {\n    // Thrown error terminates the interaction with idx\n    throw e;\n  }\n  idxResponse = {\n    ...idxResponse,\n    requestDidSucceed: false\n  };\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getMessagesFromResponse(idxResponse, options);\n  if (terminal) {\n    return { idxResponse, terminal, messages };\n  } else {\n    const remediator = getRemediator(idxResponse.neededToProceed, {}, options);\n    const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return {\n      idxResponse,\n      messages,\n      ...(nextStep && { nextStep }),\n    };\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}