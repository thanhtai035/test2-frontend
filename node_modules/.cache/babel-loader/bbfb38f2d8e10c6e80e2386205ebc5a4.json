{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getOAuthUrls } from './oauth.js';\n\nfunction createOAuthMeta(sdk, tokenParams) {\n  var issuer = sdk.options.issuer;\n  var urls = getOAuthUrls(sdk, tokenParams);\n  var oauthMeta = {\n    issuer: issuer,\n    urls: urls,\n    clientId: tokenParams.clientId,\n    redirectUri: tokenParams.redirectUri,\n    responseType: tokenParams.responseType,\n    responseMode: tokenParams.responseMode,\n    scopes: tokenParams.scopes,\n    state: tokenParams.state,\n    nonce: tokenParams.nonce,\n    ignoreSignature: tokenParams.ignoreSignature\n  };\n\n  if (tokenParams.pkce === false) {\n    return oauthMeta;\n  }\n\n  var pkceMeta = Object.assign(Object.assign({}, oauthMeta), {\n    codeVerifier: tokenParams.codeVerifier,\n    codeChallengeMethod: tokenParams.codeChallengeMethod,\n    codeChallenge: tokenParams.codeChallenge\n  });\n  return pkceMeta;\n}\n\nexport { createOAuthMeta };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAIgB,yBACdA,GADc,EAEdC,WAFc,EAEU;EAExB,IAAMC,MAAM,GAAGF,GAAG,CAACG,OAAJ,CAAYD,MAA3B;EACA,IAAME,IAAI,GAAGC,YAAY,CAACL,GAAD,EAAMC,WAAN,CAAzB;EACA,IAAMK,SAAS,GAAyB;IACtCJ,MAAM,EAANA,MADsC;IAEtCE,IAAI,EAAJA,IAFsC;IAGtCG,QAAQ,EAAEN,WAAW,CAACM,QAHgB;IAItCC,WAAW,EAAEP,WAAW,CAACO,WAJa;IAKtCC,YAAY,EAAER,WAAW,CAACQ,YALY;IAMtCC,YAAY,EAAET,WAAW,CAACS,YANY;IAOtCC,MAAM,EAAEV,WAAW,CAACU,MAPkB;IAQtCC,KAAK,EAAEX,WAAW,CAACW,KARmB;IAStCC,KAAK,EAAEZ,WAAW,CAACY,KATmB;IAUtCC,eAAe,EAAEb,WAAW,CAACa;EAVS,CAAxC;;EAaA,IAAIb,WAAW,CAACc,IAAZ,KAAqB,KAAzB,EAAgC;IAE9B,OAAOT,SAAP;EACD;;EAED,IAAMU,QAAQ,mCACTV,SADS,GACA;IACZW,YAAY,EAAEhB,WAAW,CAACgB,YADd;IAEZC,mBAAmB,EAAEjB,WAAW,CAACiB,mBAFrB;IAGZC,aAAa,EAAElB,WAAW,CAACkB;EAHf,CADA,CAAd;EAOA,OAAOH,QAAP;AACF","names":["sdk","tokenParams","issuer","options","urls","getOAuthUrls","oauthMeta","clientId","redirectUri","responseType","responseMode","scopes","state","nonce","ignoreSignature","pkce","pkceMeta","codeVerifier","codeChallengeMethod","codeChallenge"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\util\\oauthMeta.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { OAuthTransactionMeta, OktaAuthOptionsInterface, PKCETransactionMeta, TokenParams } from '../../types';\nimport { getOAuthUrls } from './oauth';\n\nexport function createOAuthMeta(\n  sdk: OktaAuthOptionsInterface, \n  tokenParams: TokenParams\n): OAuthTransactionMeta | PKCETransactionMeta {\n  const issuer = sdk.options.issuer!;\n  const urls = getOAuthUrls(sdk, tokenParams);\n  const oauthMeta: OAuthTransactionMeta = {\n    issuer,\n    urls,\n    clientId: tokenParams.clientId!,\n    redirectUri: tokenParams.redirectUri!,\n    responseType: tokenParams.responseType!,\n    responseMode: tokenParams.responseMode!,\n    scopes: tokenParams.scopes!,\n    state: tokenParams.state!,\n    nonce: tokenParams.nonce!,\n    ignoreSignature: tokenParams.ignoreSignature!,\n  };\n\n  if (tokenParams.pkce === false) {\n    // Implicit flow or authorization_code without PKCE\n    return oauthMeta;\n  }\n\n  const pkceMeta: PKCETransactionMeta = {\n    ...oauthMeta,\n    codeVerifier: tokenParams.codeVerifier!,\n    codeChallengeMethod: tokenParams.codeChallengeMethod!,\n    codeChallenge: tokenParams.codeChallenge!,\n  };\n\n  return pkceMeta;\n}\n"]},"metadata":{},"sourceType":"module"}