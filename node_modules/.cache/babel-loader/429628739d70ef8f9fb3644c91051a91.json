{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { isBrowser } from '../features.js';\nimport '../idx/types/api.js';\nimport { EVENT_ADDED, EVENT_REMOVED, EVENT_RENEWED, EVENT_SET_STORAGE } from '../types/TokenManager.js';\nimport '../myaccount/types.js';\n\nvar SyncStorageService = /*#__PURE__*/function () {\n  function SyncStorageService(tokenManager) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, SyncStorageService);\n\n    this.started = false;\n    this.enablePostMessage = true;\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.onTokenAddedHandler = this.onTokenAddedHandler.bind(this);\n    this.onTokenRemovedHandler = this.onTokenRemovedHandler.bind(this);\n    this.onTokenRenewedHandler = this.onTokenRenewedHandler.bind(this);\n    this.onSetStorageHandler = this.onSetStorageHandler.bind(this);\n    this.onSyncMessageHandler = this.onSyncMessageHandler.bind(this);\n  }\n\n  _createClass(SyncStorageService, [{\n    key: \"requiresLeadership\",\n    value: function requiresLeadership() {\n      return false;\n    }\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.options.syncStorage && isBrowser();\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var syncChannelName;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.canStart()) {\n                  _context.next = 11;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.stop();\n\n              case 3:\n                syncChannelName = this.options.syncChannelName;\n                this.channel = new BroadcastChannel(syncChannelName);\n                this.tokenManager.on(EVENT_ADDED, this.onTokenAddedHandler);\n                this.tokenManager.on(EVENT_REMOVED, this.onTokenRemovedHandler);\n                this.tokenManager.on(EVENT_RENEWED, this.onTokenRenewedHandler);\n                this.tokenManager.on(EVENT_SET_STORAGE, this.onSetStorageHandler);\n                this.channel.addEventListener('message', this.onSyncMessageHandler);\n                this.started = true;\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _a, _b;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.started) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                this.tokenManager.off(EVENT_ADDED, this.onTokenAddedHandler);\n                this.tokenManager.off(EVENT_REMOVED, this.onTokenRemovedHandler);\n                this.tokenManager.off(EVENT_RENEWED, this.onTokenRenewedHandler);\n                this.tokenManager.off(EVENT_SET_STORAGE, this.onSetStorageHandler);\n                (_a = this.channel) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', this.onSyncMessageHandler);\n                _context2.next = 8;\n                return (_b = this.channel) === null || _b === void 0 ? void 0 : _b.close();\n\n              case 8:\n                this.channel = undefined;\n                this.started = false;\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"onTokenAddedHandler\",\n    value: function onTokenAddedHandler(key, token) {\n      var _a;\n\n      if (!this.enablePostMessage) {\n        return;\n      }\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_ADDED,\n        key: key,\n        token: token\n      });\n    }\n  }, {\n    key: \"onTokenRemovedHandler\",\n    value: function onTokenRemovedHandler(key, token) {\n      var _a;\n\n      if (!this.enablePostMessage) {\n        return;\n      }\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_REMOVED,\n        key: key,\n        token: token\n      });\n    }\n  }, {\n    key: \"onTokenRenewedHandler\",\n    value: function onTokenRenewedHandler(key, token, oldToken) {\n      var _a;\n\n      if (!this.enablePostMessage) {\n        return;\n      }\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_RENEWED,\n        key: key,\n        token: token,\n        oldToken: oldToken\n      });\n    }\n  }, {\n    key: \"onSetStorageHandler\",\n    value: function onSetStorageHandler(storage) {\n      var _a;\n\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n        type: EVENT_SET_STORAGE,\n        storage: storage\n      });\n    }\n  }, {\n    key: \"onSyncMessageHandler\",\n    value: function onSyncMessageHandler(msg) {\n      this.enablePostMessage = false;\n\n      switch (msg.type) {\n        case EVENT_SET_STORAGE:\n          this.tokenManager.getStorage().setStorage(msg.storage);\n          break;\n\n        case EVENT_ADDED:\n          this.tokenManager.emitAdded(msg.key, msg.token);\n          this.tokenManager.setExpireEventTimeout(msg.key, msg.token);\n          break;\n\n        case EVENT_REMOVED:\n          this.tokenManager.clearExpireEventTimeout(msg.key);\n          this.tokenManager.emitRemoved(msg.key, msg.token);\n          break;\n\n        case EVENT_RENEWED:\n          this.tokenManager.emitRenewed(msg.key, msg.token, msg.oldToken);\n          break;\n      }\n\n      this.enablePostMessage = true;\n    }\n  }]);\n\n  return SyncStorageService;\n}();\n\nexport { SyncStorageService };","map":{"version":3,"mappings":"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","names":["SyncStorageService","tokenManager","options","started","enablePostMessage","onTokenAddedHandler","bind","onTokenRemovedHandler","onTokenRenewedHandler","onSetStorageHandler","onSyncMessageHandler","syncStorage","isBrowser","canStart","stop","syncChannelName","channel","BroadcastChannel","on","EVENT_ADDED","EVENT_REMOVED","EVENT_RENEWED","EVENT_SET_STORAGE","addEventListener","off","_a","removeEventListener","_b","undefined","key","token","postMessage","type","oldToken","storage","msg","getStorage","setStorage","emitAdded","setExpireEventTimeout","clearExpireEventTimeout","emitRemoved","emitRenewed"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\services\\SyncStorageService.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { TokenManager } from '../TokenManager';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { isBrowser } from '../features';\nimport {\n  ServiceManagerOptions, ServiceInterface, Token, Tokens, \n  EVENT_ADDED, EVENT_REMOVED, EVENT_RENEWED, EVENT_SET_STORAGE\n} from '../types';\n\nexport type SyncMessage = {\n  type: string;\n  key?: string;\n  token?: Token;\n  oldToken?: Token;\n  storage?: Tokens;\n};\nexport class SyncStorageService implements ServiceInterface {\n  private tokenManager: TokenManager;\n  private options: ServiceManagerOptions;\n  private channel?: BroadcastChannel<SyncMessage>;\n  private started = false;\n  private enablePostMessage = true;\n\n  constructor(tokenManager: TokenManager, options: ServiceManagerOptions = {}) {\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.onTokenAddedHandler = this.onTokenAddedHandler.bind(this);\n    this.onTokenRemovedHandler = this.onTokenRemovedHandler.bind(this);\n    this.onTokenRenewedHandler = this.onTokenRenewedHandler.bind(this);\n    this.onSetStorageHandler = this.onSetStorageHandler.bind(this);\n    this.onSyncMessageHandler = this.onSyncMessageHandler.bind(this);\n  }\n\n  requiresLeadership() {\n    return false;\n  }\n\n  isStarted() {\n    return this.started;\n  }\n\n  canStart() {\n    return !!this.options.syncStorage && isBrowser();\n  }\n\n  async start() {\n    if (this.canStart()) {\n      await this.stop();\n      const { syncChannelName } = this.options;\n      this.channel = new BroadcastChannel(syncChannelName as string);\n      this.tokenManager.on(EVENT_ADDED, this.onTokenAddedHandler);\n      this.tokenManager.on(EVENT_REMOVED, this.onTokenRemovedHandler);\n      this.tokenManager.on(EVENT_RENEWED, this.onTokenRenewedHandler);\n      this.tokenManager.on(EVENT_SET_STORAGE, this.onSetStorageHandler);\n      this.channel.addEventListener('message', this.onSyncMessageHandler);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      this.tokenManager.off(EVENT_ADDED, this.onTokenAddedHandler);\n      this.tokenManager.off(EVENT_REMOVED, this.onTokenRemovedHandler);\n      this.tokenManager.off(EVENT_RENEWED, this.onTokenRenewedHandler);\n      this.tokenManager.off(EVENT_SET_STORAGE, this.onSetStorageHandler);\n      this.channel?.removeEventListener('message', this.onSyncMessageHandler);\n      await this.channel?.close();\n      this.channel = undefined;\n      this.started = false;\n    }\n  }\n\n  private onTokenAddedHandler(key: string, token: Token) {\n    if (!this.enablePostMessage) {\n      return;\n    }\n    this.channel?.postMessage({\n      type: EVENT_ADDED,\n      key,\n      token\n    });\n  }\n\n  private onTokenRemovedHandler(key: string, token: Token) {\n    if (!this.enablePostMessage) {\n      return;\n    }\n    this.channel?.postMessage({\n      type: EVENT_REMOVED,\n      key,\n      token\n    });\n  }\n\n  private onTokenRenewedHandler(key: string, token: Token, oldToken?: Token) {\n    if (!this.enablePostMessage) {\n      return;\n    }\n    this.channel?.postMessage({\n      type: EVENT_RENEWED,\n      key,\n      token,\n      oldToken\n    });\n  }\n\n  private onSetStorageHandler(storage: Tokens) {\n    this.channel?.postMessage({\n      type: EVENT_SET_STORAGE,\n      storage\n    });\n  }\n\n  /* eslint-disable complexity */\n  private onSyncMessageHandler(msg: SyncMessage) {\n    // Notes:\n    // 1. Using `enablePostMessage` flag here to prevent sync message loop.\n    //    If this flag is on, tokenManager event handlers do not post sync message.\n    // 2. IE11 has known issue with synchronization of LocalStorage cross tabs.\n    //    One workaround is to set empty event handler for `window.onstorage`.\n    //    But it's not 100% working, sometimes you still get old value from LocalStorage.\n    //    Better approch is to explicitly udpate LocalStorage with `setStorage`.\n\n    this.enablePostMessage = false;\n    switch (msg.type) {\n      case EVENT_SET_STORAGE:\n        this.tokenManager.getStorage().setStorage(msg.storage);\n        break;\n      case EVENT_ADDED:\n        this.tokenManager.emitAdded(msg.key, msg.token);\n        this.tokenManager.setExpireEventTimeout(msg.key, msg.token);\n        break;\n      case EVENT_REMOVED:\n        this.tokenManager.clearExpireEventTimeout(msg.key);\n        this.tokenManager.emitRemoved(msg.key, msg.token);\n        break;\n      case EVENT_RENEWED:\n        this.tokenManager.emitRenewed(msg.key, msg.token, msg.oldToken);\n        break;\n      default:\n        break;\n    }\n    this.enablePostMessage = true;\n  }\n} "]},"metadata":{},"sourceType":"module"}