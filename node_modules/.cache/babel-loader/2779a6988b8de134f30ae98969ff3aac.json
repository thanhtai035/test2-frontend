{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Remediator.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { compareAuthenticators } from '../../authenticator/util.js';\n\nclass AuthenticatorData extends Remediator {\n  constructor(remediation) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(remediation, values);\n    this.authenticator = this.getAuthenticator();\n    this.formatAuthenticatorData();\n  }\n\n  formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n\n      if (data) {\n        this.values.authenticatorsData.push(data);\n      }\n    }\n  }\n\n  getAuthenticatorData() {\n    return this.values.authenticatorsData.find(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  canRemediate() {\n    return this.values.authenticatorsData.some(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  getNextStep(authClient) {\n    const common = super.getNextStep(authClient);\n    const options = this.getMethodTypes();\n    return Object.assign(Object.assign({}, common), options && {\n      options\n    });\n  }\n\n  mapAuthenticatorDataFromValues(authenticatorData) {\n    let {\n      methodType,\n      authenticator\n    } = this.values;\n\n    if (!methodType && isAuthenticator(authenticator)) {\n      methodType = authenticator === null || authenticator === void 0 ? void 0 : authenticator.methodType;\n    }\n\n    const {\n      id,\n      enrollmentId\n    } = this.authenticator;\n    const data = Object.assign(Object.assign({\n      id,\n      enrollmentId\n    }, authenticatorData && authenticatorData), methodType && {\n      methodType\n    });\n    return data.methodType ? data : null;\n  }\n\n  getAuthenticatorFromRemediation() {\n    const authenticator = this.remediation.value.find(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'authenticator';\n    });\n    return authenticator;\n  }\n\n  getMethodTypes() {\n    var _a;\n\n    const authenticator = this.getAuthenticatorFromRemediation();\n    return (_a = authenticator.form.value.find(_ref2 => {\n      let {\n        name\n      } = _ref2;\n      return name === 'methodType';\n    })) === null || _a === void 0 ? void 0 : _a.options;\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticatorsData = this.values.authenticatorsData.filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return Object.assign(Object.assign({}, this.values), {\n      authenticatorsData\n    });\n  }\n\n}\n\nexport { AuthenticatorData };","map":{"version":3,"mappings":"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","names":["AuthenticatorData","Remediator","constructor","values","remediation","authenticator","getAuthenticator","formatAuthenticatorData","authenticatorData","getAuthenticatorData","authenticatorsData","map","data","compareAuthenticators","mapAuthenticatorDataFromValues","push","find","canRemediate","some","getNextStep","authClient","common","options","getMethodTypes","Object","methodType","isAuthenticator","id","enrollmentId","getAuthenticatorFromRemediation","value","name","form","_a","getValuesAfterProceed","filter"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\remediators\\Base\\AuthenticatorData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { IdxRemediationValue, IdxOption, IdxRemediation, IdxAuthenticator } from '../../types/idx-js';\nimport { isAuthenticator } from '../../types';\nimport { compareAuthenticators } from '../../authenticator/util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\nexport type AuthenticatorDataValues = RemediationValues & {\n  methodType?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class AuthenticatorData<T extends AuthenticatorDataValues = AuthenticatorDataValues> extends Remediator<T> {\n  authenticator: IdxAuthenticator;\n\n  constructor(remediation: IdxRemediation, values: T = {} as T) {\n    super(remediation, values);\n\n    // set before other data calculation\n    this.authenticator = this.getAuthenticator()!;\n\n    this.formatAuthenticatorData();\n  }\n\n  protected formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData!.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n      if (data) {\n        this.values.authenticatorsData!.push(data);\n      }\n    }\n  }\n\n  protected getAuthenticatorData() {\n    return this.values.authenticatorsData!\n      .find((data) => compareAuthenticators(this.authenticator, data));\n  }\n\n  canRemediate() {\n    return this.values.authenticatorsData!\n      .some(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  // TODO: remove this override method in the next major version - OKTA-491236\n  getNextStep(authClient: OktaAuthIdxInterface) {\n    const common = super.getNextStep(authClient);\n    const options = this.getMethodTypes();\n    return { \n      ...common, \n      ...(options && { options }) \n    };\n  }\n\n  protected mapAuthenticatorDataFromValues(authenticatorData?) {\n    // add methodType to authenticatorData if it exists in values\n    let { methodType, authenticator } = this.values;\n    if (!methodType && isAuthenticator(authenticator)) {\n     methodType = authenticator?.methodType;\n    }\n    \n    const { id, enrollmentId } = this.authenticator;\n    const data = { \n      id,\n      enrollmentId,\n      ...(authenticatorData && authenticatorData),\n      ...(methodType && { methodType }) \n    };\n\n    return data.methodType ? data : null;\n  }\n\n  protected getAuthenticatorFromRemediation(): IdxRemediationValue {\n    const authenticator = this.remediation.value!\n      .find(({ name }) => name === 'authenticator') as IdxRemediationValue;\n    return authenticator;\n  }\n\n  private getMethodTypes(): IdxOption[] {\n    const authenticator: IdxRemediationValue = this.getAuthenticatorFromRemediation();\n    return authenticator.form!.value.find(({ name }) => name === 'methodType')?.options as IdxOption[];\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticatorData\n    const authenticatorsData = this.values.authenticatorsData!\n      .filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return { ...this.values, authenticatorsData };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}