{"ast":null,"code":"import _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Authenticator } from './Authenticator.js';\n\nvar SecurityQuestionVerification = /*#__PURE__*/function (_Authenticator) {\n  _inherits(SecurityQuestionVerification, _Authenticator);\n\n  var _super = _createSuper(SecurityQuestionVerification);\n\n  function SecurityQuestionVerification() {\n    _classCallCheck(this, SecurityQuestionVerification);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SecurityQuestionVerification, [{\n    key: \"canVerify\",\n    value: function canVerify(values) {\n      var credentials = values.credentials;\n\n      if (credentials && credentials.answer) {\n        return true;\n      }\n\n      var answer = values.answer;\n      return !!answer;\n    }\n  }, {\n    key: \"mapCredentials\",\n    value: function mapCredentials(values) {\n      var answer = values.answer;\n\n      if (!answer) {\n        return;\n      }\n\n      return {\n        questionKey: this.meta.contextualData.enrolledQuestion.questionKey,\n        answer: answer\n      };\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs() {\n      return [{\n        name: 'answer',\n        type: 'string',\n        label: 'Answer',\n        required: true\n      }];\n    }\n  }]);\n\n  return SecurityQuestionVerification;\n}(Authenticator);\n\nexport { SecurityQuestionVerification };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;IAQaA,4B;;;;;;;;;;;;;WACX,mBAAUC,MAAV,EAAoD;MAClD,IAAQC,WAAR,GAAwBD,MAAxB,CAAQC,WAAR;;MACA,IAAIA,WAAW,IAAIA,WAAW,CAACC,MAA/B,EAAuC;QACrC,OAAO,IAAP;MACD;;MACD,IAAQA,MAAR,GAAmBF,MAAnB,CAAQE,MAAR;MACA,OAAO,CAAC,CAACA,MAAT;IACD;;;WAED,wBAAeF,MAAf,EAAyD;MACvD,IAAQE,MAAR,GAAmBF,MAAnB,CAAQE,MAAR;;MACA,IAAI,CAACA,MAAL,EAAa;QACX;MACD;;MACD,OAAO;QACLC,WAAW,EAAE,KAAKC,IAAL,CAAUC,cAAV,CAA0BC,gBAA1B,CAA4CH,WADpD;QAELD,MAAM,EAANA;MAFK,CAAP;IAID;;;WAED,qBAAS;MACP,OAAO,CACL;QAAEK,IAAI,EAAE,QAAR;QAAkBC,IAAI,EAAE,QAAxB;QAAkCC,KAAK,EAAE,QAAzC;QAAmDC,QAAQ,EAAE;MAA7D,CADK,CAAP;IAGD;;;;EAzB+CC,a","names":["SecurityQuestionVerification","values","credentials","answer","questionKey","meta","contextualData","enrolledQuestion","name","type","label","required","Authenticator"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\authenticator\\SecurityQuestionVerification.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { Authenticator, Credentials } from './Authenticator';\n\nexport interface SecurityQuestionVerificationValues {\n  answer?: string;\n  credentials?: Credentials;\n}\n\nexport class SecurityQuestionVerification extends Authenticator<SecurityQuestionVerificationValues> {\n  canVerify(values: SecurityQuestionVerificationValues) {\n    const { credentials } = values;\n    if (credentials && credentials.answer) {\n      return true;\n    }\n    const { answer } = values;\n    return !!answer;\n  }\n\n  mapCredentials(values: SecurityQuestionVerificationValues): Credentials | undefined {\n    const { answer } = values;\n    if (!answer) {\n      return;\n    }\n    return {\n      questionKey: this.meta.contextualData!.enrolledQuestion!.questionKey,\n      answer\n    };\n  }\n\n  getInputs() {\n    return [\n      { name: 'answer', type: 'string', label: 'Answer', required: true }\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}