{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { hasSavedInteractionHandle } from './transactionMeta.js';\nimport { startTransaction } from './startTransaction.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { IdxFeature } from './types/api.js';\nimport '../myaccount/types.js';\n\nasync function register(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!hasSavedInteractionHandle(authClient)) {\n    const {\n      enabledFeatures,\n      availableSteps\n    } = await startTransaction(authClient, Object.assign(Object.assign({}, options), {\n      flow: 'register',\n      autoRemediate: false\n    }));\n\n    if (!options.activationToken && enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION)) {\n      const error = new AuthSdkError('Registration is not supported based on your current org configuration.');\n      throw error;\n    }\n\n    if (options.activationToken && (availableSteps === null || availableSteps === void 0 ? void 0 : availableSteps.some(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'identify';\n    }))) {\n      const error = new AuthSdkError('activationToken is not supported based on your current org configuration.');\n      throw error;\n    }\n  }\n\n  return run(authClient, Object.assign(Object.assign({}, options), {\n    flow: 'register'\n  }));\n}\n\nexport { register };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAwBO,eAAeA,QAAf,CACLC,UADK,EAC8D;EAAA,IAAjCC,OAAiC,uEAAF,EAAE;;EAInE,IAAI,CAACC,yBAAyB,CAACF,UAAD,CAA9B,EAA4C;IAC1C,MAAM;MAAEG,eAAF;MAAmBC;IAAnB,IAAsC,MAAMC,gBAAgB,CAACL,UAAD,EAAWM,gCACxEL,OADwE,GACjE;MACVM,IAAI,EAAE,UADI;MAEVC,aAAa,EAAE;IAFL,CADiE,CAAX,CAAlE;;IAKA,IAAI,CAACP,OAAO,CAACQ,eAAT,IAA4BN,eAA5B,IAA+C,CAACA,eAAe,CAACO,QAAhB,CAAyBC,UAAU,CAACC,YAApC,CAApD,EAAuG;MACrG,MAAMC,KAAK,GAAG,IAAIC,YAAJ,CAAiB,wEAAjB,CAAd;MACA,MAAMD,KAAN;IAED;;IACD,IAAIZ,OAAO,CAACQ,eAAR,KAA2BL,cAAc,SAAd,kBAAc,WAAd,GAAc,MAAd,iBAAc,CAAEW,IAAhB,CAAqB;MAAA,IAAC;QAAEC;MAAF,CAAD;MAAA,OAAcA,IAAI,KAAK,UAAvB;IAAA,CAArB,CAA3B,CAAJ,EAAwF;MACtF,MAAMH,KAAK,GAAG,IAAIC,YAAJ,CAAiB,2EAAjB,CAAd;MACA,MAAMD,KAAN;IAED;EACF;;EAED,OAAOI,GAAG,CAACjB,UAAD,EACLM,0CAAO;IACVC,IAAI,EAAE;EADI,CAAP,CADK,CAAV;AAIF","names":["register","authClient","options","hasSavedInteractionHandle","enabledFeatures","availableSteps","startTransaction","Object","flow","autoRemediate","activationToken","includes","IdxFeature","REGISTRATION","error","AuthSdkError","some","name","run"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\register.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run } from './run';\nimport { hasSavedInteractionHandle } from './transactionMeta';\nimport { startTransaction } from './startTransaction';\nimport { AuthSdkError } from '../errors';\nimport { \n  RegistrationOptions, \n  IdxTransaction, \n  OktaAuthIdxInterface, \n  IdxFeature,\n} from '../types';\n\nexport async function register(\n  authClient: OktaAuthIdxInterface, options: RegistrationOptions = {}\n): Promise<IdxTransaction> {\n\n  // Only check at the beginning of the transaction\n  if (!hasSavedInteractionHandle(authClient)) {\n    const { enabledFeatures, availableSteps } = await startTransaction(authClient, {\n      ...options,\n      flow: 'register',\n      autoRemediate: false\n    });\n    if (!options.activationToken && enabledFeatures && !enabledFeatures.includes(IdxFeature.REGISTRATION)) {\n      const error = new AuthSdkError('Registration is not supported based on your current org configuration.');\n      throw error;\n    // return { status: IdxStatus.FAILURE, error } as unknown as IdxTransaction; // TODO: wny not just throw the error?\n    }\n    if (options.activationToken && availableSteps?.some(({ name }) => name === 'identify')) {\n      const error = new AuthSdkError('activationToken is not supported based on your current org configuration.');\n      throw error;\n    // return { status: IdxStatus.FAILURE, error } as unknown as IdxTransaction; // TODO: wny not just throw the error?\n    }\n  }\n\n  return run(authClient, {\n    ...options,\n    flow: 'register'\n  });\n}\n"]},"metadata":{},"sourceType":"module"}