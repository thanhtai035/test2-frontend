{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { clone } from '../util/object.js';\nimport { createOAuthMeta } from './util/oauthMeta.js';\nimport { prepareTokenParams } from './util/prepareTokenParams.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { buildAuthorizeParams } from './endpoints/authorize.js';\n\nfunction getWithRedirect(_x, _x2) {\n  return _getWithRedirect.apply(this, arguments);\n}\n\nfunction _getWithRedirect() {\n  _getWithRedirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, options) {\n    var tokenParams,\n        meta,\n        requestUrl,\n        _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(_args.length > 2)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", Promise.reject(new AuthSdkError('As of version 3.0, \"getWithRedirect\" takes only a single set of options')));\n\n          case 2:\n            options = clone(options) || {};\n            _context.next = 5;\n            return prepareTokenParams(sdk, options);\n\n          case 5:\n            tokenParams = _context.sent;\n            meta = createOAuthMeta(sdk, tokenParams);\n            requestUrl = meta.urls.authorizeUrl + buildAuthorizeParams(tokenParams);\n            sdk.transactionManager.save(meta, {\n              oauth: true\n            });\n\n            sdk.token.getWithRedirect._setLocation(requestUrl);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getWithRedirect.apply(this, arguments);\n}\n\nexport { getWithRedirect };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;SAmBsBA,e;;;;;gFAAf,iBAA+BC,GAA/B,EAA2DC,OAA3D;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,MACD,MAAUC,MAAV,GAAmB,CADlB;cAAA;cAAA;YAAA;;YAAA,iCAEIC,OAAO,CAACC,MAAR,CAAe,IAAIC,YAAJ,CAAiB,yEAAjB,CAAf,CAFJ;;UAAA;YAKLJ,OAAO,GAAGK,KAAK,CAACL,OAAD,CAAL,IAAkB,EAA5B;YALK;YAAA,OAOqBM,kBAAkB,CAACP,GAAD,EAAMC,OAAN,CAPvC;;UAAA;YAOCO,WAPD;YAQCC,IARD,GAQQC,eAAe,CAACV,GAAD,EAAMQ,WAAN,CARvB;YASCG,UATD,GAScF,IAAI,CAACG,IAAL,CAAUC,YAAV,GAAyBC,oBAAoB,CAACN,WAAD,CAT3D;YAULR,GAAG,CAACe,kBAAJ,CAAuBC,IAAvB,CAA4BP,IAA5B,EAAkC;cAAEQ,KAAK,EAAE;YAAT,CAAlC;;YACAjB,GAAG,CAACkB,KAAJ,CAAUnB,eAAV,CAA0BoB,YAA1B,CAAuCR,UAAvC;;UAXK;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["getWithRedirect","sdk","options","length","Promise","reject","AuthSdkError","clone","prepareTokenParams","tokenParams","meta","createOAuthMeta","requestUrl","urls","authorizeUrl","buildAuthorizeParams","transactionManager","save","oauth","token","_setLocation"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\getWithRedirect.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { OktaAuthOIDCInterface, TokenParams } from '../types';\nimport { clone } from '../util';\nimport { prepareTokenParams, createOAuthMeta } from './util';\nimport { buildAuthorizeParams } from './endpoints/authorize';\n\nexport async function getWithRedirect(sdk: OktaAuthOIDCInterface, options?: TokenParams): Promise<void> {\n  if (arguments.length > 2) {\n    return Promise.reject(new AuthSdkError('As of version 3.0, \"getWithRedirect\" takes only a single set of options'));\n  }\n\n  options = clone(options) || {};\n\n  const tokenParams = await prepareTokenParams(sdk, options);\n  const meta = createOAuthMeta(sdk, tokenParams);\n  const requestUrl = meta.urls.authorizeUrl + buildAuthorizeParams(tokenParams);\n  sdk.transactionManager.save(meta, { oauth: true });\n  sdk.token.getWithRedirect._setLocation(requestUrl);\n}\n"]},"metadata":{},"sourceType":"module"}