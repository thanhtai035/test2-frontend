{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../../errors/AuthSdkError.js';\nimport { AuthenticatorData } from './Base/AuthenticatorData.js';\n\nclass AuthenticatorVerificationData extends AuthenticatorData {\n  constructor(remediation) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(remediation, values);\n    this.shouldProceedWithEmailAuthenticator = options.shouldProceedWithEmailAuthenticator !== false && this.authenticator.methods.length === 1 && this.authenticator.methods[0].type === 'email';\n  }\n\n  canRemediate() {\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      return true;\n    }\n\n    return super.canRemediate();\n  }\n\n  mapAuthenticator() {\n    var _a;\n\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      const authenticatorFromRemediation = this.getAuthenticatorFromRemediation();\n      return (_a = authenticatorFromRemediation.form) === null || _a === void 0 ? void 0 : _a.value.reduce((acc, curr) => {\n        if (curr.value) {\n          acc[curr.name] = curr.value;\n        } else if (curr.options) {\n          acc[curr.name] = curr.options[0].value;\n        } else {\n          throw new AuthSdkError(`Unsupported authenticator data type: ${curr}`);\n        }\n\n        return acc;\n      }, {});\n    }\n\n    return this.getAuthenticatorData();\n  }\n\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form.value.find(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'methodType';\n    });\n\n    if (methodType && methodType.options) {\n      return {\n        name: 'methodType',\n        type: 'string',\n        required: true,\n        options: methodType.options\n      };\n    }\n\n    const inputs = [...authenticator.form.value];\n    return inputs;\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n\n}\n\nAuthenticatorVerificationData.remediationName = 'authenticator-verification-data';\nexport { AuthenticatorVerificationData };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAoBM,MAAOA,6BAAP,SAA6CC,iBAA7C,CAAmG;EAKvGC,YACEC,WADF,EAGgC;IAAA,IAD9BC,MAC8B,uEADI,EACJ;IAAA,IAA9BC,OAA8B,uEAAF,EAAE;IAE9B,MAAMF,WAAN,EAAmBC,MAAnB;IAGA,KAAKE,mCAAL,GAA2CD,OAAO,CAACC,mCAAR,KAAgD,KAAhD,IACtC,KAAKC,aAAL,CAAmBC,OAAnB,CAA2BC,MAA3B,KAAsC,CADA,IAEtC,KAAKF,aAAL,CAAmBC,OAAnB,CAA2B,CAA3B,EAA8BE,IAA9B,KAAuC,OAF5C;EAGD;;EAEDC,YAAY;IAEV,IAAI,KAAKL,mCAAL,KAA6C,KAAjD,EAAwD;MACtD,OAAO,IAAP;IACD;;IACD,OAAO,MAAMK,YAAN,EAAP;EACD;;EAEDC,gBAAgB;;;IAEd,IAAI,KAAKN,mCAAL,KAA6C,KAAjD,EAAwD;MACtD,MAAMO,4BAA4B,GAAG,KAAKC,+BAAL,EAArC;MACA,OAAO,kCAA4B,CAACC,IAA7B,MAAiC,IAAjC,IAAiCC,aAAjC,GAAiC,MAAjC,GAAiCA,GAAEC,KAAF,CAAQC,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAc;QACnE,IAAIA,IAAI,CAACH,KAAT,EAAgB;UACdE,GAAG,CAACC,IAAI,CAACC,IAAN,CAAH,GAAiBD,IAAI,CAACH,KAAtB;QACD,CAFD,MAEO,IAAIG,IAAI,CAACf,OAAT,EAAkB;UACvBc,GAAG,CAACC,IAAI,CAACC,IAAN,CAAH,GAAiBD,IAAI,CAACf,OAAL,CAAc,CAAd,EAAiBY,KAAlC;QACD,CAFM,MAEA;UACL,MAAM,IAAIK,YAAJ,CAAiB,wCAAwCF,IAAI,EAA7D,CAAN;QACD;;QACD,OAAOD,GAAP;MACD,CATuC,EASrC,EATqC,CAAxC;IAUD;;IAED,OAAO,KAAKI,oBAAL,EAAP;EACD;;EAEDC,qBAAqB;IACnB,MAAMjB,aAAa,GAAG,KAAKO,+BAAL,EAAtB;IACA,MAAMW,UAAU,GAAGlB,aAAa,CAACQ,IAAd,CAAoBE,KAApB,CAA0BS,IAA1B,CAA+B;MAAA,IAAC;QAAEL;MAAF,CAAD;MAAA,OAAcA,IAAI,KAAK,YAAvB;IAAA,CAA/B,CAAnB;;IAEA,IAAII,UAAU,IAAIA,UAAU,CAACpB,OAA7B,EAAsC;MACpC,OAAO;QACLgB,IAAI,EAAE,YADD;QAELX,IAAI,EAAE,QAFD;QAGLiB,QAAQ,EAAE,IAHL;QAILtB,OAAO,EAAEoB,UAAU,CAACpB;MAJf,CAAP;IAMD;;IAED,MAAMuB,MAAM,GAAG,CAAC,GAAGrB,aAAa,CAACQ,IAAd,CAAoBE,KAAxB,CAAf;IACA,OAAOW,MAAP;EACD;;EAEDC,qBAAqB;IACnB,KAAKzB,MAAL,GAAc,MAAMyB,qBAAN,EAAd;IACA,IAAIC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAK5B,MAAjB,EAAyB6B,MAAzB,CAAgCC,QAAQ,IAAIA,QAAQ,KAAK,eAAzD,CAApB;IACA,OAAOJ,aAAa,CAACZ,MAAd,CAAqB,CAACd,MAAD,EAAS8B,QAAT,KAAsBH,gCAAK3B,MAAL,GAAW;MAAE,CAAC8B,QAAD,GAAY,KAAK9B,MAAL,CAAY8B,QAAZ;IAAd,CAAX,CAA3C,EAA6F,EAA7F,CAAP;EACD;;AAlEsG;;AAChGlC,6BAAe,gBAAf,GAAkB,iCAAlB","names":["AuthenticatorVerificationData","AuthenticatorData","constructor","remediation","values","options","shouldProceedWithEmailAuthenticator","authenticator","methods","length","type","canRemediate","mapAuthenticator","authenticatorFromRemediation","getAuthenticatorFromRemediation","form","_a","value","reduce","acc","curr","name","AuthSdkError","getAuthenticatorData","getInputAuthenticator","methodType","find","required","inputs","getValuesAfterProceed","trimmedValues","Object","keys","filter","valueKey"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\remediators\\AuthenticatorVerificationData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthSdkError } from '../../errors';\nimport { AuthenticatorData, AuthenticatorDataValues } from './Base/AuthenticatorData';\nimport { IdxRemediation, RemediateOptions } from '../types';\n\nexport type AuthenticatorVerificationDataValues = AuthenticatorDataValues;\n\nexport class AuthenticatorVerificationData extends AuthenticatorData<AuthenticatorVerificationDataValues> {\n  static remediationName = 'authenticator-verification-data';\n\n  shouldProceedWithEmailAuthenticator: boolean; // will be removed in next major version\n\n  constructor(\n    remediation: IdxRemediation, \n    values: AuthenticatorDataValues = {}, \n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values);\n\n    // will be removed in next major version\n    this.shouldProceedWithEmailAuthenticator = options.shouldProceedWithEmailAuthenticator !== false\n      && this.authenticator.methods.length === 1 \n      && this.authenticator.methods[0].type === 'email';\n  }\n\n  canRemediate() {\n    // auto proceed if there is only one method (will be removed in next major version)\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      return true;\n    }\n    return super.canRemediate();\n  }\n\n  mapAuthenticator() {\n    // auto proceed with the only methodType option\n    if (this.shouldProceedWithEmailAuthenticator !== false) {\n      const authenticatorFromRemediation = this.getAuthenticatorFromRemediation();\n      return authenticatorFromRemediation.form?.value.reduce((acc, curr) => {\n        if (curr.value) {\n          acc[curr.name] = curr.value;\n        } else if (curr.options) {\n          acc[curr.name] = curr.options![0].value;\n        } else {\n          throw new AuthSdkError(`Unsupported authenticator data type: ${curr}`);\n        }\n        return acc;\n      }, {});\n    }\n\n    return this.getAuthenticatorData();\n  }\n\n  getInputAuthenticator() {\n    const authenticator = this.getAuthenticatorFromRemediation();\n    const methodType = authenticator.form!.value.find(({ name }) => name === 'methodType');\n    // if has methodType in form, let user select the methodType\n    if (methodType && methodType.options) {\n      return { \n        name: 'methodType', \n        type: 'string', \n        required: true, \n        options: methodType.options \n      };\n    }\n    // no methodType, then return form values\n    const inputs = [...authenticator.form!.value];\n    return inputs;\n  }\n\n  getValuesAfterProceed(): AuthenticatorVerificationDataValues {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'authenticator');\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {});\n  }\n}\n"]},"metadata":{},"sourceType":"module"}