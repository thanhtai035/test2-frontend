{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { httpRequest } from '../../../http/request.js';\nimport { divideActionParamsByMutability } from './actionParser.js';\nimport AuthApiError from '../../../errors/AuthApiError.js';\n\nconst generateDirectFetch = function generateDirectFetch(authClient, _ref) {\n  let {\n    actionDefinition,\n    defaultParamsForAction = {},\n    immutableParamsForAction = {},\n    toPersist = {}\n  } = _ref;\n  const target = actionDefinition.href;\n  return async function () {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    var _a;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': actionDefinition.accepts || 'application/ion+json'\n    };\n    const body = JSON.stringify(Object.assign(Object.assign(Object.assign({}, defaultParamsForAction), params), immutableParamsForAction));\n\n    try {\n      const response = await httpRequest(authClient, {\n        url: target,\n        method: actionDefinition.method,\n        headers,\n        args: body,\n        withCredentials: (_a = toPersist === null || toPersist === void 0 ? void 0 : toPersist.withCredentials) !== null && _a !== void 0 ? _a : true\n      });\n      return authClient.idx.makeIdxResponse(Object.assign({}, response), toPersist, true);\n    } catch (err) {\n      if (!(err instanceof AuthApiError) || !(err === null || err === void 0 ? void 0 : err.xhr)) {\n        throw err;\n      }\n\n      const response = err.xhr;\n      const payload = response.responseJSON || JSON.parse(response.responseText);\n      const wwwAuthHeader = response.headers['WWW-Authenticate'] || response.headers['www-authenticate'];\n      const idxResponse = authClient.idx.makeIdxResponse(Object.assign({}, payload), toPersist, false);\n\n      if (response.status === 401 && wwwAuthHeader === 'Oktadevicejwt realm=\"Okta Device\"') {\n        idxResponse.stepUp = true;\n      }\n\n      throw idxResponse;\n    }\n  };\n};\n\nconst generateIdxAction = function generateIdxAction(authClient, actionDefinition, toPersist) {\n  const generator = generateDirectFetch;\n  const {\n    defaultParams,\n    neededParams,\n    immutableParams\n  } = divideActionParamsByMutability(actionDefinition);\n  const action = generator(authClient, {\n    actionDefinition,\n    defaultParamsForAction: defaultParams[actionDefinition.name],\n    immutableParamsForAction: immutableParams[actionDefinition.name],\n    toPersist\n  });\n  action.neededParams = neededParams;\n  return action;\n};\n\nexport { generateIdxAction as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAmBA,MAAMA,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,UAA7B,QAK3B;EAAA,IAL0F;IACzFC,gBADyF;IAEzFC,sBAAsB,GAAG,EAFgE;IAGzFC,wBAAwB,GAAG,EAH8D;IAIzFC,SAAS,GAAG;EAJ6E,CAK1F;EACC,MAAMC,MAAM,GAAGJ,gBAAgB,CAACK,IAAhC;EACA,OAAO,kBAA2C;IAAA,IAA5BC,MAA4B,uEAAF,EAAE;;;;IAChD,MAAMC,OAAO,GAAG;MACd,gBAAgB,kBADF;MAEd,UAAUP,gBAAgB,CAACQ,OAAjB,IAA4B;IAFxB,CAAhB;IAIA,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAcC,8CACtBX,sBADsB,GAEtBK,MAFsB,GAGtBJ,wBAHsB,CAAd,CAAb;;IAMA,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,WAAW,CAACf,UAAD,EAAa;QAC7CgB,GAAG,EAAEX,MADwC;QAE7CY,MAAM,EAAEhB,gBAAgB,CAACgB,MAFoB;QAG7CT,OAH6C;QAI7CU,IAAI,EAAER,IAJuC;QAK7CS,eAAe,EAAE,eAAS,KAAT,iBAAS,WAAT,GAAS,MAAT,YAAS,CAAEA,eAAX,MAA0B,IAA1B,IAA0BC,aAA1B,GAA0BA,EAA1B,GAA8B;MALF,CAAb,CAAlC;MAQA,OAAOpB,UAAU,CAACqB,GAAX,CAAeC,eAAf,CAA8BT,kBAAMC,QAAN,CAA9B,EAAgDV,SAAhD,EAA2D,IAA3D,CAAP;IACD,CAVD,CAWA,OAAOmB,GAAP,EAAY;MACV,IAAI,EAAEA,GAAG,YAAYC,YAAjB,KAAkC,EAACD,GAAG,SAAH,OAAG,WAAH,GAAG,MAAH,MAAG,CAAEE,GAAN,CAAtC,EAAiD;QAC/C,MAAMF,GAAN;MACD;;MAED,MAAMT,QAAQ,GAAGS,GAAG,CAACE,GAArB;MACA,MAAMC,OAAO,GAAGZ,QAAQ,CAACa,YAAT,IAAyBhB,IAAI,CAACiB,KAAL,CAAWd,QAAQ,CAACe,YAApB,CAAzC;MACA,MAAMC,aAAa,GAAGhB,QAAQ,CAACN,OAAT,CAAiB,kBAAjB,KAAwCM,QAAQ,CAACN,OAAT,CAAiB,kBAAjB,CAA9D;MAEA,MAAMuB,WAAW,GAAG/B,UAAU,CAACqB,GAAX,CAAeC,eAAf,CAAoCT,0BAApC,EAA+CT,SAA/C,EAA0D,KAA1D,CAApB;;MACA,IAAIU,QAAQ,CAACkB,MAAT,KAAoB,GAApB,IAA2BF,aAAa,KAAK,mCAAjD,EAAsF;QAKpFC,WAAW,CAACE,MAAZ,GAAqB,IAArB;MACD;;MAGD,MAAMF,WAAN;IACD;EACF,CA3CD;AA4CD,CAnDD;;AAsEM,uBAAiB,GAAG,SAASG,iBAAT,CAA4BlC,UAA5B,EAA8DC,gBAA9D,EAAgFG,SAAhF,EAAyF;EAGjH,MAAM+B,SAAS,GAAGpC,mBAAlB;EACA,MAAM;IAAEqC,aAAF;IAAiBC,YAAjB;IAA+BC;EAA/B,IAAmDC,8BAA8B,CAAEtC,gBAAF,CAAvF;EAEA,MAAMuC,MAAM,GAAGL,SAAS,CAACnC,UAAD,EAAa;IACnCC,gBADmC;IAEnCC,sBAAsB,EAAEkC,aAAa,CAACnC,gBAAgB,CAACwC,IAAlB,CAFF;IAGnCtC,wBAAwB,EAAEmC,eAAe,CAACrC,gBAAgB,CAACwC,IAAlB,CAHN;IAInCrC;EAJmC,CAAb,CAAxB;EAMAoC,MAAM,CAACH,YAAP,GAAsBA,YAAtB;EACA,OAAOG,MAAP;AACF,CAdM","names":["generateDirectFetch","authClient","actionDefinition","defaultParamsForAction","immutableParamsForAction","toPersist","target","href","params","headers","accepts","body","JSON","stringify","Object","response","httpRequest","url","method","args","withCredentials","_a","idx","makeIdxResponse","err","AuthApiError","xhr","payload","responseJSON","parse","responseText","wwwAuthHeader","idxResponse","status","stepUp","generateIdxAction","generator","defaultParams","neededParams","immutableParams","divideActionParamsByMutability","action","name"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\idxState\\v1\\generateIdxAction.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n/* eslint-disable max-len, complexity */\nimport { httpRequest } from '../../../http';\nimport { OktaAuthIdxInterface } from '../../../types';    // auth-js/types\nimport { IdxActionFunction, IdxActionParams, IdxResponse, IdxToPersist } from '../../types/idx-js';\nimport { divideActionParamsByMutability } from './actionParser';\nimport AuthApiError from '../../../errors/AuthApiError';\n\nconst generateDirectFetch = function generateDirectFetch(authClient: OktaAuthIdxInterface, { \n  actionDefinition, \n  defaultParamsForAction = {}, \n  immutableParamsForAction = {}, \n  toPersist = {} as IdxToPersist\n}): IdxActionFunction {\n  const target = actionDefinition.href;\n  return async function(params: IdxActionParams = {}): Promise<IdxResponse> {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': actionDefinition.accepts || 'application/ion+json',\n    };\n    const body = JSON.stringify({\n      ...defaultParamsForAction,\n      ...params,\n      ...immutableParamsForAction\n    });\n\n    try {\n      const response = await httpRequest(authClient, {\n        url: target,\n        method: actionDefinition.method,\n        headers,\n        args: body,\n        withCredentials: toPersist?.withCredentials ?? true\n      });\n\n      return authClient.idx.makeIdxResponse({ ...response }, toPersist, true);\n    }\n    catch (err) {\n      if (!(err instanceof AuthApiError) || !err?.xhr) {\n        throw err;\n      }\n\n      const response = err.xhr;\n      const payload = response.responseJSON || JSON.parse(response.responseText);\n      const wwwAuthHeader = response.headers['WWW-Authenticate'] || response.headers['www-authenticate'];\n\n      const idxResponse = authClient.idx.makeIdxResponse({ ...payload }, toPersist, false);\n      if (response.status === 401 && wwwAuthHeader === 'Oktadevicejwt realm=\"Okta Device\"') {\n        // Okta server responds 401 status code with WWW-Authenticate header and new remediation\n        // so that the iOS/MacOS credential SSO extension (Okta Verify) can intercept\n        // the response reaches here when Okta Verify is not installed\n        // set `stepUp` to true if flow should be continued without showing any errors\n        idxResponse.stepUp = true;\n      }\n\n      // Throw IDX response if request did not succeed. This behavior will be removed in version 7.0: OKTA-481844\n      throw idxResponse;\n    }\n  };\n};\n\n// TODO: Resolve in M2: Either build the final polling solution or remove this code\n// const generatePollingFetch = function generatePollingFetch( { actionDefinition, defaultParamsForAction = {}, immutableParamsForAction = {} } ) {\n//   // TODO: Discussions ongoing about when/how to terminate polling: OKTA-246581\n//   const target = actionDefinition.href;\n//   return async function(params) {\n//     return fetch(target, {\n//       method: actionDefinition.method,\n//       headers: {\n//         'content-type': actionDefinition.accepts,\n//       },\n//       body: JSON.stringify({ ...defaultParamsForAction, ...params, ...immutableParamsForAction })\n//     })\n//       .then( response => response.ok ? response.json() : response.json().then( err => Promise.reject(err)) )\n//       .then( idxResponse => makeIdxState(authClient, idxResponse) );\n//   };\n// };\n\nconst generateIdxAction = function generateIdxAction( authClient: OktaAuthIdxInterface, actionDefinition, toPersist ): IdxActionFunction {\n  // TODO: leaving this here to see where the polling is EXPECTED to drop into the code, but removing any accidental trigger of incomplete code\n  // const generator =  actionDefinition.refresh ? generatePollingFetch : generateDirectFetch;\n  const generator = generateDirectFetch;\n  const { defaultParams, neededParams, immutableParams } = divideActionParamsByMutability( actionDefinition );\n\n  const action = generator(authClient, {\n    actionDefinition,\n    defaultParamsForAction: defaultParams[actionDefinition.name],\n    immutableParamsForAction: immutableParams[actionDefinition.name],\n    toPersist\n  });\n  action.neededParams = neededParams;\n  return action;\n};\n\nexport default generateIdxAction;\n"]},"metadata":{},"sourceType":"module"}