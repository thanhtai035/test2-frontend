{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { isBrowser } from '../features.js';\nimport '../idx/types/api.js';\nimport { EVENT_ADDED, EVENT_REMOVED, EVENT_RENEWED, EVENT_SET_STORAGE } from '../types/TokenManager.js';\nimport '../myaccount/types.js';\n\nclass SyncStorageService {\n  constructor(tokenManager) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.started = false;\n    this.enablePostMessage = true;\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.onTokenAddedHandler = this.onTokenAddedHandler.bind(this);\n    this.onTokenRemovedHandler = this.onTokenRemovedHandler.bind(this);\n    this.onTokenRenewedHandler = this.onTokenRenewedHandler.bind(this);\n    this.onSetStorageHandler = this.onSetStorageHandler.bind(this);\n    this.onSyncMessageHandler = this.onSyncMessageHandler.bind(this);\n  }\n\n  requiresLeadership() {\n    return false;\n  }\n\n  isStarted() {\n    return this.started;\n  }\n\n  canStart() {\n    return !!this.options.syncStorage && isBrowser();\n  }\n\n  async start() {\n    if (this.canStart()) {\n      await this.stop();\n      const {\n        syncChannelName\n      } = this.options;\n      this.channel = new BroadcastChannel(syncChannelName);\n      this.tokenManager.on(EVENT_ADDED, this.onTokenAddedHandler);\n      this.tokenManager.on(EVENT_REMOVED, this.onTokenRemovedHandler);\n      this.tokenManager.on(EVENT_RENEWED, this.onTokenRenewedHandler);\n      this.tokenManager.on(EVENT_SET_STORAGE, this.onSetStorageHandler);\n      this.channel.addEventListener('message', this.onSyncMessageHandler);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    var _a, _b;\n\n    if (this.started) {\n      this.tokenManager.off(EVENT_ADDED, this.onTokenAddedHandler);\n      this.tokenManager.off(EVENT_REMOVED, this.onTokenRemovedHandler);\n      this.tokenManager.off(EVENT_RENEWED, this.onTokenRenewedHandler);\n      this.tokenManager.off(EVENT_SET_STORAGE, this.onSetStorageHandler);\n      (_a = this.channel) === null || _a === void 0 ? void 0 : _a.removeEventListener('message', this.onSyncMessageHandler);\n      await ((_b = this.channel) === null || _b === void 0 ? void 0 : _b.close());\n      this.channel = undefined;\n      this.started = false;\n    }\n  }\n\n  onTokenAddedHandler(key, token) {\n    var _a;\n\n    if (!this.enablePostMessage) {\n      return;\n    }\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_ADDED,\n      key,\n      token\n    });\n  }\n\n  onTokenRemovedHandler(key, token) {\n    var _a;\n\n    if (!this.enablePostMessage) {\n      return;\n    }\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_REMOVED,\n      key,\n      token\n    });\n  }\n\n  onTokenRenewedHandler(key, token, oldToken) {\n    var _a;\n\n    if (!this.enablePostMessage) {\n      return;\n    }\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_RENEWED,\n      key,\n      token,\n      oldToken\n    });\n  }\n\n  onSetStorageHandler(storage) {\n    var _a;\n\n    (_a = this.channel) === null || _a === void 0 ? void 0 : _a.postMessage({\n      type: EVENT_SET_STORAGE,\n      storage\n    });\n  }\n\n  onSyncMessageHandler(msg) {\n    this.enablePostMessage = false;\n\n    switch (msg.type) {\n      case EVENT_SET_STORAGE:\n        this.tokenManager.getStorage().setStorage(msg.storage);\n        break;\n\n      case EVENT_ADDED:\n        this.tokenManager.emitAdded(msg.key, msg.token);\n        this.tokenManager.setExpireEventTimeout(msg.key, msg.token);\n        break;\n\n      case EVENT_REMOVED:\n        this.tokenManager.clearExpireEventTimeout(msg.key);\n        this.tokenManager.emitRemoved(msg.key, msg.token);\n        break;\n\n      case EVENT_RENEWED:\n        this.tokenManager.emitRenewed(msg.key, msg.token, msg.oldToken);\n        break;\n    }\n\n    this.enablePostMessage = true;\n  }\n\n}\n\nexport { SyncStorageService };","map":{"version":3,"mappings":"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","names":["SyncStorageService","constructor","options","started","enablePostMessage","tokenManager","onTokenAddedHandler","bind","onTokenRemovedHandler","onTokenRenewedHandler","onSetStorageHandler","onSyncMessageHandler","requiresLeadership","isStarted","canStart","syncStorage","isBrowser","start","stop","syncChannelName","channel","BroadcastChannel","on","EVENT_ADDED","EVENT_REMOVED","EVENT_RENEWED","EVENT_SET_STORAGE","addEventListener","off","_a","removeEventListener","_b","undefined","key","token","postMessage","type","oldToken","storage","msg","getStorage","setStorage","emitAdded","setExpireEventTimeout","clearExpireEventTimeout","emitRemoved","emitRenewed"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\services\\SyncStorageService.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { TokenManager } from '../TokenManager';\nimport { BroadcastChannel } from 'broadcast-channel';\nimport { isBrowser } from '../features';\nimport {\n  ServiceManagerOptions, ServiceInterface, Token, Tokens, \n  EVENT_ADDED, EVENT_REMOVED, EVENT_RENEWED, EVENT_SET_STORAGE\n} from '../types';\n\nexport type SyncMessage = {\n  type: string;\n  key?: string;\n  token?: Token;\n  oldToken?: Token;\n  storage?: Tokens;\n};\nexport class SyncStorageService implements ServiceInterface {\n  private tokenManager: TokenManager;\n  private options: ServiceManagerOptions;\n  private channel?: BroadcastChannel<SyncMessage>;\n  private started = false;\n  private enablePostMessage = true;\n\n  constructor(tokenManager: TokenManager, options: ServiceManagerOptions = {}) {\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.onTokenAddedHandler = this.onTokenAddedHandler.bind(this);\n    this.onTokenRemovedHandler = this.onTokenRemovedHandler.bind(this);\n    this.onTokenRenewedHandler = this.onTokenRenewedHandler.bind(this);\n    this.onSetStorageHandler = this.onSetStorageHandler.bind(this);\n    this.onSyncMessageHandler = this.onSyncMessageHandler.bind(this);\n  }\n\n  requiresLeadership() {\n    return false;\n  }\n\n  isStarted() {\n    return this.started;\n  }\n\n  canStart() {\n    return !!this.options.syncStorage && isBrowser();\n  }\n\n  async start() {\n    if (this.canStart()) {\n      await this.stop();\n      const { syncChannelName } = this.options;\n      this.channel = new BroadcastChannel(syncChannelName as string);\n      this.tokenManager.on(EVENT_ADDED, this.onTokenAddedHandler);\n      this.tokenManager.on(EVENT_REMOVED, this.onTokenRemovedHandler);\n      this.tokenManager.on(EVENT_RENEWED, this.onTokenRenewedHandler);\n      this.tokenManager.on(EVENT_SET_STORAGE, this.onSetStorageHandler);\n      this.channel.addEventListener('message', this.onSyncMessageHandler);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      this.tokenManager.off(EVENT_ADDED, this.onTokenAddedHandler);\n      this.tokenManager.off(EVENT_REMOVED, this.onTokenRemovedHandler);\n      this.tokenManager.off(EVENT_RENEWED, this.onTokenRenewedHandler);\n      this.tokenManager.off(EVENT_SET_STORAGE, this.onSetStorageHandler);\n      this.channel?.removeEventListener('message', this.onSyncMessageHandler);\n      await this.channel?.close();\n      this.channel = undefined;\n      this.started = false;\n    }\n  }\n\n  private onTokenAddedHandler(key: string, token: Token) {\n    if (!this.enablePostMessage) {\n      return;\n    }\n    this.channel?.postMessage({\n      type: EVENT_ADDED,\n      key,\n      token\n    });\n  }\n\n  private onTokenRemovedHandler(key: string, token: Token) {\n    if (!this.enablePostMessage) {\n      return;\n    }\n    this.channel?.postMessage({\n      type: EVENT_REMOVED,\n      key,\n      token\n    });\n  }\n\n  private onTokenRenewedHandler(key: string, token: Token, oldToken?: Token) {\n    if (!this.enablePostMessage) {\n      return;\n    }\n    this.channel?.postMessage({\n      type: EVENT_RENEWED,\n      key,\n      token,\n      oldToken\n    });\n  }\n\n  private onSetStorageHandler(storage: Tokens) {\n    this.channel?.postMessage({\n      type: EVENT_SET_STORAGE,\n      storage\n    });\n  }\n\n  /* eslint-disable complexity */\n  private onSyncMessageHandler(msg: SyncMessage) {\n    // Notes:\n    // 1. Using `enablePostMessage` flag here to prevent sync message loop.\n    //    If this flag is on, tokenManager event handlers do not post sync message.\n    // 2. IE11 has known issue with synchronization of LocalStorage cross tabs.\n    //    One workaround is to set empty event handler for `window.onstorage`.\n    //    But it's not 100% working, sometimes you still get old value from LocalStorage.\n    //    Better approch is to explicitly udpate LocalStorage with `setStorage`.\n\n    this.enablePostMessage = false;\n    switch (msg.type) {\n      case EVENT_SET_STORAGE:\n        this.tokenManager.getStorage().setStorage(msg.storage);\n        break;\n      case EVENT_ADDED:\n        this.tokenManager.emitAdded(msg.key, msg.token);\n        this.tokenManager.setExpireEventTimeout(msg.key, msg.token);\n        break;\n      case EVENT_REMOVED:\n        this.tokenManager.clearExpireEventTimeout(msg.key);\n        this.tokenManager.emitRemoved(msg.key, msg.token);\n        break;\n      case EVENT_RENEWED:\n        this.tokenManager.emitRenewed(msg.key, msg.token, msg.oldToken);\n        break;\n      default:\n        break;\n    }\n    this.enablePostMessage = true;\n  }\n} "]},"metadata":{},"sourceType":"module"}