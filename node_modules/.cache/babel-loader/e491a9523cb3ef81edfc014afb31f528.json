{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\n\nfunction canProceed(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\n\nasync function proceed(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!canProceed(authClient, options)) {\n    throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n  }\n\n  let {\n    flow,\n    state\n  } = options;\n\n  if (!flow) {\n    const meta = getSavedTransactionMeta(authClient, {\n      state\n    });\n    flow = meta === null || meta === void 0 ? void 0 : meta.flow;\n  }\n\n  return run(authClient, Object.assign(Object.assign({}, options), {\n    flow\n  }));\n}\n\nexport { canProceed, proceed };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;SAsBgBA,WAAWC,YAA8D;EAAA,IAA5BC,OAA4B,uEAAF,EAAE;EACvF,MAAMC,IAAI,GAAGC,uBAAuB,CAACH,UAAD,EAAaC,OAAb,CAApC;EACA,OAAO,CAAC,EAAEC,IAAI,IAAID,OAAO,CAACG,WAAlB,CAAR;AACD;;AAEM,eAAeC,OAAf,CACLL,UADK,EAEuB;EAAA,IAA5BC,OAA4B,uEAAF,EAAE;;EAG5B,IAAI,CAACF,UAAU,CAACC,UAAD,EAAaC,OAAb,CAAf,EAAsC;IACpC,MAAM,IAAIK,YAAJ,CAAiB,0DAAjB,CAAN;EACD;;EAED,IAAI;IAAEC,IAAF;IAAQC;EAAR,IAAkBP,OAAtB;;EACA,IAAI,CAACM,IAAL,EAAW;IACT,MAAML,IAAI,GAAGC,uBAAuB,CAACH,UAAD,EAAa;MAAEQ;IAAF,CAAb,CAApC;IACAD,IAAI,GAAGL,IAAI,KAAJ,YAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEK,IAAb;EACD;;EAED,OAAOE,GAAG,CAACT,UAAD,EAAWU,gCAChBT,OADgB,GAEnB;IAAAM;EAAA,CAFmB,CAAX,CAAV;AAIF","names":["canProceed","authClient","options","meta","getSavedTransactionMeta","stateHandle","proceed","AuthSdkError","flow","state","run","Object"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\proceed.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { \n  OktaAuthIdxInterface,\n  IdxTransaction,\n  ProceedOptions,\n} from '../types';\nimport { run } from './run';\nimport { getSavedTransactionMeta } from './transactionMeta';\nimport { AuthSdkError } from '../errors';\n\nexport function canProceed(authClient: OktaAuthIdxInterface, options: ProceedOptions = {}): boolean {\n  const meta = getSavedTransactionMeta(authClient, options);\n  return !!(meta || options.stateHandle);\n}\n\nexport async function proceed(\n  authClient: OktaAuthIdxInterface,\n  options: ProceedOptions = {}\n): Promise<IdxTransaction> {\n\n  if (!canProceed(authClient, options)) {\n    throw new AuthSdkError('Unable to proceed: saved transaction could not be loaded');\n  }\n\n  let { flow, state } = options;\n  if (!flow) {\n    const meta = getSavedTransactionMeta(authClient, { state });\n    flow = meta?.flow;\n  }\n\n  return run(authClient, { \n    ...options, \n    flow\n  });\n}\n"]},"metadata":{},"sourceType":"module"}