{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { sendRequest } from './request.js';\n\nconst getEmails = async (oktaAuth, options) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'GET',\n    accessToken: options === null || options === void 0 ? void 0 : options.accessToken,\n    transactionClassName: 'EmailTransaction'\n  });\n  return transaction;\n};\n\nconst getEmail = async (oktaAuth, options) => {\n  const {\n    id,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  });\n  return transaction;\n};\n\nconst addEmail = async (oktaAuth, options) => {\n  const {\n    accessToken,\n    payload\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  });\n  return transaction;\n};\n\nconst deleteEmail = async (oktaAuth, options) => {\n  const {\n    id,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'DELETE',\n    accessToken\n  });\n  return transaction;\n};\n\nconst sendEmailChallenge = async (oktaAuth, options) => {\n  const {\n    id,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}/challenge`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  });\n  return transaction;\n};\n\nconst getEmailChallenge = async (oktaAuth, options) => {\n  const {\n    emailId,\n    challengeId,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  });\n  return transaction;\n};\n\nconst verifyEmailChallenge = async (oktaAuth, options) => {\n  const {\n    emailId,\n    challengeId,\n    payload,\n    accessToken\n  } = options;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  });\n  return transaction;\n};\n\nexport { addEmail, deleteEmail, getEmail, getEmailChallenge, getEmails, sendEmailChallenge, verifyEmailChallenge };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAWa,eAAS,GAAqC,OACzDA,QADyD,EAEzDC,OAFyD,KAGvD;EACF,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAAE,uBADyC;IAE9CC,MAAM,EAAE,KAFsC;IAG9CC,WAAW,EAAEL,OAAO,SAAP,WAAO,KAAP,yBAAO,CAAEK,WAHwB;IAI9CC,oBAAoB,EAAE;EAJwB,CAAX,CAArC;EAMA,OAAOL,WAAP;AACA,CAXW;;AAgBA,cAAQ,GAAmC,OACtDF,QADsD,EAEtDC,OAFsD,KAGpD;EACF,MAAM;IAAEO,EAAF;IAAMF;EAAN,IAAsBL,OAA5B;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAA2B,2BAAI,EADY;IAE9CC,MAAM,EAAE,KAFsC;IAG9CC,WAH8C;IAI9CC,oBAAoB,EAAE;EAJwB,CAAX,CAArC;EAMA,OAAOL,WAAP;AACA,CAZW;;AAiBA,cAAQ,GAAmC,OACtDF,QADsD,EAEtDC,OAFsD,KAGzB;EAC7B,MAAM;IAAEK,WAAF;IAAeG;EAAf,IAA2BR,OAAjC;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAAE,uBADyC;IAE9CC,MAAM,EAAE,MAFsC;IAG9CI,OAH8C;IAI9CH,WAJ8C;IAK9CC,oBAAoB,EAAE;EALwB,CAAX,CAArC;EAOA,OAAOL,WAAP;AACA,CAbW;;AAkBA,iBAAW,GAAkC,OACxDF,QADwD,EAExDC,OAFwD,KAGtD;EACF,MAAM;IAAEO,EAAF;IAAMF;EAAN,IAAsBL,OAA5B;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAA2B,2BAAI,EADY;IAE9CC,MAAM,EAAE,QAFsC;IAG9CC;EAH8C,CAAX,CAArC;EAKA,OAAOJ,WAAP;AACA,CAXW;;AAgBA,wBAAkB,GAA4C,OACzEF,QADyE,EAEzEC,OAFyE,KAGvE;EACF,MAAM;IAAEO,EAAF;IAAMF;EAAN,IAAsBL,OAA5B;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAA2B,2BAAc,YADE;IAE9CC,MAAM,EAAE,MAFsC;IAG9CC,WAH8C;IAI9CC,oBAAoB,EAAE;EAJwB,CAAX,CAArC;EAMA,OAAOL,WAAP;AACA,CAZW;;AAiBA,uBAAiB,GAA4C,OACxEF,QADwE,EAExEC,OAFwE,KAGtE;EACF,MAAM;IAAES,OAAF;IAAWC,WAAX;IAAwBL;EAAxB,IAAwCL,OAA9C;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAAE,yBAAyBM,OAAO,cAAcC,WAAa,EADlB;IAE9CN,MAAM,EAAE,MAFsC;IAG9CC,WAH8C;IAI9CC,oBAAoB,EAAE;EAJwB,CAAX,CAArC;EAMA,OAAOL,WAAP;AACA,CAZW;;AAiBA,0BAAoB,GAAkC,OACjEF,QADiE,EAEjEC,OAFiE,KAG/D;EACF,MAAM;IAAES,OAAF;IAAWC,WAAX;IAAwBF,OAAxB;IAAiCH;EAAjC,IAAiDL,OAAvD;EACA,MAAMC,WAAW,GAAG,MAAMC,WAAW,CAACH,QAAD,EAAW;IAC9CI,GAAG,EAAE,yBAAyBM,OAAO,cAAcC,WAAoB,SADzB;IAE9CN,MAAM,EAAE,MAFsC;IAG9CI,OAH8C;IAI9CH;EAJ8C,CAAX,CAArC;EAMA,OAAOJ,WAAP;AACF,CAZa","names":["oktaAuth","options","transaction","sendRequest","url","method","accessToken","transactionClassName","id","payload","emailId","challengeId"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\myaccount\\emailApi.ts"],"sourcesContent":["import { sendRequest } from './request';\nimport { \n  IAPIFunction, \n  BaseTransaction, \n  EmailTransaction, \n  EmailChallengeTransaction \n} from './types';\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmails: IAPIFunction<EmailTransaction[]> = async (\n  oktaAuth,\n  options?\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'GET',\n    accessToken: options?.accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction[];\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmail: IAPIFunction<EmailTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const addEmail: IAPIFunction<EmailTransaction> = async (\n  oktaAuth, \n  options\n): Promise<EmailTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const deleteEmail: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'DELETE',\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const sendEmailChallenge: IAPIFunction<EmailChallengeTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}/challenge`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  }) as EmailChallengeTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmailChallenge: IAPIFunction<EmailChallengeTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { emailId, challengeId, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  }) as EmailChallengeTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const verifyEmailChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { emailId, challengeId, payload, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n"]},"metadata":{},"sourceType":"module"}