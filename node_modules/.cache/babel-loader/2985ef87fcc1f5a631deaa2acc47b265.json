{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getWellKnown, getKey } from './endpoints/well-known.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { getOidcHash } from '../crypto/oidcHash.js';\nimport { verifyToken as verifyToken$1 } from '../crypto/verifyToken.js';\nimport { validateClaims } from './util/validateClaims.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\nimport { decodeToken } from './decodeToken.js';\n\nasync function verifyToken(sdk, token, validationParams) {\n  if (!token || !token.idToken) {\n    throw new AuthSdkError('Only idTokens may be verified');\n  }\n\n  var jwt = decodeToken(token.idToken);\n  const configuredIssuer = (validationParams === null || validationParams === void 0 ? void 0 : validationParams.issuer) || sdk.options.issuer;\n  const {\n    issuer\n  } = await getWellKnown(sdk, configuredIssuer);\n  var validationOptions = Object.assign({\n    clientId: sdk.options.clientId,\n    ignoreSignature: sdk.options.ignoreSignature\n  }, validationParams, {\n    issuer\n  });\n  validateClaims(sdk, jwt.payload, validationOptions);\n\n  if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n    return token;\n  }\n\n  const key = await getKey(sdk, token.issuer, jwt.header.kid);\n  const valid = await verifyToken$1(token.idToken, key);\n\n  if (!valid) {\n    throw new AuthSdkError('The token signature is not valid');\n  }\n\n  if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n    const hash = await getOidcHash(validationParams.accessToken);\n\n    if (hash !== token.claims.at_hash) {\n      throw new AuthSdkError('Token hash verification failed');\n    }\n  }\n\n  return token;\n}\n\nexport { verifyToken };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAsBO,eAAeA,WAAf,CAA2BC,GAA3B,EAAuDC,KAAvD,EAAuEC,gBAAvE,EAA0G;EAC/G,IAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAACE,OAArB,EAA8B;IAC5B,MAAM,IAAIC,YAAJ,CAAiB,+BAAjB,CAAN;EACD;;EAGD,IAAIC,GAAG,GAAGC,WAAW,CAACL,KAAK,CAACE,OAAP,CAArB;EAIA,MAAMI,gBAAgB,GAAG,iBAAgB,SAAhB,oBAAgB,KAAhB,kCAAgB,CAAEC,MAAlB,KAA4BR,GAAG,CAACS,OAAJ,CAAYD,MAAjE;EACA,MAAM;IAAEA;EAAF,IAAa,MAAME,YAAY,CAACV,GAAD,EAAMO,gBAAN,CAArC;EAEA,IAAII,iBAAiB,GAAsBC,MAAM,CAACC,MAAP,CAAc;IAEvDC,QAAQ,EAAEd,GAAG,CAACS,OAAJ,CAAYK,QAFiC;IAGvDC,eAAe,EAAEf,GAAG,CAACS,OAAJ,CAAYM;EAH0B,CAAd,EAIxCb,gBAJwC,EAItB;IAEnBM;EAFmB,CAJsB,CAA3C;EAUAQ,cAAc,CAAChB,GAAD,EAAMK,GAAG,CAACY,OAAV,EAAmBN,iBAAnB,CAAd;;EAIA,IAAIA,iBAAiB,CAACI,eAAlB,IAAqC,IAArC,IAA6C,CAACf,GAAG,CAACkB,QAAJ,CAAaC,sBAAb,EAAlD,EAAyF;IACvF,OAAOlB,KAAP;EACD;;EAGD,MAAMmB,GAAG,GAAG,MAAMC,MAAM,CAACrB,GAAD,EAAMC,KAAK,CAACO,MAAZ,EAAoBH,GAAG,CAACiB,MAAJ,CAAWC,GAA/B,CAAxB;EACA,MAAMC,KAAK,GAAG,MAAMC,aAAqB,CAACxB,KAAK,CAACE,OAAP,EAAgBiB,GAAhB,CAAzC;;EACA,IAAI,CAACI,KAAL,EAAY;IACV,MAAM,IAAIpB,YAAJ,CAAiB,kCAAjB,CAAN;EACD;;EACD,IAAIF,gBAAgB,IAAIA,gBAAgB,CAACwB,WAArC,IAAoDzB,KAAK,CAAC0B,MAAN,CAAaC,OAArE,EAA8E;IAC5E,MAAMC,IAAI,GAAG,MAAMC,WAAqB,CAAC5B,gBAAgB,CAACwB,WAAlB,CAAxC;;IACA,IAAIG,IAAI,KAAK5B,KAAK,CAAC0B,MAAN,CAAaC,OAA1B,EAAmC;MACjC,MAAM,IAAIxB,YAAJ,CAAiB,gCAAjB,CAAN;IACD;EACF;;EACD,OAAOH,KAAP;AACF","names":["verifyToken","sdk","token","validationParams","idToken","AuthSdkError","jwt","decodeToken","configuredIssuer","issuer","options","getWellKnown","validationOptions","Object","assign","clientId","ignoreSignature","validateClaims","payload","features","isTokenVerifySupported","key","getKey","header","kid","valid","sdkCrypto.verifyToken","accessToken","claims","at_hash","hash","sdkCrypto.getOidcHash"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\oidc\\verifyToken.ts"],"sourcesContent":["/* eslint-disable max-len */\n/* eslint-disable complexity */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { getWellKnown, getKey } from './endpoints/well-known';\nimport { validateClaims } from './util';\nimport { AuthSdkError } from '../errors';\nimport { IDToken, OktaAuthOIDCInterface, TokenVerifyParams } from '../types';\nimport { decodeToken } from './decodeToken';\nimport * as sdkCrypto from '../crypto';\n\n// Verify the id token\nexport async function verifyToken(sdk: OktaAuthOIDCInterface, token: IDToken, validationParams: TokenVerifyParams): Promise<IDToken> {\n  if (!token || !token.idToken) {\n    throw new AuthSdkError('Only idTokens may be verified');\n  }\n\n  // Decode the Jwt object (may throw)\n  var jwt = decodeToken(token.idToken);\n\n  // The configured issuer may point to a frontend proxy.\n  // Get the \"real\" issuer from .well-known/openid-configuration\n  const configuredIssuer = validationParams?.issuer || sdk.options.issuer;\n  const { issuer } = await getWellKnown(sdk, configuredIssuer);\n\n  var validationOptions: TokenVerifyParams = Object.assign({\n    // base options, can be overridden by params\n    clientId: sdk.options.clientId,\n    ignoreSignature: sdk.options.ignoreSignature\n  }, validationParams, {\n    // final options, cannot be overridden\n    issuer\n  });\n\n  // Standard claim validation (may throw)\n  validateClaims(sdk, jwt.payload, validationOptions);\n\n  // If the browser doesn't support native crypto or we choose not\n  // to verify the signature, bail early\n  if (validationOptions.ignoreSignature == true || !sdk.features.isTokenVerifySupported()) {\n    return token;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const key = await getKey(sdk, token.issuer, jwt.header.kid!);\n  const valid = await sdkCrypto.verifyToken(token.idToken, key);\n  if (!valid) {\n    throw new AuthSdkError('The token signature is not valid');\n  }\n  if (validationParams && validationParams.accessToken && token.claims.at_hash) {\n    const hash = await sdkCrypto.getOidcHash(validationParams.accessToken);\n    if (hash !== token.claims.at_hash) {\n      throw new AuthSdkError('Token hash verification failed');\n    }\n  }\n  return token;\n}\n"]},"metadata":{},"sourceType":"module"}