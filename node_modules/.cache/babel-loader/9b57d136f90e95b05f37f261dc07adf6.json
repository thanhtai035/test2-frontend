{"ast":null,"code":"import _toConsumableArray from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { SelectAuthenticator } from './Base/SelectAuthenticator.js';\nimport { getAuthenticatorFromRemediation } from './util.js';\nimport { AuthenticatorKey } from '../types/api.js';\n\nvar SelectAuthenticatorAuthenticate = /*#__PURE__*/function (_SelectAuthenticator) {\n  _inherits(SelectAuthenticatorAuthenticate, _SelectAuthenticator);\n\n  var _super = _createSuper(SelectAuthenticatorAuthenticate);\n\n  function SelectAuthenticatorAuthenticate(remediation) {\n    var _this;\n\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, SelectAuthenticatorAuthenticate);\n\n    var _a;\n\n    _this = _super.call(this, remediation, values, options);\n    var isRecoveryFlow = _this.options.flow === 'recoverPassword';\n    var hasPasswordInOptions = (_a = getAuthenticatorFromRemediation(remediation).options) === null || _a === void 0 ? void 0 : _a.some(function (_ref) {\n      var relatesTo = _ref.relatesTo;\n      return (relatesTo === null || relatesTo === void 0 ? void 0 : relatesTo.key) === AuthenticatorKey.OKTA_PASSWORD;\n    });\n\n    if (hasPasswordInOptions && (isRecoveryFlow || _this.values.password)) {\n      _this.values.authenticators = [].concat(_toConsumableArray(_this.values.authenticators || []), [{\n        key: AuthenticatorKey.OKTA_PASSWORD\n      }]);\n    }\n\n    return _this;\n  }\n\n  return _createClass(SelectAuthenticatorAuthenticate);\n}(SelectAuthenticator);\n\nSelectAuthenticatorAuthenticate.remediationName = 'select-authenticator-authenticate';\nexport { SelectAuthenticatorAuthenticate };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;IAsBaA,+B;;;;;EAGX,yCACEC,WADF,EAGgC;IAAA;;IAAA,IAD9BC,MAC8B,uEADM,EACN;IAAA,IAA9BC,OAA8B,uEAAF,EAAE;;IAAA;;;;IAE9B,0BAAMF,WAAN,EAAmBC,MAAnB,EAA2BC,OAA3B;IAGA,IAAMC,cAAc,GAAG,MAAKD,OAAL,CAAaE,IAAb,KAAsB,iBAA7C;IACA,IAAMC,oBAAoB,GAAG,qCAA+B,CAACL,WAAD,CAA/B,CAC1BE,OAD0B,MACnB,IADmB,IACnBI,aADmB,GACnB,MADmB,GACnBA,GAAEC,IAAF,CAAO;MAAA,IAAGC,SAAH,QAAGA,SAAH;MAAA,OAAmB,UAAS,KAAT,iBAAS,KAAT,2BAAS,CAAEC,GAAX,MAAmBC,gBAAgB,CAACC,aAAvD;IAAA,CAAP,CADV;;IAEA,IAAIN,oBAAoB,KAAKF,cAAc,IAAI,MAAKF,MAAL,CAAYW,QAAnC,CAAxB,EAAsE;MACpE,MAAKX,MAAL,CAAYY,cAAZ,gCACK,MAAKZ,MAAL,CAAYY,cAAZ,IAA8B,EADnC,IAEE;QAAEJ,GAAG,EAAEC,gBAAgB,CAACC;MAAxB,CAFF;IAID;;IAb6B;EAc/B;;;EApBkDG,mB;;AAC5Cf,+BAAe,gBAAf,GAAkB,mCAAlB","names":["SelectAuthenticatorAuthenticate","remediation","values","options","isRecoveryFlow","flow","hasPasswordInOptions","_a","some","relatesTo","key","AuthenticatorKey","OKTA_PASSWORD","password","authenticators","SelectAuthenticator"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\remediators\\SelectAuthenticatorAuthenticate.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { SelectAuthenticator, SelectAuthenticatorValues } from './Base/SelectAuthenticator';\nimport { getAuthenticatorFromRemediation } from './util';\nimport { IdxRemediation } from '../types/idx-js';\nimport { AuthenticatorKey, Authenticator, RemediateOptions } from '../types';\n\nexport type SelectAuthenticatorAuthenticateValues = SelectAuthenticatorValues & {\n  password?: string;\n};\n\nexport class SelectAuthenticatorAuthenticate extends SelectAuthenticator<SelectAuthenticatorAuthenticateValues> {\n  static remediationName = 'select-authenticator-authenticate';\n\n  constructor(\n    remediation: IdxRemediation, \n    values: SelectAuthenticatorValues = {}, \n    options: RemediateOptions = {}\n  ) {\n    super(remediation, values, options);\n\n    // Preset password authenticator to trigger recover action\n    const isRecoveryFlow = this.options.flow === 'recoverPassword';\n    const hasPasswordInOptions = getAuthenticatorFromRemediation(remediation)\n      .options?.some(({ relatesTo }) => relatesTo?.key === AuthenticatorKey.OKTA_PASSWORD);\n    if (hasPasswordInOptions && (isRecoveryFlow || this.values.password)) {\n      this.values.authenticators = [\n        ...this.values.authenticators || [],\n        { key: AuthenticatorKey.OKTA_PASSWORD }\n      ] as Authenticator[];\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}