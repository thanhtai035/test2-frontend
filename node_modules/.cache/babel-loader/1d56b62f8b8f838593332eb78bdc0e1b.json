{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport BaseTransaction from './Base.js';\nimport { generateRequestFnFromLinks } from '../request.js';\n\nclass EmailChallengeTransaction extends BaseTransaction {\n  constructor(oktaAuth, options) {\n    super(oktaAuth, options);\n    const {\n      accessToken,\n      res\n    } = options;\n    const {\n      id,\n      expiresAt,\n      profile,\n      status,\n      _links\n    } = res;\n    this.id = id;\n    this.expiresAt = expiresAt;\n    this.profile = profile;\n    this.status = status;\n\n    this.poll = async () => {\n      const fn = generateRequestFnFromLinks({\n        oktaAuth,\n        accessToken,\n        methodName: 'poll',\n        links: _links,\n        transactionClassName: 'EmailStatusTransaction'\n      });\n      return await fn();\n    };\n\n    this.verify = async payload => {\n      const fn = generateRequestFnFromLinks({\n        oktaAuth,\n        accessToken,\n        methodName: 'verify',\n        links: _links\n      });\n      return await fn(payload);\n    };\n  }\n\n}\n\nexport { EmailChallengeTransaction as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AASqB,wCAAkCA,eAAlC,CAAiD;EAUpEC,WAAY,WAAUC,OAAV,EAAiB;IAC3B,MAAMC,QAAN,EAAgBD,OAAhB;IAEA,MAAM;MAAEE,WAAF;MAAeC;IAAf,IAAuBH,OAA7B;IAEA,MAAM;MAAEI,EAAF;MAAMC,SAAN;MAAiBC,OAAjB;MAA0BC,MAA1B;MAAkCC;IAAlC,IAA6CL,GAAnD;IACA,KAAKC,EAAL,GAAUA,EAAV;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,MAAd;;IAGA,KAAKE,IAAL,GAAY,YAAW;MACrB,MAAMC,EAAE,GAAGC,0BAA0B,CAAC;QACpCV,QADoC;QAEpCC,WAFoC;QAGpCU,UAAU,EAAE,MAHwB;QAIpCC,KAAK,EAAEL,MAJ6B;QAKpCM,oBAAoB,EAAE;MALc,CAAD,CAArC;MAOA,OAAO,MAAMJ,EAAE,EAAf;IACD,CATD;;IAUA,KAAKK,MAAL,GAAc,MAAOC,OAAP,IAAkB;MAC9B,MAAMN,EAAE,GAAGC,0BAA0B,CAAC;QACpCV,QADoC;QAEpCC,WAFoC;QAGpCU,UAAU,EAAE,QAHwB;QAIpCC,KAAK,EAAEL;MAJ6B,CAAD,CAArC;MAMA,OAAO,MAAME,EAAE,CAACM,OAAD,CAAf;IACD,CARD;EASD;;AAzCmE","names":["BaseTransaction","constructor","options","oktaAuth","accessToken","res","id","expiresAt","profile","status","_links","poll","fn","generateRequestFnFromLinks","methodName","links","transactionClassName","verify","payload"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\myaccount\\transactions\\EmailChallengeTransaction.ts"],"sourcesContent":["import EmailStatusTransaction from './EmailStatusTransaction';\nimport { \n  EmailProfile, \n  Status,\n  VerificationPayload, \n} from '../types';\nimport BaseTransaction from './Base';\nimport { generateRequestFnFromLinks } from '../request';\n\nexport default class EmailChallengeTransaction extends BaseTransaction {\n  id: string;\n  expiresAt: string;\n  profile: EmailProfile;\n  status: Status;\n\n  poll: () => Promise<EmailStatusTransaction>;\n  // eslint-disable-next-line no-use-before-define\n  verify: (payload: VerificationPayload) => Promise<EmailChallengeTransaction>;\n\n  constructor(oktaAuth, options) {\n    super(oktaAuth, options);\n\n    const { accessToken, res } = options;\n    // assign required fields from res\n    const { id, expiresAt, profile, status, _links } = res;\n    this.id = id;\n    this.expiresAt = expiresAt;\n    this.profile = profile;\n    this.status = status;\n\n    // assign transformed fns to transaction\n    this.poll = async () => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'poll', \n        links: _links,\n        transactionClassName: 'EmailStatusTransaction'\n      });\n      return await fn() as EmailStatusTransaction;\n    };\n    this.verify = async (payload) => {\n      const fn = generateRequestFnFromLinks({ \n        oktaAuth, \n        accessToken, \n        methodName: 'verify', \n        links: _links,\n      });\n      return await fn(payload) as EmailChallengeTransaction;\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}