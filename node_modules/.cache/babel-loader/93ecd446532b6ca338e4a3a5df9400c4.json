{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { omit, getLink } from './util/object.js';\nimport { toQueryString } from './util/url.js';\nimport { get, post, httpRequest } from './http/request.js';\n\nfunction sessionExists(sdk) {\n  return sdk.session.get().then(function (res) {\n    if (res.status === 'ACTIVE') {\n      return true;\n    }\n\n    return false;\n  }).catch(function () {\n    return false;\n  });\n}\n\nfunction getSession(sdk) {\n  return get(sdk, '/api/v1/sessions/me', {\n    withCredentials: true\n  }).then(function (session) {\n    var res = omit(session, '_links');\n\n    res.refresh = function () {\n      return post(sdk, getLink(session, 'refresh').href, {}, {\n        withCredentials: true\n      });\n    };\n\n    res.user = function () {\n      return get(sdk, getLink(session, 'user').href, {\n        withCredentials: true\n      });\n    };\n\n    return res;\n  }).catch(function () {\n    return {\n      status: 'INACTIVE'\n    };\n  });\n}\n\nfunction closeSession(sdk) {\n  return httpRequest(sdk, {\n    url: sdk.getIssuerOrigin() + '/api/v1/sessions/me',\n    method: 'DELETE',\n    withCredentials: true\n  });\n}\n\nfunction refreshSession(sdk) {\n  return post(sdk, '/api/v1/sessions/me/lifecycle/refresh', {}, {\n    withCredentials: true\n  });\n}\n\nfunction setCookieAndRedirect(sdk, sessionToken, redirectUrl) {\n  redirectUrl = redirectUrl || window.location.href;\n  window.location.assign(sdk.getIssuerOrigin() + '/login/sessionCookieRedirect' + toQueryString({\n    checkAccountSetupComplete: true,\n    token: sessionToken,\n    redirectUrl: redirectUrl\n  }));\n}\n\nexport { closeSession, getSession, refreshSession, sessionExists, setCookieAndRedirect };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAgBA,SAASA,aAAT,CAAuBC,GAAvB,EAA0B;EACxB,OAAOA,GAAG,CAACC,OAAJ,CAAYC,GAAZ,GACJC,IADI,CACC,UAASC,GAAT,EAAY;IAChB,IAAIA,GAAG,CAACC,MAAJ,KAAe,QAAnB,EAA6B;MAC3B,OAAO,IAAP;IACD;;IACD,OAAO,KAAP;EACD,CANI,EAOJC,KAPI,CAOE;IACL,OAAO,KAAP;EACD,CATI,CAAP;AAUD;;AAED,SAASC,UAAT,CAAoBP,GAApB,EAAuB;EACrB,OAAOE,GAAG,CAACF,GAAD,EAAM,qBAAN,EAA6B;IAAEQ,eAAe,EAAE;EAAnB,CAA7B,CAAH,CACNL,IADM,CACD,UAASF,OAAT,EAAgB;IACpB,IAAIG,GAAG,GAAGK,IAAI,CAACR,OAAD,EAAU,QAAV,CAAd;;IAEAG,GAAG,CAACM,OAAJ,GAAc;MACZ,OAAOC,IAAI,CAACX,GAAD,EAAMY,OAAO,CAACX,OAAD,EAAU,SAAV,CAAP,CAA4BY,IAAlC,EAAwC,EAAxC,EAA4C;QAAEL,eAAe,EAAE;MAAnB,CAA5C,CAAX;IACD,CAFD;;IAIAJ,GAAG,CAACU,IAAJ,GAAW;MACT,OAAOZ,GAAG,CAACF,GAAD,EAAMY,OAAO,CAACX,OAAD,EAAU,MAAV,CAAP,CAAyBY,IAA/B,EAAqC;QAAEL,eAAe,EAAE;MAAnB,CAArC,CAAV;IACD,CAFD;;IAIA,OAAOJ,GAAP;EACD,CAbM,EAcNE,KAdM,CAcA;IAEL,OAAO;MAACD,MAAM,EAAE;IAAT,CAAP;EACD,CAjBM,CAAP;AAkBD;;AAED,SAASU,YAAT,CAAsBf,GAAtB,EAAyB;EACvB,OAAOgB,WAAW,CAAChB,GAAD,EAAM;IACtBiB,GAAG,EAAEjB,GAAG,CAACkB,eAAJ,KAAwB,qBADP;IAEtBC,MAAM,EAAE,QAFc;IAGtBX,eAAe,EAAE;EAHK,CAAN,CAAlB;AAKD;;AAED,SAASY,cAAT,CAAwBpB,GAAxB,EAA2B;EACzB,OAAOW,IAAI,CAACX,GAAD,EAAM,uCAAN,EAA+C,EAA/C,EAAmD;IAAEQ,eAAe,EAAE;EAAnB,CAAnD,CAAX;AACD;;AAED,SAASa,oBAAT,CAA8BrB,GAA9B,EAAmCsB,YAAnC,EAAiDC,WAAjD,EAA4D;EAC1DA,WAAW,GAAGA,WAAW,IAAIC,MAAM,CAACC,QAAP,CAAgBZ,IAA7C;EACAW,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB1B,GAAG,CAACkB,eAAJ,KAAwB,8BAAxB,GACrBS,aAAa,CAAC;IACZC,yBAAyB,EAAE,IADf;IAEZC,KAAK,EAAEP,YAFK;IAGZC,WAAW,EAAEA;EAHD,CAAD,CADf;AAMF","names":["sessionExists","sdk","session","get","then","res","status","catch","getSession","withCredentials","omit","refresh","post","getLink","href","user","closeSession","httpRequest","url","getIssuerOrigin","method","refreshSession","setCookieAndRedirect","sessionToken","redirectUrl","window","location","assign","toQueryString","checkAccountSetupComplete","token"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\session.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n/* global window */\nimport { omit, getLink, toQueryString } from './util';\nimport { get, post, httpRequest } from './http';\n\nfunction sessionExists(sdk) {\n  return sdk.session.get()\n    .then(function(res) {\n      if (res.status === 'ACTIVE') {\n        return true;\n      }\n      return false;\n    })\n    .catch(function() {\n      return false;\n    });\n}\n\nfunction getSession(sdk) { \n  return get(sdk, '/api/v1/sessions/me', { withCredentials: true })\n  .then(function(session) {\n    var res = omit(session, '_links');\n\n    res.refresh = function() {\n      return post(sdk, getLink(session, 'refresh').href, {}, { withCredentials: true });\n    };\n\n    res.user = function() {\n      return get(sdk, getLink(session, 'user').href, { withCredentials: true });\n    };\n\n    return res;\n  })\n  .catch(function() {\n    // Return INACTIVE status on failure\n    return {status: 'INACTIVE'};\n  });\n}\n\nfunction closeSession(sdk) {\n  return httpRequest(sdk, {\n    url: sdk.getIssuerOrigin() + '/api/v1/sessions/me',\n    method: 'DELETE',\n    withCredentials: true\n  });\n}\n\nfunction refreshSession(sdk) {\n  return post(sdk, '/api/v1/sessions/me/lifecycle/refresh', {}, { withCredentials: true });\n}\n\nfunction setCookieAndRedirect(sdk, sessionToken, redirectUrl) {\n  redirectUrl = redirectUrl || window.location.href;\n  window.location.assign(sdk.getIssuerOrigin() + '/login/sessionCookieRedirect' +\n    toQueryString({\n      checkAccountSetupComplete: true,\n      token: sessionToken,\n      redirectUrl: redirectUrl\n    }));\n}\n\nexport {\n  sessionExists,\n  getSession,\n  closeSession,\n  refreshSession,\n  setCookieAndRedirect\n};\n"]},"metadata":{},"sourceType":"module"}