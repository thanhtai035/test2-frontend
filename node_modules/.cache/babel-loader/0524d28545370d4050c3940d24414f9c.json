{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../idx/types/api.js';\nimport { isIDToken, isAccessToken } from '../types/Token.js';\nimport '../myaccount/types.js';\nimport { getWithoutPrompt } from './getWithoutPrompt.js';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh.js';\n\nfunction throwInvalidTokenError() {\n  throw new AuthSdkError('Renew must be passed a token with an array of scopes and an accessToken or idToken');\n}\n\nfunction getSingleToken(originalToken, tokens) {\n  if (isIDToken(originalToken)) {\n    return tokens.idToken;\n  }\n\n  if (isAccessToken(originalToken)) {\n    return tokens.accessToken;\n  }\n\n  throwInvalidTokenError();\n}\n\nfunction renewToken(_x, _x2) {\n  return _renewToken.apply(this, arguments);\n}\n\nfunction _renewToken() {\n  _renewToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, token) {\n    var tokens, responseType, scopes, authorizeUrl, userinfoUrl, issuer;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!isIDToken(token) && !isAccessToken(token)) {\n              throwInvalidTokenError();\n            }\n\n            tokens = sdk.tokenManager.getTokensSync();\n\n            if (!tokens.refreshToken) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 5;\n            return renewTokensWithRefresh(sdk, {\n              scopes: token.scopes\n            }, tokens.refreshToken);\n\n          case 5:\n            tokens = _context.sent;\n            return _context.abrupt(\"return\", getSingleToken(token, tokens));\n\n          case 7:\n            if (sdk.options.pkce) {\n              responseType = 'code';\n            } else if (isAccessToken(token)) {\n              responseType = 'token';\n            } else {\n              responseType = 'id_token';\n            }\n\n            scopes = token.scopes, authorizeUrl = token.authorizeUrl, userinfoUrl = token.userinfoUrl, issuer = token.issuer;\n            return _context.abrupt(\"return\", getWithoutPrompt(sdk, {\n              responseType: responseType,\n              scopes: scopes,\n              authorizeUrl: authorizeUrl,\n              userinfoUrl: userinfoUrl,\n              issuer: issuer\n            }).then(function (res) {\n              return getSingleToken(token, res.tokens);\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _renewToken.apply(this, arguments);\n}\n\nexport { renewToken };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAiBA,SAASA,sBAAT,GAA+B;EAC7B,MAAM,IAAIC,YAAJ,CACJ,oFADI,CAAN;AAGD;;AAGD,SAASC,cAAT,CAAwBC,aAAxB,EAA8CC,MAA9C,EAA4D;EAC1D,IAAIC,SAAS,CAACF,aAAD,CAAb,EAA8B;IAC5B,OAAOC,MAAM,CAACE,OAAd;EACD;;EACD,IAAIC,aAAa,CAACJ,aAAD,CAAjB,EAAkC;IAChC,OAAOC,MAAM,CAACI,WAAd;EACD;;EACDR,sBAAsB;AACvB;;SAGqBS,U;;;;;2EAAf,iBAA0BC,GAA1B,EAAsDC,KAAtD;IAAA;IAAA;MAAA;QAAA;UAAA;YACL,IAAI,CAACN,SAAS,CAACM,KAAD,CAAV,IAAqB,CAACJ,aAAa,CAACI,KAAD,CAAvC,EAAgD;cAC9CX,sBAAsB;YACvB;;YAEGI,MALC,GAKQM,GAAG,CAACE,YAAJ,CAAiBC,aAAjB,EALR;;YAAA,KAMDT,MAAM,CAACU,YANN;cAAA;cAAA;YAAA;;YAAA;YAAA,OAOYC,sBAAsB,CAACL,GAAD,EAAM;cACzCM,MAAM,EAAEL,KAAK,CAACK;YAD2B,CAAN,EAElCZ,MAAM,CAACU,YAF2B,CAPlC;;UAAA;YAOHV,MAPG;YAAA,iCAUIF,cAAc,CAACS,KAAD,EAAQP,MAAR,CAVlB;;UAAA;YAcL,IAAIM,GAAG,CAACO,OAAJ,CAAYC,IAAhB,EAAsB;cACpBC,YAAY,GAAG,MAAf;YACD,CAFD,MAEO,IAAIZ,aAAa,CAACI,KAAD,CAAjB,EAA0B;cAC/BQ,YAAY,GAAG,OAAf;YACD,CAFM,MAEA;cACLA,YAAY,GAAG,UAAf;YACD;;YAEOH,MAtBH,GAsBiDL,KAtBjD,CAsBGK,MAtBH,EAsBWI,YAtBX,GAsBiDT,KAtBjD,CAsBWS,YAtBX,EAsByBC,WAtBzB,GAsBiDV,KAtBjD,CAsByBU,WAtBzB,EAsBsCC,MAtBtC,GAsBiDX,KAtBjD,CAsBsCW,MAtBtC;YAAA,iCAuBEC,gBAAgB,CAACb,GAAD,EAAM;cAC3BS,YAAY,EAAZA,YAD2B;cAE3BH,MAAM,EAANA,MAF2B;cAG3BI,YAAY,EAAZA,YAH2B;cAI3BC,WAAW,EAAXA,WAJ2B;cAK3BC,MAAM,EAANA;YAL2B,CAAN,CAAhB,CAOJE,IAPI,CAOC,UAAUC,GAAV,EAAa;cACjB,OAAOvB,cAAc,CAACS,KAAD,EAAQc,GAAG,CAACrB,MAAZ,CAArB;YACD,CATI,CAvBF;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["throwInvalidTokenError","AuthSdkError","getSingleToken","originalToken","tokens","isIDToken","idToken","isAccessToken","accessToken","renewToken","sdk","token","tokenManager","getTokensSync","refreshToken","renewTokensWithRefresh","scopes","options","pkce","responseType","authorizeUrl","userinfoUrl","issuer","getWithoutPrompt","then","res"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\renewToken.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\nimport { AuthSdkError } from '../errors';\nimport { OktaAuthOIDCInterface, Token, Tokens, isAccessToken, AccessToken, IDToken, isIDToken } from '../types';\nimport { getWithoutPrompt } from './getWithoutPrompt';\nimport { renewTokensWithRefresh } from './renewTokensWithRefresh';\n\nfunction throwInvalidTokenError() {\n  throw new AuthSdkError(\n    'Renew must be passed a token with an array of scopes and an accessToken or idToken'\n  );\n}\n\n// Multiple tokens may have come back. Return only the token which was requested.\nfunction getSingleToken(originalToken: Token, tokens: Tokens) {\n  if (isIDToken(originalToken)) {\n    return tokens.idToken;\n  }\n  if (isAccessToken(originalToken)) {\n    return tokens.accessToken;\n  }\n  throwInvalidTokenError();\n}\n\n// If we have a refresh token, renew using that, otherwise getWithoutPrompt\nexport async function renewToken(sdk: OktaAuthOIDCInterface, token: Token): Promise<Token | undefined> {\n  if (!isIDToken(token) && !isAccessToken(token)) {\n    throwInvalidTokenError();\n  }\n\n  let tokens = sdk.tokenManager.getTokensSync();\n  if (tokens.refreshToken) {\n    tokens = await renewTokensWithRefresh(sdk, {\n      scopes: token.scopes,\n    }, tokens.refreshToken);\n    return getSingleToken(token, tokens);\n  }\n\n  var responseType;\n  if (sdk.options.pkce) {\n    responseType = 'code';\n  } else if (isAccessToken(token)) {\n    responseType = 'token';\n  } else {\n    responseType = 'id_token';\n  }\n\n  const { scopes, authorizeUrl, userinfoUrl, issuer } = token as (AccessToken & IDToken);\n  return getWithoutPrompt(sdk, {\n    responseType,\n    scopes,\n    authorizeUrl,\n    userinfoUrl,\n    issuer\n  })\n    .then(function (res) {\n      return getSingleToken(token, res.tokens);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}