{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport '../idx/types/api.js';\nimport { EVENT_EXPIRED } from '../types/TokenManager.js';\nimport '../myaccount/types.js';\nimport { isBrowser } from '../features.js';\n\nvar AutoRenewService = /*#__PURE__*/function () {\n  function AutoRenewService(tokenManager) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, AutoRenewService);\n\n    this.started = false;\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.renewTimeQueue = [];\n    this.onTokenExpiredHandler = this.onTokenExpiredHandler.bind(this);\n  }\n\n  _createClass(AutoRenewService, [{\n    key: \"shouldThrottleRenew\",\n    value: function shouldThrottleRenew() {\n      var res = false;\n      this.renewTimeQueue.push(Date.now());\n\n      if (this.renewTimeQueue.length >= 10) {\n        var firstTime = this.renewTimeQueue.shift();\n        var lastTime = this.renewTimeQueue[this.renewTimeQueue.length - 1];\n        res = lastTime - firstTime < 30 * 1000;\n      }\n\n      return res;\n    }\n  }, {\n    key: \"requiresLeadership\",\n    value: function requiresLeadership() {\n      return !!this.options.syncStorage && isBrowser();\n    }\n  }, {\n    key: \"onTokenExpiredHandler\",\n    value: function onTokenExpiredHandler(key) {\n      if (this.options.autoRenew) {\n        if (this.shouldThrottleRenew()) {\n          var error = new AuthSdkError('Too many token renew requests');\n          this.tokenManager.emitError(error);\n        } else {\n          this.tokenManager.renew(key).catch(function () {});\n        }\n      } else if (this.options.autoRemove) {\n        this.tokenManager.remove(key);\n      }\n    }\n  }, {\n    key: \"canStart\",\n    value: function canStart() {\n      return !!this.options.autoRenew || !!this.options.autoRemove;\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.canStart()) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.stop();\n\n              case 3:\n                this.tokenManager.on(EVENT_EXPIRED, this.onTokenExpiredHandler);\n                this.started = true;\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.started) {\n                  this.tokenManager.off(EVENT_EXPIRED, this.onTokenExpiredHandler);\n                  this.renewTimeQueue = [];\n                  this.started = false;\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"isStarted\",\n    value: function isStarted() {\n      return this.started;\n    }\n  }]);\n\n  return AutoRenewService;\n}();\n\nexport { AutoRenewService };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;IAkBaA,gB;EAMX,0BAAYC,YAAZ,EAA2E;IAAA,IAAnCC,OAAmC,uEAAF,EAAE;;IAAA;;IAFnE,KAAOC,OAAP,GAAU,KAAV;IAGN,KAAKF,YAAL,GAAoBA,YAApB;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKE,cAAL,GAAsB,EAAtB;IACA,KAAKC,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BC,IAA3B,CAAgC,IAAhC,CAA7B;EACD;;;;WAEO,+BAAmB;MACzB,IAAIC,GAAG,GAAG,KAAV;MACA,KAAKH,cAAL,CAAoBI,IAApB,CAAyBC,IAAI,CAACC,GAAL,EAAzB;;MACA,IAAI,KAAKN,cAAL,CAAoBO,MAApB,IAA8B,EAAlC,EAAsC;QAEpC,IAAMC,SAAS,GAAG,KAAKR,cAAL,CAAoBS,KAApB,EAAlB;QACA,IAAMC,QAAQ,GAAG,KAAKV,cAAL,CAAoB,KAAKA,cAAL,CAAoBO,MAApB,GAA6B,CAAjD,CAAjB;QACAJ,GAAG,GAAIO,QAAQ,GAAGF,SAAZ,GAAyB,KAAK,IAApC;MACD;;MACD,OAAOL,GAAP;IACD;;;WAED,8BAAkB;MAEhB,OAAO,CAAC,CAAC,KAAKL,OAAL,CAAaa,WAAf,IAA8BC,SAAS,EAA9C;IACD;;;WAEO,+BAAsBC,GAAtB,EAAiC;MACvC,IAAI,KAAKf,OAAL,CAAagB,SAAjB,EAA4B;QAC1B,IAAI,KAAKC,mBAAL,EAAJ,EAAgC;UAC9B,IAAMC,KAAK,GAAG,IAAIC,YAAJ,CAAiB,+BAAjB,CAAd;UACA,KAAKpB,YAAL,CAAkBqB,SAAlB,CAA4BF,KAA5B;QACD,CAHD,MAGO;UACL,KAAKnB,YAAL,CAAkBsB,KAAlB,CAAwBN,GAAxB,EAA6BO,KAA7B,CAAmC,YAAK,CAAG,CAA3C;QACD;MACF,CAPD,MAOO,IAAI,KAAKtB,OAAL,CAAauB,UAAjB,EAA6B;QAClC,KAAKxB,YAAL,CAAkByB,MAAlB,CAAyBT,GAAzB;MACD;IACF;;;WAED,oBAAQ;MACN,OAAQ,CAAC,CAAC,KAAKf,OAAL,CAAagB,SAAf,IAA4B,CAAC,CAAC,KAAKhB,OAAL,CAAauB,UAAnD;IACD;;;;8EAED;QAAA;UAAA;YAAA;cAAA;gBAAA,KACM,KAAKE,QAAL,EADN;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAEU,KAAKC,IAAL,EAFV;;cAAA;gBAGI,KAAK3B,YAAL,CAAkB4B,EAAlB,CAAqBC,aAArB,EAAoC,KAAKzB,qBAAzC;gBACA,KAAKF,OAAL,GAAe,IAAf;;cAJJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;;6EAQA;QAAA;UAAA;YAAA;cAAA;gBACE,IAAI,KAAKA,OAAT,EAAkB;kBAChB,KAAKF,YAAL,CAAkB8B,GAAlB,CAAsBD,aAAtB,EAAqC,KAAKzB,qBAA1C;kBACA,KAAKD,cAAL,GAAsB,EAAtB;kBACA,KAAKD,OAAL,GAAe,KAAf;gBACD;;cALH;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;WAQA,qBAAS;MACP,OAAO,KAAKA,OAAZ;IACD","names":["AutoRenewService","tokenManager","options","started","renewTimeQueue","onTokenExpiredHandler","bind","res","push","Date","now","length","firstTime","shift","lastTime","syncStorage","isBrowser","key","autoRenew","shouldThrottleRenew","error","AuthSdkError","emitError","renew","catch","autoRemove","remove","canStart","stop","on","EVENT_EXPIRED","off"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\services\\AutoRenewService.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { TokenManager } from '../TokenManager';\nimport { AuthSdkError } from '../errors';\nimport { ServiceInterface, ServiceManagerOptions, EVENT_EXPIRED } from '../types';\nimport { isBrowser } from '../features';\n\nexport class AutoRenewService implements ServiceInterface {\n  private tokenManager: TokenManager;\n  private options: ServiceManagerOptions;\n  private renewTimeQueue: Array<number>;\n  private started = false;\n\n  constructor(tokenManager: TokenManager, options: ServiceManagerOptions = {}) {\n    this.tokenManager = tokenManager;\n    this.options = options;\n    this.renewTimeQueue = [];\n    this.onTokenExpiredHandler = this.onTokenExpiredHandler.bind(this);\n  }\n  \n  private shouldThrottleRenew(): boolean {\n    let res = false;\n    this.renewTimeQueue.push(Date.now());\n    if (this.renewTimeQueue.length >= 10) {\n      // get and remove first item from queue\n      const firstTime = this.renewTimeQueue.shift() as number;\n      const lastTime = this.renewTimeQueue[this.renewTimeQueue.length - 1];\n      res = (lastTime - firstTime) < 30 * 1000;\n    }\n    return res;\n  }\n\n  requiresLeadership() {\n    // If tokens sync storage is enabled, handle tokens expiration only in 1 leader tab\n    return !!this.options.syncStorage && isBrowser();\n  }\n\n  private onTokenExpiredHandler(key: string) {\n    if (this.options.autoRenew) {\n      if (this.shouldThrottleRenew()) {\n        const error = new AuthSdkError('Too many token renew requests');\n        this.tokenManager.emitError(error);\n      } else {\n        this.tokenManager.renew(key).catch(() => {}); // Renew errors will emit an \"error\" event \n      }\n    } else if (this.options.autoRemove) {\n      this.tokenManager.remove(key);\n    }\n  }\n\n  canStart() {\n    return (!!this.options.autoRenew || !!this.options.autoRemove);\n  }\n\n  async start() {\n    if (this.canStart()) {\n      await this.stop();\n      this.tokenManager.on(EVENT_EXPIRED, this.onTokenExpiredHandler);\n      this.started = true;\n    }\n  }\n\n  async stop() {\n    if (this.started) {\n      this.tokenManager.off(EVENT_EXPIRED, this.onTokenExpiredHandler);\n      this.renewTimeQueue = [];\n      this.started = false;\n    }\n  }\n\n  isStarted() {\n    return this.started;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}