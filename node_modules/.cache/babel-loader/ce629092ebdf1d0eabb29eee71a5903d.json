{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport Cookies from 'js-cookie';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { warn } from '../util/console.js';\nimport { isIE11OrLess } from '../features.js';\nvar storageUtil = {\n  getHttpCache() {\n    return null;\n  },\n\n  getPKCEStorage() {\n    return null;\n  },\n\n  browserHasLocalStorage: function () {\n    try {\n      var storage = this.getLocalStorage();\n      return this.testStorage(storage);\n    } catch (e) {\n      return false;\n    }\n  },\n  browserHasSessionStorage: function () {\n    try {\n      var storage = this.getSessionStorage();\n      return this.testStorage(storage);\n    } catch (e) {\n      return false;\n    }\n  },\n  testStorageType: function (storageType) {\n    var supported = false;\n\n    switch (storageType) {\n      case 'sessionStorage':\n        supported = this.browserHasSessionStorage();\n        break;\n\n      case 'localStorage':\n        supported = this.browserHasLocalStorage();\n        break;\n\n      case 'cookie':\n      case 'memory':\n        supported = true;\n        break;\n\n      default:\n        supported = false;\n        break;\n    }\n\n    return supported;\n  },\n  getStorageByType: function (storageType, options) {\n    let storageProvider;\n\n    switch (storageType) {\n      case 'sessionStorage':\n        storageProvider = this.getSessionStorage();\n        break;\n\n      case 'localStorage':\n        storageProvider = this.getLocalStorage();\n        break;\n\n      case 'cookie':\n        storageProvider = this.getCookieStorage(options);\n        break;\n\n      case 'memory':\n        storageProvider = this.getInMemoryStorage();\n        break;\n\n      default:\n        throw new AuthSdkError(`Unrecognized storage option: ${storageType}`);\n    }\n\n    return storageProvider;\n  },\n  findStorageType: function (types) {\n    let curType;\n    let nextType;\n    types = types.slice();\n    curType = types.shift();\n    nextType = types.length ? types[0] : null;\n\n    if (!nextType) {\n      return curType;\n    }\n\n    if (this.testStorageType(curType)) {\n      return curType;\n    }\n\n    warn(`This browser doesn't support ${curType}. Switching to ${nextType}.`);\n    return this.findStorageType(types);\n  },\n  getLocalStorage: function () {\n    if (isIE11OrLess() && !window.onstorage) {\n      window.onstorage = function () {};\n    }\n\n    return localStorage;\n  },\n  getSessionStorage: function () {\n    return sessionStorage;\n  },\n  getCookieStorage: function (options) {\n    var _this = this;\n\n    const secure = options.secure;\n    const sameSite = options.sameSite;\n    const sessionCookie = options.sessionCookie;\n\n    if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {\n      throw new AuthSdkError('getCookieStorage: \"secure\" and \"sameSite\" options must be provided');\n    }\n\n    const storage = {\n      getItem: this.storage.get,\n      setItem: function (key, value) {\n        let expiresAt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '2200-01-01T00:00:00.000Z';\n        expiresAt = sessionCookie ? null : expiresAt;\n\n        _this.storage.set(key, value, expiresAt, {\n          secure: secure,\n          sameSite: sameSite\n        });\n      },\n      removeItem: key => {\n        this.storage.delete(key);\n      },\n      isSharedStorage: () => true\n    };\n\n    if (!options.useSeparateCookies) {\n      return storage;\n    }\n\n    return {\n      getItem: function (key) {\n        var data = storage.getItem();\n        var value = {};\n        Object.keys(data).forEach(k => {\n          if (k.indexOf(key) === 0) {\n            value[k.replace(`${key}_`, '')] = JSON.parse(data[k]);\n          }\n        });\n        return JSON.stringify(value);\n      },\n      setItem: function (key, value) {\n        var existingValues = JSON.parse(this.getItem(key));\n        value = JSON.parse(value);\n        Object.keys(value).forEach(k => {\n          var storageKey = key + '_' + k;\n          var valueToStore = JSON.stringify(value[k]);\n          storage.setItem(storageKey, valueToStore);\n          delete existingValues[k];\n        });\n        Object.keys(existingValues).forEach(k => {\n          storage.removeItem(key + '_' + k);\n        });\n      },\n      removeItem: function (key) {\n        var existingValues = JSON.parse(this.getItem(key));\n        Object.keys(existingValues).forEach(k => {\n          storage.removeItem(key + '_' + k);\n        });\n      },\n      isSharedStorage: () => true\n    };\n  },\n  inMemoryStore: {},\n  getInMemoryStorage: function () {\n    return {\n      getItem: key => {\n        return this.inMemoryStore[key];\n      },\n      setItem: (key, value) => {\n        this.inMemoryStore[key] = value;\n      },\n      isSharedStorage: () => false\n    };\n  },\n  testStorage: function (storage) {\n    var key = 'okta-test-storage';\n\n    try {\n      storage.setItem(key, key);\n      storage.removeItem(key);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  storage: {\n    set: function (name, value, expiresAt, options) {\n      const {\n        sameSite,\n        secure\n      } = options;\n\n      if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {\n        throw new AuthSdkError('storage.set: \"secure\" and \"sameSite\" options must be provided');\n      }\n\n      var cookieOptions = {\n        path: options.path || '/',\n        secure,\n        sameSite\n      };\n\n      if (!!Date.parse(expiresAt)) {\n        cookieOptions.expires = new Date(expiresAt);\n      }\n\n      Cookies.set(name, value, cookieOptions);\n      return this.get(name);\n    },\n    get: function (name) {\n      if (!arguments.length) {\n        return Cookies.get();\n      }\n\n      return Cookies.get(name);\n    },\n    delete: function (name) {\n      return Cookies.remove(name, {\n        path: '/'\n      });\n    }\n  }\n};\nexport { storageUtil as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AA8BA,IAAIA,WAAW,GAAuB;EAGpCC,YAAY;IACV,OAAO,IAAP;EACD,CALmC;;EAOpCC,cAAc;IACZ,OAAO,IAAP;EACD,CATmC;;EAapCC,sBAAsB,EAAE;IACtB,IAAI;MACF,IAAIC,OAAO,GAAG,KAAKC,eAAL,EAAd;MACA,OAAO,KAAKC,WAAL,CAAiBF,OAAjB,CAAP;IACD,CAHD,CAGE,OAAOG,CAAP,EAAU;MACV,OAAO,KAAP;IACD;EACF,CApBmC;EAsBpCC,wBAAwB,EAAE;IACxB,IAAI;MACF,IAAIJ,OAAO,GAAG,KAAKK,iBAAL,EAAd;MACA,OAAO,KAAKH,WAAL,CAAiBF,OAAjB,CAAP;IACD,CAHD,CAGE,OAAOG,CAAP,EAAU;MACV,OAAO,KAAP;IACD;EACF,CA7BmC;EA+BpCG,eAAe,EAAE,UAASC,WAAT,EAAiC;IAChD,IAAIC,SAAS,GAAG,KAAhB;;IACA,QAAQD,WAAR;MACE,KAAK,gBAAL;QACEC,SAAS,GAAG,KAAKJ,wBAAL,EAAZ;QACA;;MACF,KAAK,cAAL;QACEI,SAAS,GAAG,KAAKT,sBAAL,EAAZ;QACA;;MACF,KAAK,QAAL;MACA,KAAK,QAAL;QACES,SAAS,GAAG,IAAZ;QACA;;MACF;QACEA,SAAS,GAAG,KAAZ;QACA;IAbJ;;IAeA,OAAOA,SAAP;EACD,CAjDmC;EAmDpCC,gBAAgB,EAAE,UAASF,WAAT,EAAmCG,OAAnC,EAA2D;IAC3E,IAAIC,eAAJ;;IACA,QAAQJ,WAAR;MACE,KAAK,gBAAL;QACEI,eAAe,GAAG,KAAKN,iBAAL,EAAlB;QACA;;MACF,KAAK,cAAL;QACEM,eAAe,GAAG,KAAKV,eAAL,EAAlB;QACA;;MACF,KAAK,QAAL;QACEU,eAAe,GAAG,KAAKC,gBAAL,CAAsBF,OAAtB,CAAlB;QACA;;MACF,KAAK,QAAL;QACEC,eAAe,GAAG,KAAKE,kBAAL,EAAlB;QACA;;MACF;QACE,MAAM,IAAIC,YAAJ,CAAiB,gCAAgCP,WAAW,EAA5D,CAAN;IAdJ;;IAiBA,OAAOI,eAAP;EACD,CAvEmC;EAyEpCI,eAAe,EAAE,UAASC,KAAT,EAA6B;IAC5C,IAAIC,OAAJ;IACA,IAAIC,QAAJ;IAEAF,KAAK,GAAGA,KAAK,CAACG,KAAN,EAAR;IACAF,OAAO,GAAGD,KAAK,CAACI,KAAN,EAAV;IACAF,QAAQ,GAAGF,KAAK,CAACK,MAAN,GAAeL,KAAK,CAAC,CAAD,CAApB,GAA0B,IAArC;;IACA,IAAI,CAACE,QAAL,EAAe;MACb,OAAOD,OAAP;IACD;;IAED,IAAI,KAAKX,eAAL,CAAqBW,OAArB,CAAJ,EAAmC;MACjC,OAAOA,OAAP;IACD;;IAGDK,IAAI,CAAiC,uCAAO,kBAAkBJ,QAAQ,GAAlE,CAAJ;IAGA,OAAO,KAAKH,eAAL,CAAqBC,KAArB,CAAP;EACD,CA7FmC;EA+FpCf,eAAe,EAAE;IAEf,IAAIsB,YAAY,MAAM,CAACC,MAAM,CAACC,SAA9B,EAAyC;MACvCD,MAAM,CAACC,SAAP,GAAmB,aAAa,CAAhC;IACD;;IAED,OAAOC,YAAP;EACD,CAtGmC;EAwGpCrB,iBAAiB,EAAE;IACjB,OAAOsB,cAAP;EACD,CA1GmC;EA6GpCf,gBAAgB,EAAE,UAASF,OAAT,EAAgB;IAAA;;IAChC,MAAMkB,MAAM,GAAGlB,OAAQ,CAACkB,MAAxB;IACA,MAAMC,QAAQ,GAAGnB,OAAQ,CAACmB,QAA1B;IACA,MAAMC,aAAa,GAAGpB,OAAQ,CAACoB,aAA/B;;IACA,IAAI,OAAOF,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,QAAP,KAAoB,WAAzD,EAAsE;MACpE,MAAM,IAAIf,YAAJ,CAAiB,oEAAjB,CAAN;IACD;;IACD,MAAMd,OAAO,GAAkB;MAC7B+B,OAAO,EAAE,KAAK/B,OAAL,CAAagC,GADO;MAE7BC,OAAO,EAAE,UAACC,GAAD,EAAMC,KAAN,EAAuD;QAAA,IAA1CC,SAA0C,uEAA9B,0BAA8B;QAE9DA,SAAS,GAAIN,aAAa,GAAG,IAAH,GAAUM,SAApC;;QACA,KAAI,CAACpC,OAAL,CAAaqC,GAAb,CAAiBH,GAAjB,EAAsBC,KAAtB,EAA6BC,SAA7B,EAAwC;UACtCR,MAAM,EAAEA,MAD8B;UAEtCC,QAAQ,EAAEA;QAF4B,CAAxC;MAID,CAT4B;MAU7BS,UAAU,EAAGJ,GAAD,IAAQ;QAClB,KAAKlC,OAAL,CAAauC,MAAb,CAAoBL,GAApB;MACD,CAZ4B;MAa7BM,eAAe,EAAE,MAAM;IAbM,CAA/B;;IAgBA,IAAI,CAAC9B,OAAQ,CAAC+B,kBAAd,EAAkC;MAChC,OAAOzC,OAAP;IACD;;IAKD,OAAO;MACL+B,OAAO,EAAE,UAASG,GAAT,EAAY;QACnB,IAAIQ,IAAI,GAAG1C,OAAO,CAAC+B,OAAR,EAAX;QACA,IAAII,KAAK,GAAG,EAAZ;QACAQ,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,OAAlB,CAA0BC,CAAC,IAAG;UAC5B,IAAIA,CAAC,CAACC,OAAF,CAAUb,GAAV,MAAoB,CAAxB,EAA2B;YACzBC,KAAK,CAACW,CAAC,CAACE,OAAF,CAAU,GAAGd,GAAG,GAAhB,EAAqB,EAArB,CAAD,CAAL,GAAkCe,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACI,CAAD,CAAf,CAAlC;UACD;QACF,CAJD;QAKA,OAAOG,IAAI,CAACE,SAAL,CAAehB,KAAf,CAAP;MACD,CAVI;MAWLF,OAAO,EAAE,UAASC,GAAT,EAAcC,KAAd,EAAmB;QAC1B,IAAIiB,cAAc,GAAGH,IAAI,CAACC,KAAL,CAAW,KAAKnB,OAAL,CAAaG,GAAb,CAAX,CAArB;QACAC,KAAK,GAAGc,IAAI,CAACC,KAAL,CAAWf,KAAX,CAAR;QAEAQ,MAAM,CAACC,IAAP,CAAYT,KAAZ,EAAmBU,OAAnB,CAA2BC,CAAC,IAAG;UAC7B,IAAIO,UAAU,GAAGnB,GAAG,GAAG,GAAN,GAAYY,CAA7B;UACA,IAAIQ,YAAY,GAAGL,IAAI,CAACE,SAAL,CAAehB,KAAK,CAACW,CAAD,CAApB,CAAnB;UACA9C,OAAO,CAACiC,OAAR,CAAgBoB,UAAhB,EAA4BC,YAA5B;UACA,OAAOF,cAAc,CAACN,CAAD,CAArB;QACD,CALD;QAOAH,MAAM,CAACC,IAAP,CAAYQ,cAAZ,EAA4BP,OAA5B,CAAoCC,CAAC,IAAG;UACtC9C,OAAO,CAACsC,UAAR,CAAmBJ,GAAG,GAAG,GAAN,GAAYY,CAA/B;QACD,CAFD;MAGD,CAzBI;MA0BLR,UAAU,EAAE,UAASJ,GAAT,EAAY;QACtB,IAAIkB,cAAc,GAAGH,IAAI,CAACC,KAAL,CAAW,KAAKnB,OAAL,CAAaG,GAAb,CAAX,CAArB;QACAS,MAAM,CAACC,IAAP,CAAYQ,cAAZ,EAA4BP,OAA5B,CAAoCC,CAAC,IAAG;UACtC9C,OAAO,CAACsC,UAAR,CAAmBJ,GAAG,GAAG,GAAN,GAAYY,CAA/B;QACD,CAFD;MAGD,CA/BI;MAgCLN,eAAe,EAAE,MAAM;IAhClB,CAAP;EAkCD,CA7KmC;EAgLpCe,aAAa,EAAE,EAhLqB;EAiLpC1C,kBAAkB,EAAE;IAClB,OAAO;MACLkB,OAAO,EAAGG,GAAD,IAAQ;QACf,OAAO,KAAKqB,aAAL,CAAmBrB,GAAnB,CAAP;MACD,CAHI;MAILD,OAAO,EAAE,CAACC,GAAD,EAAMC,KAAN,KAAe;QACtB,KAAKoB,aAAL,CAAmBrB,GAAnB,IAA0BC,KAA1B;MACD,CANI;MAOLK,eAAe,EAAE,MAAM;IAPlB,CAAP;EASD,CA3LmC;EA6LpCtC,WAAW,EAAE,UAASF,OAAT,EAAgB;IAC3B,IAAIkC,GAAG,GAAG,mBAAV;;IACA,IAAI;MACFlC,OAAO,CAACiC,OAAR,CAAgBC,GAAhB,EAAqBA,GAArB;MACAlC,OAAO,CAACsC,UAAR,CAAmBJ,GAAnB;MACA,OAAO,IAAP;IACD,CAJD,CAIE,OAAO/B,CAAP,EAAU;MACV,OAAO,KAAP;IACD;EACF,CAtMmC;EAwMpCH,OAAO,EAAE;IACPqC,GAAG,EAAE,UAASmB,IAAT,EAAuBrB,KAAvB,EAAsCC,SAAtC,EAAyD1B,OAAzD,EAA+E;MAClF,MAAM;QAAEmB,QAAF;QAAYD;MAAZ,IAAuBlB,OAA7B;;MACA,IAAI,OAAOkB,MAAP,KAAkB,WAAlB,IAAiC,OAAOC,QAAP,KAAoB,WAAzD,EAAsE;QACpE,MAAM,IAAIf,YAAJ,CAAiB,+DAAjB,CAAN;MACD;;MACD,IAAI2C,aAAa,GAAkB;QACjCC,IAAI,EAAEhD,OAAO,CAACgD,IAAR,IAAgB,GADW;QAEjC9B,MAFiC;QAGjCC;MAHiC,CAAnC;;MAOA,IAAI,CAAC,CAAE8B,IAAI,CAACT,KAAL,CAAWd,SAAX,CAAP,EAA+B;QAK7BqB,aAAa,CAACG,OAAd,GAAwB,IAAID,IAAJ,CAASvB,SAAT,CAAxB;MACD;;MAEDyB,OAAO,CAACxB,GAAR,CAAYmB,IAAZ,EAAkBrB,KAAlB,EAAyBsB,aAAzB;MACA,OAAO,KAAKzB,GAAL,CAASwB,IAAT,CAAP;IACD,CAvBM;IAyBPxB,GAAG,EAAE,UAASwB,IAAT,EAAsB;MAEzB,IAAI,CAACM,SAAS,CAACzC,MAAf,EAAuB;QACrB,OAAOwC,OAAO,CAAC7B,GAAR,EAAP;MACD;;MACD,OAAO6B,OAAO,CAAC7B,GAAR,CAAYwB,IAAZ,CAAP;IACD,CA/BM;IAiCPjB,MAAM,EAAE,UAASiB,IAAT,EAAqB;MAC3B,OAAOK,OAAO,CAACE,MAAR,CAAeP,IAAf,EAAqB;QAAEE,IAAI,EAAE;MAAR,CAArB,CAAP;IACD;EAnCM;AAxM2B,CAAtC","names":["storageUtil","getHttpCache","getPKCEStorage","browserHasLocalStorage","storage","getLocalStorage","testStorage","e","browserHasSessionStorage","getSessionStorage","testStorageType","storageType","supported","getStorageByType","options","storageProvider","getCookieStorage","getInMemoryStorage","AuthSdkError","findStorageType","types","curType","nextType","slice","shift","length","warn","isIE11OrLess","window","onstorage","localStorage","sessionStorage","secure","sameSite","sessionCookie","getItem","get","setItem","key","value","expiresAt","set","removeItem","delete","isSharedStorage","useSeparateCookies","data","Object","keys","forEach","k","indexOf","replace","JSON","parse","stringify","existingValues","storageKey","valueToStore","inMemoryStore","name","cookieOptions","path","Date","expires","Cookies","arguments","remove"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\browser\\browserStorage.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\nimport Cookies from 'js-cookie';\nimport AuthSdkError from '../errors/AuthSdkError';\nimport {\n  StorageProvider,\n  StorageOptions,\n  PKCEStorage,\n  CookieOptions,\n  SimpleStorage,\n  StorageType,\n  BrowserStorageUtil,\n  CookieStorage\n} from '../types';\nimport { warn } from '../util';\nimport { isIE11OrLess } from '../features';\n\n// Building this as an object allows us to mock the functions in our tests\nvar storageUtil: BrowserStorageUtil = {\n\n  // These are shimmed in `OktaAuthBase.ts`\n  getHttpCache(): StorageProvider {\n    return null as never as StorageProvider;\n  },\n\n  getPKCEStorage(): PKCEStorage {\n    return null as never as PKCEStorage;\n  },\n\n  // IE11 bug that Microsoft doesn't plan to fix\n  // https://connect.microsoft.com/IE/Feedback/Details/1496040\n  browserHasLocalStorage: function() {\n    try {\n      var storage = this.getLocalStorage();\n      return this.testStorage(storage);\n    } catch (e) {\n      return false;\n    }\n  },\n\n  browserHasSessionStorage: function() {\n    try {\n      var storage = this.getSessionStorage();\n      return this.testStorage(storage);\n    } catch (e) {\n      return false;\n    }\n  },\n\n  testStorageType: function(storageType: StorageType): boolean {\n    var supported = false;\n    switch (storageType) {\n      case 'sessionStorage':\n        supported = this.browserHasSessionStorage();\n        break;\n      case 'localStorage':\n        supported = this.browserHasLocalStorage();\n        break;\n      case 'cookie':\n      case 'memory':\n        supported = true;\n        break;\n      default:\n        supported = false;\n        break;\n    }\n    return supported;\n  },\n\n  getStorageByType: function(storageType: StorageType, options?: StorageOptions): SimpleStorage {\n    let storageProvider;\n    switch (storageType) {\n      case 'sessionStorage':\n        storageProvider = this.getSessionStorage();\n        break;\n      case 'localStorage':\n        storageProvider = this.getLocalStorage();\n        break;\n      case 'cookie':\n        storageProvider = this.getCookieStorage(options);\n        break;\n      case 'memory':\n        storageProvider = this.getInMemoryStorage();\n        break;\n      default:\n        throw new AuthSdkError(`Unrecognized storage option: ${storageType}`);\n        break;\n    }\n    return storageProvider;\n  },\n\n  findStorageType: function(types: StorageType[]) {\n    let curType;\n    let nextType;\n    \n    types = types.slice(); // copy array\n    curType = types.shift();\n    nextType = types.length ? types[0] : null;\n    if (!nextType) {\n      return curType;\n    }\n\n    if (this.testStorageType(curType)) {\n      return curType;\n    }\n\n    // preferred type was unsupported.\n    warn(`This browser doesn't support ${curType}. Switching to ${nextType}.`);\n\n    // fallback to the next type. this is a recursive call\n    return this.findStorageType(types);\n  },\n\n  getLocalStorage: function() {\n    // Workaound for synchronization issue of LocalStorage cross tabs in IE11\n    if (isIE11OrLess() && !window.onstorage) {\n      window.onstorage = function() {};\n    }\n    \n    return localStorage;\n  },\n\n  getSessionStorage: function() {\n    return sessionStorage;\n  },\n\n  // Provides webStorage-like interface for cookies\n  getCookieStorage: function(options): CookieStorage {\n    const secure = options!.secure;\n    const sameSite = options!.sameSite;\n    const sessionCookie = options!.sessionCookie;\n    if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {\n      throw new AuthSdkError('getCookieStorage: \"secure\" and \"sameSite\" options must be provided');\n    }\n    const storage: CookieStorage = {\n      getItem: this.storage.get,\n      setItem: (key, value, expiresAt = '2200-01-01T00:00:00.000Z') => {\n        // By defauilt, cookie shouldn't expire\n        expiresAt = (sessionCookie ? null : expiresAt) as string;\n        this.storage.set(key, value, expiresAt, {\n          secure: secure, \n          sameSite: sameSite,\n        });\n      },\n      removeItem: (key) => {\n        this.storage.delete(key);\n      },\n      isSharedStorage: () => true\n    };\n\n    if (!options!.useSeparateCookies) {\n      return storage;\n    }\n\n    // Tokens are stored separately because cookies have size limits.\n    // Can only be used when storing an object value. Object properties will be saved to separate cookies.\n    // Each property of the object must also be an object.\n    return {\n      getItem: function(key) {\n        var data = storage.getItem(); // read all cookies\n        var value = {};\n        Object.keys(data).forEach(k => {\n          if (k.indexOf(key!) === 0) { // filter out unrelated cookies\n            value[k.replace(`${key}_`, '')] = JSON.parse(data[k]); // populate with cookie data\n          }\n        });\n        return JSON.stringify(value);\n      },\n      setItem: function(key, value) {\n        var existingValues = JSON.parse(this.getItem(key));\n        value = JSON.parse(value);\n        // Set key-value pairs from input to cookies\n        Object.keys(value).forEach(k => {\n          var storageKey = key + '_' + k;\n          var valueToStore = JSON.stringify(value[k]);\n          storage.setItem(storageKey, valueToStore);\n          delete existingValues[k];\n        });\n        // Delete unmatched keys from existing cookies\n        Object.keys(existingValues).forEach(k => {\n          storage.removeItem(key + '_' + k);\n        });\n      },\n      removeItem: function(key) {\n        var existingValues = JSON.parse(this.getItem(key));\n        Object.keys(existingValues).forEach(k => {\n          storage.removeItem(key + '_' + k);\n        });\n      },\n      isSharedStorage: () => true\n    };\n  },\n\n  // Provides an in-memory solution\n  inMemoryStore: {}, // override this for a unique memory store per instance\n  getInMemoryStorage: function() {\n    return {\n      getItem: (key) => {\n        return this.inMemoryStore[key];\n      },\n      setItem: (key, value) => {\n        this.inMemoryStore[key] = value;\n      },\n      isSharedStorage: () => false\n    };\n  },\n\n  testStorage: function(storage) {\n    var key = 'okta-test-storage';\n    try {\n      storage.setItem(key, key);\n      storage.removeItem(key);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n\n  storage: {\n    set: function(name: string, value: string, expiresAt: string, options: CookieOptions): string {\n      const { sameSite, secure } = options;\n      if (typeof secure === 'undefined' || typeof sameSite === 'undefined') {\n        throw new AuthSdkError('storage.set: \"secure\" and \"sameSite\" options must be provided');\n      }\n      var cookieOptions: CookieOptions = {\n        path: options.path || '/',\n        secure,\n        sameSite\n      };\n\n      // eslint-disable-next-line no-extra-boolean-cast\n      if (!!(Date.parse(expiresAt))) {\n        // Expires value can be converted to a Date object.\n        //\n        // If the 'expiresAt' value is not provided, or the value cannot be\n        // parsed as a Date object, the cookie will set as a session cookie.\n        cookieOptions.expires = new Date(expiresAt);\n      }\n\n      Cookies.set(name, value, cookieOptions);\n      return this.get(name);\n    },\n\n    get: function(name?: string): string {\n      // return all cookies when no args is provided\n      if (!arguments.length) {\n        return Cookies.get();\n      }\n      return Cookies.get(name);\n    },\n\n    delete: function(name: string): string {\n      return Cookies.remove(name, { path: '/' });\n    }\n  }\n};\n\nexport default storageUtil;\n"]},"metadata":{},"sourceType":"module"}