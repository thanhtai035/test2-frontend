{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\n\nclass Remediator {\n  constructor(remediation) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.values = Object.assign({}, values);\n    this.options = Object.assign({}, options);\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  formatAuthenticators() {\n    this.values.authenticators = this.values.authenticators || [];\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        acc.push(authenticator);\n      }\n\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n\n  getName() {\n    return this.remediation.name;\n  }\n\n  canRemediate() {\n    const required = getRequiredValues(this.remediation);\n    const needed = required.find(key => !this.hasData(key));\n\n    if (needed) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getData(key) {\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues.reduce((data, key) => {\n        data[key] = this.getData(key);\n        return data;\n      }, {});\n      return res;\n    }\n\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](this.remediation.value.find(_ref => {\n        let {\n          name\n        } = _ref;\n        return name === key;\n      }));\n\n      if (val) {\n        return val;\n      }\n    }\n\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n\n        if (val) {\n          return val;\n        }\n      }\n    }\n\n    return this.values[key];\n  }\n\n  hasData(key) {\n    return !!this.getData(key);\n  }\n\n  getNextStep(_authClient, _context) {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    const type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n    return Object.assign(Object.assign({\n      name,\n      inputs\n    }, type && {\n      type\n    }), authenticator && {\n      authenticator\n    });\n  }\n\n  getInputs() {\n    const inputs = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let {\n        name,\n        type,\n        visible,\n        messages\n      } = inputFromRemediation;\n\n      if (visible === false) {\n        return;\n      }\n\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n\n        if (alias) {\n          input = Object.assign(Object.assign({}, inputFromRemediation), {\n            name: alias\n          });\n        }\n      }\n\n      if (!input) {\n        input = inputFromRemediation;\n      }\n\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        if (messages) {\n          input.messages = messages;\n        }\n\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n\n  static getMessages(remediation) {\n    var _a, _b;\n\n    if (!remediation.value) {\n      return;\n    }\n\n    return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce((messages, field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n\n      return messages;\n    }, []);\n  }\n\n  getValuesAfterProceed() {\n    const inputsFromRemediation = this.remediation.value || [];\n    const inputsFromRemediator = this.getInputs();\n    const inputs = [...inputsFromRemediation, ...inputsFromRemediator];\n\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n\n    return this.values;\n  }\n\n  getAuthenticator() {\n    var _a, _b;\n\n    const relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n\n    if (!relatesTo) {\n      return;\n    }\n\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n\n    if (!authenticatorFromRemediation) {\n      return relatesTo;\n    }\n\n    const id = authenticatorFromRemediation.form.value.find(_ref2 => {\n      let {\n        name\n      } = _ref2;\n      return name === 'id';\n    }).value;\n    const enrollmentId = (_b = authenticatorFromRemediation.form.value.find(_ref3 => {\n      let {\n        name\n      } = _ref3;\n      return name === 'enrollmentId';\n    })) === null || _b === void 0 ? void 0 : _b.value;\n    return Object.assign(Object.assign({}, relatesTo), {\n      id,\n      enrollmentId\n    });\n  }\n\n}\n\nexport { Remediator };","map":{"version":3,"mappings":"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","names":["Remediator","constructor","remediation","values","options","Object","formatAuthenticators","authenticators","map","authenticator","formatAuthenticator","hasAuthenticatorInList","some","existing","compareAuthenticators","push","authenticatorsData","reduce","acc","keys","length","getName","name","canRemediate","required","getRequiredValues","needed","find","key","hasData","getData","allValues","getAllValues","res","data","titleCase","val","value","entry","i","getNextStep","_authClient","_context","inputs","getInputs","getAuthenticator","type","inputsFromRemediation","forEach","inputFromRemediation","input","visible","messages","alias","aliases","includes","Array","isArray","getMessages","_a","_b","field","getValuesAfterProceed","inputsFromRemediator","relatesTo","authenticatorFromRemediation","getAuthenticatorFromRemediation","id","form","enrollmentId"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\remediators\\Base\\Remediator.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable complexity */\nimport { NextStep, IdxMessage, Authenticator, Input, RemediateOptions } from '../../types';\nimport { IdxAuthenticator, IdxRemediation, IdxContext } from '../../types/idx-js';\nimport { getAllValues, getRequiredValues, titleCase, getAuthenticatorFromRemediation } from '../util';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\n// A map from IDX data values (server spec) to RemediationValues (client spec)\nexport type IdxToRemediationValueMap = Record<string, string[]>;\n\nexport interface RemediationValues {\n  stateHandle?: string;\n  authenticators?: (Authenticator | string)[];\n  authenticator?: string | Authenticator;\n  authenticatorsData?: Authenticator[];\n  resend?: boolean;\n}\n\nexport interface RemediatorConstructor {\n  new<T extends RemediationValues>(\n    remediation: IdxRemediation, \n    values?: T, \n    options?: RemediateOptions\n  ): any;\n}\n\n// Base class - DO NOT expose static remediationName\nexport class Remediator<T extends RemediationValues = RemediationValues> {\n  static remediationName: string;\n\n  remediation: IdxRemediation;\n  values: T;\n  options: RemediateOptions;\n  map?: IdxToRemediationValueMap;\n\n  constructor(\n    remediation: IdxRemediation, \n    values: T = {} as T, \n    options: RemediateOptions = {}\n  ) {\n    // assign fields to the instance\n    this.values = { ...values };\n    this.options = { ...options };\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  private formatAuthenticators() {\n    this.values.authenticators = (this.values.authenticators || []) as Authenticator[];\n\n    // ensure authenticators are in the correct format\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n\n    // add authenticator (if any) to \"authenticators\"\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n\n    // save non-key meta to \"authenticatorsData\" field\n    // authenticators will be removed after selection to avoid select-authenticator loop\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        // save authenticator meta into authenticator data\n        acc.push(authenticator);\n      }\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n\n  getName(): string {\n    return this.remediation.name;\n  }\n\n  // Override this method to provide custom check\n  /* eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars */\n  canRemediate(): boolean {\n    const required = getRequiredValues(this.remediation);\n    const needed = required!.find((key) => !this.hasData(key));\n    if (needed) {\n      return false; // missing data for a required field\n    }\n    return true; // all required fields have available data\n  }\n\n  // returns an object for the entire remediation form, or just a part\n  getData(key?: string) {\n\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues!.reduce((data, key) => {\n        data[key] = this.getData(key); // recursive\n        return data;\n      }, {});\n      return res;\n    }\n\n    // Map value by \"map${Property}\" function in each subClass\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](\n        this.remediation.value!.find(({name}) => name === key)\n      );\n      if (val) {\n        return val;\n      }\n    }\n\n    // If a map is defined for this key, return the first aliased property that returns a truthy value\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n        if (val) {\n          return val;\n        }\n      }\n    }\n\n    // fallback: return the value by key\n    return this.values[key];\n  }\n\n  hasData(\n    key: string // idx name\n  ): boolean \n  {\n    // no attempt to format, we want simple true/false\n    return !!this.getData(key);\n  }\n\n  getNextStep(_authClient: OktaAuthIdxInterface, _context?: IdxContext): NextStep {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    // TODO: remove type field in the next major version change\n    // https://oktainc.atlassian.net/browse/OKTA-431749\n    const type = authenticator?.type;\n    return { \n      name, \n      inputs, \n      ...(type && { type }),\n      ...(authenticator && { authenticator }),\n    };\n  }\n\n  // Get inputs for the next step\n  getInputs(): Input[] {\n    const inputs: Input[] = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let { name, type, visible, messages } = inputFromRemediation;\n      if (visible === false) {\n        return; // Filter out invisible inputs, like stateHandle\n      }\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        // handle general primitive types\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          // try find key from values\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n        if (alias) {\n          input = { ...inputFromRemediation, name: alias };\n        }\n      }\n      if (!input) {\n        input = inputFromRemediation;\n      }\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        // guarantees field-level messages are passed back\n        if (messages) {\n          input.messages = messages;\n        }\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n\n  static getMessages(remediation: IdxRemediation): IdxMessage[] | undefined {\n    if (!remediation.value) {\n      return;\n    }\n    return remediation.value[0]?.form?.value.reduce((messages: IdxMessage[], field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n      return messages;\n    }, []);\n  }\n\n  // Prepare values for the next remediation\n  // In general, remove used values from inputs for the current remediation\n  // Override this method if special cases need be handled\n  getValuesAfterProceed(): T {\n    const inputsFromRemediation = this.remediation.value || []; // \"raw\" inputs from server response\n    const inputsFromRemediator = this.getInputs(); // \"aliased\" inputs from SDK remediator\n    const inputs = [\n      ...inputsFromRemediation,\n      ...inputsFromRemediator\n    ];\n    // scrub all values related to this remediation\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n    return this.values;\n  }\n\n  protected getAuthenticator(): IdxAuthenticator | undefined {\n    // relatesTo value may be an authenticator or an authenticatorEnrollment\n    const relatesTo = this.remediation.relatesTo?.value;\n    if (!relatesTo) {\n      return;\n    }\n\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    if (!authenticatorFromRemediation) {\n      // Hopefully value is an authenticator\n      return relatesTo;\n    }\n\n    // If relatesTo is an authenticatorEnrollment, the id is actually the enrollmentId\n    // Let's get the correct authenticator id from the form value\n    const id = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'id')!.value as string;\n    const enrollmentId = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'enrollmentId')?.value as string;\n\n    return {\n      ...relatesTo,\n      id,\n      enrollmentId\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}