{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticatorFromRemediation } from '../util.js';\nimport { isAuthenticator } from '../../types/api.js';\nimport { findMatchedOption, compareAuthenticators } from '../../authenticator/util.js';\n\nclass SelectAuthenticator extends Remediator {\n  findMatchedOption(authenticators, options) {\n    let option;\n\n    for (let authenticator of authenticators) {\n      option = options.find(_ref => {\n        let {\n          relatesTo\n        } = _ref;\n        return relatesTo.key === authenticator.key;\n      });\n\n      if (option) {\n        break;\n      }\n    }\n\n    return option;\n  }\n\n  canRemediate() {\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const {\n      options\n    } = authenticatorFromRemediation;\n\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      return true;\n    }\n\n    const matchedOption = this.findMatchedOption(authenticators, options);\n\n    if (matchedOption) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getNextStep(authClient) {\n    const common = super.getNextStep(authClient);\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const options = authenticatorFromRemediation.options.map(option => {\n      const {\n        label,\n        relatesTo\n      } = option;\n      const key = relatesTo.key;\n      return {\n        label,\n        value: key\n      };\n    });\n    return Object.assign(Object.assign({}, common), {\n      options\n    });\n  }\n\n  mapAuthenticator(remediationValue) {\n    const {\n      authenticators,\n      authenticator\n    } = this.values;\n\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      this.selectedAuthenticator = authenticator;\n      return authenticator;\n    }\n\n    const {\n      options\n    } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    this.selectedAuthenticator = selectedOption.relatesTo;\n    this.selectedOption = selectedOption;\n    return {\n      id: selectedOption === null || selectedOption === void 0 ? void 0 : selectedOption.value.form.value.find(_ref2 => {\n        let {\n          name\n        } = _ref2;\n        return name === 'id';\n      }).value\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    const options = remediation.options.map(_ref3 => {\n      let {\n        label,\n        relatesTo\n      } = _ref3;\n      return {\n        label,\n        value: relatesTo.key\n      };\n    });\n    return {\n      name: 'authenticator',\n      type: 'string',\n      options\n    };\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    const authenticators = this.values.authenticators.filter(authenticator => {\n      return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n    });\n    return Object.assign(Object.assign({}, this.values), {\n      authenticators\n    });\n  }\n\n}\n\nexport { SelectAuthenticator };","map":{"version":3,"mappings":"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","names":["SelectAuthenticator","Remediator","findMatchedOption","authenticators","options","option","authenticator","find","relatesTo","key","canRemediate","values","authenticatorFromRemediation","getAuthenticatorFromRemediation","remediation","length","isAuthenticator","id","matchedOption","getNextStep","authClient","common","map","label","value","Object","mapAuthenticator","remediationValue","selectedAuthenticator","selectedOption","form","name","getInputAuthenticator","type","getValuesAfterProceed","filter","compareAuthenticators"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\remediators\\Base\\SelectAuthenticator.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { getAuthenticatorFromRemediation } from '../util';\nimport { IdxOption, IdxRemediationValue } from '../../types/idx-js';\nimport { Authenticator, isAuthenticator } from '../../types';\nimport { compareAuthenticators, findMatchedOption} from '../../authenticator/util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\nexport type SelectAuthenticatorValues = RemediationValues & {\n  authenticator?: string | Authenticator;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class SelectAuthenticator<T extends SelectAuthenticatorValues = SelectAuthenticatorValues>\n  extends Remediator<T> {\n  selectedAuthenticator?: Authenticator;\n  selectedOption?: any;\n\n  // Find matched authenticator in provided order\n  findMatchedOption(authenticators, options) {\n    let option;\n    for (let authenticator of authenticators) {\n      option = options\n        .find(({ relatesTo }) => relatesTo.key === authenticator.key);\n      if (option) {\n        break;\n      }\n    }\n    return option;\n  }\n\n  canRemediate() {\n    const { authenticators, authenticator } = this.values;\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const { options } = authenticatorFromRemediation;\n    // Let users select authenticator if no input is provided\n    if (!authenticators || !authenticators.length) {\n      return false;\n    }\n\n    // Authenticator is explicitly specified by id\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      return true;\n    }\n\n    // Proceed with provided authenticators\n    const matchedOption = this.findMatchedOption(authenticators, options);\n    if (matchedOption) {\n      return true;\n    }\n    \n    return false;\n  }\n\n  // TODO: remove this override method in the next major version - OKTA-491236\n  getNextStep(authClient: OktaAuthIdxInterface) {\n    const common = super.getNextStep(authClient);\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    const options = authenticatorFromRemediation.options!.map(option => {\n      const { \n        label, \n        relatesTo\n      } = option as IdxOption;\n      const key = relatesTo!.key!;\n      return { label, value: key };\n    });\n    return { ...common, options };\n  }\n\n  mapAuthenticator(remediationValue: IdxRemediationValue) {\n    const { authenticators, authenticator } = this.values;\n\n    // Authenticator is explicitly specified by id\n    if (isAuthenticator(authenticator) && authenticator.id) {\n      this.selectedAuthenticator = authenticator; // track the selected authenticator\n      return authenticator;\n    }\n\n    const { options } = remediationValue;\n    const selectedOption = findMatchedOption(authenticators, options);\n    this.selectedAuthenticator = selectedOption.relatesTo; // track the selected authenticator\n    this.selectedOption = selectedOption;\n    return {\n      id: selectedOption?.value.form.value.find(({ name }) => name === 'id').value\n    };\n  }\n\n  getInputAuthenticator(remediation) {\n    const options = remediation.options.map(({ label, relatesTo }) => {\n      return {\n        label,\n        value: relatesTo.key\n      };\n    });\n    return { name: 'authenticator', type: 'string', options };\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticators\n    const authenticators = (this.values.authenticators as Authenticator[])\n      .filter(authenticator => {\n        return compareAuthenticators(authenticator, this.selectedAuthenticator) !== true;\n      });\n    return { ...this.values, authenticators };\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}