{"ast":null,"code":"import _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { TRANSACTION_STORAGE_NAME, SHARED_TRANSACTION_STORAGE_NAME, ORIGINAL_URI_STORAGE_NAME, IDX_RESPONSE_STORAGE_NAME, TOKEN_STORAGE_NAME, CACHE_STORAGE_NAME, PKCE_STORAGE_NAME, REDIRECT_OAUTH_PARAMS_NAME } from './constants.js';\nimport SavedObject from './SavedObject.js';\nimport { isBrowser } from './features.js';\nimport { warn } from './util/console.js';\nimport AuthSdkError from './errors/AuthSdkError.js';\n\nfunction logServerSideMemoryStorageWarning(options) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\nvar StorageManager = /*#__PURE__*/function () {\n  function StorageManager(storageManagerOptions, cookieOptions, storageUtil) {\n    _classCallCheck(this, StorageManager);\n\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  _createClass(StorageManager, [{\n    key: \"getOptionsForSection\",\n    value: function getOptionsForSection(sectionName, overrideOptions) {\n      return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n    }\n  }, {\n    key: \"getStorage\",\n    value: function getStorage(options) {\n      options = Object.assign({}, this.cookieOptions, options);\n\n      if (options.storageProvider) {\n        return options.storageProvider;\n      }\n\n      var _options = options,\n          storageType = _options.storageType,\n          storageTypes = _options.storageTypes;\n\n      if (storageType === 'sessionStorage') {\n        options.sessionCookie = true;\n      }\n\n      if (storageType && storageTypes) {\n        var idx = storageTypes.indexOf(storageType);\n\n        if (idx >= 0) {\n          storageTypes = storageTypes.slice(idx);\n          storageType = undefined;\n        }\n      }\n\n      if (!storageType) {\n        storageType = this.storageUtil.findStorageType(storageTypes);\n      }\n\n      return this.storageUtil.getStorageByType(storageType, options);\n    }\n  }, {\n    key: \"getTransactionStorage\",\n    value: function getTransactionStorage(options) {\n      options = this.getOptionsForSection('transaction', options);\n      logServerSideMemoryStorageWarning(options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }, {\n    key: \"getSharedTansactionStorage\",\n    value: function getSharedTansactionStorage(options) {\n      options = this.getOptionsForSection('shared-transaction', options);\n      logServerSideMemoryStorageWarning(options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }, {\n    key: \"getOriginalUriStorage\",\n    value: function getOriginalUriStorage(options) {\n      options = this.getOptionsForSection('original-uri', options);\n      logServerSideMemoryStorageWarning(options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }, {\n    key: \"getIdxResponseStorage\",\n    value: function getIdxResponseStorage(options) {\n      var storage;\n\n      if (isBrowser()) {\n        try {\n          storage = this.storageUtil.getStorageByType('memory', options);\n        } catch (e) {\n          warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n        }\n      } else {\n        var transactionStorage = this.getTransactionStorage(options);\n\n        if (transactionStorage) {\n          storage = {\n            getItem: function getItem(key) {\n              var transaction = transactionStorage.getStorage();\n\n              if (transaction && transaction[key]) {\n                return transaction[key];\n              }\n\n              return null;\n            },\n            setItem: function setItem(key, val) {\n              var transaction = transactionStorage.getStorage();\n\n              if (!transaction) {\n                throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n              }\n\n              transaction[key] = val;\n              transactionStorage.setStorage(transaction);\n            },\n            removeItem: function removeItem(key) {\n              var transaction = transactionStorage.getStorage();\n\n              if (!transaction) {\n                return;\n              }\n\n              delete transaction[key];\n              transactionStorage.setStorage(transaction);\n            }\n          };\n        }\n      }\n\n      if (!storage) {\n        return null;\n      }\n\n      return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n    }\n  }, {\n    key: \"getTokenStorage\",\n    value: function getTokenStorage(options) {\n      options = this.getOptionsForSection('token', options);\n      logServerSideMemoryStorageWarning(options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }, {\n    key: \"getHttpCache\",\n    value: function getHttpCache(options) {\n      options = this.getOptionsForSection('cache', options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || CACHE_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }, {\n    key: \"getLegacyPKCEStorage\",\n    value: function getLegacyPKCEStorage(options) {\n      options = this.getOptionsForSection('legacy-pkce', options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || PKCE_STORAGE_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }, {\n    key: \"getLegacyOAuthParamsStorage\",\n    value: function getLegacyOAuthParamsStorage(options) {\n      options = this.getOptionsForSection('legacy-oauth-params', options);\n      var storage = this.getStorage(options);\n      var storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n      return new SavedObject(storage, storageKey);\n    }\n  }]);\n\n  return StorageManager;\n}();\n\nexport { StorageManager };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAwCA,SAASA,iCAAT,CAA2CC,OAA3C,EAAkE;EAChE,IAAI,CAACC,SAAS,EAAV,IAAgB,CAACD,OAAO,CAACE,eAAzB,IAA4C,CAACF,OAAO,CAACE,eAAzD,EAA0E;IAExEC,IAAI,CAAC,6KAAD,CAAJ;EACD;AACF;;IAEYC,c;EAKX,wBAAYC,qBAAZ,EAA0DC,aAA1D,EAAwFC,WAAxF,EAAgH;IAAA;;IAC9G,KAAKF,qBAAL,GAA6BA,qBAA7B;IACA,KAAKC,aAAL,GAAqBA,aAArB;IACA,KAAKC,WAAL,GAAmBA,WAAnB;EACD;;;;WAGD,8BAAqBC,WAArB,EAA0CC,eAA1C,EAA0E;MACxE,OAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKN,qBAAL,CAA2BG,WAA3B,CAAlB,EAA2DC,eAA3D,CAAP;IACD;;;WAID,oBAAWT,OAAX,EAAkC;MAChCA,OAAO,GAAGU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKL,aAAvB,EAAsCN,OAAtC,CAAV;;MAEA,IAAIA,OAAO,CAACE,eAAZ,EAA6B;QAC3B,OAAOF,OAAO,CAACE,eAAf;MACD;;MAED,eAAoCF,OAApC;MAAA,IAAMY,WAAN,YAAMA,WAAN;MAAA,IAAmBC,YAAnB,YAAmBA,YAAnB;;MAEA,IAAGD,WAAW,KAAK,gBAAnB,EAAqC;QACnCZ,OAAO,CAACc,aAAR,GAAwB,IAAxB;MACD;;MAGD,IAAIF,WAAW,IAAIC,YAAnB,EAAiC;QAC/B,IAAME,GAAG,GAAGF,YAAY,CAACG,OAAb,CAAqBJ,WAArB,CAAZ;;QACA,IAAIG,GAAG,IAAI,CAAX,EAAc;UACZF,YAAY,GAAGA,YAAY,CAACI,KAAb,CAAmBF,GAAnB,CAAf;UACAH,WAAW,GAAGM,SAAd;QACD;MACF;;MAED,IAAI,CAACN,WAAL,EAAkB;QAEhBA,WAAW,GAAG,KAAKL,WAAL,CAAiBY,eAAjB,CAAiCN,YAAjC,CAAd;MACD;;MACD,OAAO,KAAKN,WAAL,CAAiBa,gBAAjB,CAAkCR,WAAlC,EAA+CZ,OAA/C,CAAP;IACD;;;WAGD,+BAAsBA,OAAtB,EAA8C;MAC5CA,OAAO,GAAG,KAAKqB,oBAAL,CAA0B,aAA1B,EAAyCrB,OAAzC,CAAV;MACAD,iCAAiC,CAACC,OAAD,CAAjC;MACA,IAAMsB,OAAO,GAAG,KAAKC,UAAL,CAAgBvB,OAAhB,CAAhB;MACA,IAAMwB,UAAU,GAAGxB,OAAO,CAACwB,UAAR,IAAsBC,wBAAzC;MACA,OAAO,IAAIC,WAAJ,CAAgBJ,OAAhB,EAAyBE,UAAzB,CAAP;IACD;;;WAED,oCAA2BxB,OAA3B,EAAmD;MACjDA,OAAO,GAAG,KAAKqB,oBAAL,CAA0B,oBAA1B,EAAgDrB,OAAhD,CAAV;MACAD,iCAAiC,CAACC,OAAD,CAAjC;MACA,IAAMsB,OAAO,GAAG,KAAKC,UAAL,CAAgBvB,OAAhB,CAAhB;MACA,IAAMwB,UAAU,GAAGxB,OAAO,CAACwB,UAAR,IAAsBG,+BAAzC;MACA,OAAO,IAAID,WAAJ,CAAgBJ,OAAhB,EAAyBE,UAAzB,CAAP;IACD;;;WAED,+BAAsBxB,OAAtB,EAA8C;MAC5CA,OAAO,GAAG,KAAKqB,oBAAL,CAA0B,cAA1B,EAA0CrB,OAA1C,CAAV;MACAD,iCAAiC,CAACC,OAAD,CAAjC;MACA,IAAMsB,OAAO,GAAG,KAAKC,UAAL,CAAgBvB,OAAhB,CAAhB;MACA,IAAMwB,UAAU,GAAGxB,OAAO,CAACwB,UAAR,IAAsBI,yBAAzC;MACA,OAAO,IAAIF,WAAJ,CAAgBJ,OAAhB,EAAyBE,UAAzB,CAAP;IACD;;;WAKD,+BAAsBxB,OAAtB,EAA8C;MAC5C,IAAIsB,OAAJ;;MACA,IAAIrB,SAAS,EAAb,EAAiB;QAEf,IAAI;UACFqB,OAAO,GAAG,KAAKf,WAAL,CAAiBa,gBAAjB,CAAkC,QAAlC,EAA4CpB,OAA5C,CAAV;QACD,CAFD,CAEE,OAAO6B,CAAP,EAAU;UAGV1B,IAAI,CAAC,yIAAD,CAAJ;QACD;MACF,CATD,MASO;QAEL,IAAM2B,kBAAkB,GAAG,KAAKC,qBAAL,CAA2B/B,OAA3B,CAA3B;;QACA,IAAI8B,kBAAJ,EAAwB;UACtBR,OAAO,GAAG;YACRU,OAAO,EAAE,iBAACC,GAAD,EAAQ;cACf,IAAMC,WAAW,GAAGJ,kBAAkB,CAACP,UAAnB,EAApB;;cACA,IAAIW,WAAW,IAAIA,WAAW,CAACD,GAAD,CAA9B,EAAqC;gBACnC,OAAOC,WAAW,CAACD,GAAD,CAAlB;cACD;;cACD,OAAO,IAAP;YACD,CAPO;YAQRE,OAAO,EAAE,iBAACF,GAAD,EAAMG,GAAN,EAAa;cACpB,IAAMF,WAAW,GAAGJ,kBAAkB,CAACP,UAAnB,EAApB;;cACA,IAAI,CAACW,WAAL,EAAkB;gBAChB,MAAM,IAAIG,YAAJ,CAAiB,uDAAjB,CAAN;cACD;;cACDH,WAAW,CAACD,GAAD,CAAX,GAAmBG,GAAnB;cACAN,kBAAkB,CAACQ,UAAnB,CAA8BJ,WAA9B;YACD,CAfO;YAgBRK,UAAU,EAAE,oBAACN,GAAD,EAAQ;cAClB,IAAMC,WAAW,GAAGJ,kBAAkB,CAACP,UAAnB,EAApB;;cACA,IAAI,CAACW,WAAL,EAAkB;gBAChB;cACD;;cACD,OAAOA,WAAW,CAACD,GAAD,CAAlB;cACAH,kBAAkB,CAACQ,UAAnB,CAA8BJ,WAA9B;YACD;UAvBO,CAAV;QAyBD;MACF;;MAED,IAAI,CAACZ,OAAL,EAAc;QACZ,OAAO,IAAP;MACD;;MAED,OAAO,IAAII,WAAJ,CAAgBJ,OAAhB,EAAyBkB,yBAAzB,CAAP;IACD;;;WAGD,yBAAgBxC,OAAhB,EAAwC;MACtCA,OAAO,GAAG,KAAKqB,oBAAL,CAA0B,OAA1B,EAAmCrB,OAAnC,CAAV;MACAD,iCAAiC,CAACC,OAAD,CAAjC;MACA,IAAMsB,OAAO,GAAG,KAAKC,UAAL,CAAgBvB,OAAhB,CAAhB;MACA,IAAMwB,UAAU,GAAGxB,OAAO,CAACwB,UAAR,IAAsBiB,kBAAzC;MACA,OAAO,IAAIf,WAAJ,CAAgBJ,OAAhB,EAAyBE,UAAzB,CAAP;IACD;;;WAGD,sBAAaxB,OAAb,EAAqC;MACnCA,OAAO,GAAG,KAAKqB,oBAAL,CAA0B,OAA1B,EAAmCrB,OAAnC,CAAV;MACA,IAAMsB,OAAO,GAAG,KAAKC,UAAL,CAAgBvB,OAAhB,CAAhB;MACA,IAAMwB,UAAU,GAAGxB,OAAO,CAACwB,UAAR,IAAsBkB,kBAAzC;MACA,OAAO,IAAIhB,WAAJ,CAAgBJ,OAAhB,EAAyBE,UAAzB,CAAP;IACD;;;WAGD,8BAAqBxB,OAArB,EAA6C;MAC3CA,OAAO,GAAG,KAAKqB,oBAAL,CAA0B,aAA1B,EAAyCrB,OAAzC,CAAV;MACA,IAAMsB,OAAO,GAAG,KAAKC,UAAL,CAAgBvB,OAAhB,CAAhB;MACA,IAAMwB,UAAU,GAAGxB,OAAO,CAACwB,UAAR,IAAsBmB,iBAAzC;MACA,OAAO,IAAIjB,WAAJ,CAAgBJ,OAAhB,EAAyBE,UAAzB,CAAP;IACD;;;WAED,qCAA4BxB,OAA5B,EAAoD;MAClDA,OAAO,GAAG,KAAKqB,oBAAL,CAA0B,qBAA1B,EAAiDrB,OAAjD,CAAV;MACA,IAAMsB,OAAO,GAAG,KAAKC,UAAL,CAAgBvB,OAAhB,CAAhB;MACA,IAAMwB,UAAU,GAAGxB,OAAO,CAACwB,UAAR,IAAsBoB,0BAAzC;MACA,OAAO,IAAIlB,WAAJ,CAAgBJ,OAAhB,EAAyBE,UAAzB,CAAP;IACD","names":["logServerSideMemoryStorageWarning","options","isBrowser","storageProvider","warn","StorageManager","storageManagerOptions","cookieOptions","storageUtil","sectionName","overrideOptions","Object","assign","storageType","storageTypes","sessionCookie","idx","indexOf","slice","undefined","findStorageType","getStorageByType","getOptionsForSection","storage","getStorage","storageKey","TRANSACTION_STORAGE_NAME","SavedObject","SHARED_TRANSACTION_STORAGE_NAME","ORIGINAL_URI_STORAGE_NAME","e","transactionStorage","getTransactionStorage","getItem","key","transaction","setItem","val","AuthSdkError","setStorage","removeItem","IDX_RESPONSE_STORAGE_NAME","TOKEN_STORAGE_NAME","CACHE_STORAGE_NAME","PKCE_STORAGE_NAME","REDIRECT_OAUTH_PARAMS_NAME"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\StorageManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n\nimport {\n  PKCE_STORAGE_NAME,\n  TOKEN_STORAGE_NAME,\n  TRANSACTION_STORAGE_NAME,\n  SHARED_TRANSACTION_STORAGE_NAME,\n  ORIGINAL_URI_STORAGE_NAME,\n  IDX_RESPONSE_STORAGE_NAME,\n  CACHE_STORAGE_NAME,\n  REDIRECT_OAUTH_PARAMS_NAME\n} from './constants';\nimport {\n  StorageUtil,\n  StorageProvider,\n  StorageOptions,\n  PKCEStorage,\n  CookieOptions,\n  TransactionStorage,\n  IdxResponseStorage,\n  StorageManagerOptions,\n  SimpleStorage\n} from './types';\nimport SavedObject from './SavedObject';\nimport { isBrowser } from './features';\nimport { warn } from './util';\nimport { AuthSdkError } from './errors';\n\nfunction logServerSideMemoryStorageWarning(options: StorageOptions) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    // eslint-disable-next-line max-len\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\nexport class StorageManager {\n  storageManagerOptions: StorageManagerOptions;\n  cookieOptions: CookieOptions;\n  storageUtil: StorageUtil;\n\n  constructor(storageManagerOptions: StorageManagerOptions, cookieOptions: CookieOptions, storageUtil: StorageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  // combines defaults in order\n  getOptionsForSection(sectionName: string, overrideOptions?: StorageOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n \n  // generic method to get any available storage provider\n  // eslint-disable-next-line complexity\n  getStorage(options: StorageOptions): SimpleStorage {\n    options = Object.assign({}, this.cookieOptions, options); // set defaults\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let { storageType, storageTypes } = options;\n\n    if(storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    // Maintain compatibility. Automatically fallback. May change in next major version. OKTA-362589\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = undefined;\n      }\n    }\n\n    if (!storageType) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      storageType = this.storageUtil.findStorageType(storageTypes!);\n    }\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  // stateToken, interactionHandle\n  getTransactionStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getSharedTansactionStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('shared-transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getOriginalUriStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('original-uri', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // intermediate idxResponse\n  // store for network traffic optimazation purpose\n  // TODO: revisit in auth-js 6.0 epic JIRA: OKTA-399791\n  getIdxResponseStorage(options?: StorageOptions): IdxResponseStorage | null {\n    let storage;\n    if (isBrowser()) {\n      // on browser side only use memory storage \n      try {\n        storage = this.storageUtil.getStorageByType('memory', options);\n      } catch (e) {\n        // it's ok to miss response storage\n        // eslint-disable-next-line max-len\n        warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n      }\n    } else {\n      // on server side re-use transaction custom storage\n      const transactionStorage = this.getTransactionStorage(options);\n      if (transactionStorage) {\n        storage = {\n          getItem: (key) => {\n            const transaction = transactionStorage.getStorage();\n            if (transaction && transaction[key]) {\n              return transaction[key];\n            }\n            return null;\n          },\n          setItem: (key, val) => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n            }\n            transaction[key] = val;\n            transactionStorage.setStorage(transaction);\n          },\n          removeItem: (key) => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              return;\n            }\n            delete transaction[key];\n            transactionStorage.setStorage(transaction);\n          }\n        };\n      }\n    }\n\n    if (!storage) {\n      return null;\n    }\n\n    return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n  }\n\n  // access_token, id_token, refresh_token\n  getTokenStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // caches well-known response, among others\n  getHttpCache(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // Will be removed in an upcoming major version. OKTA-362589\n  getLegacyPKCEStorage(options?: StorageOptions): PKCEStorage {\n    options = this.getOptionsForSection('legacy-pkce', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyOAuthParamsStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('legacy-oauth-params', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}