{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getSavedTransactionMeta, createTransactionMeta, saveTransactionMeta } from './transactionMeta.js';\nimport { removeNils } from '../util/object.js';\nimport { httpRequest } from '../http/request.js';\nimport { getOAuthBaseUrl } from '../oidc/util/oauth.js';\nimport './types/api.js';\nimport '../myaccount/types.js';\n\nfunction getResponse(meta) {\n  return {\n    meta,\n    interactionHandle: meta.interactionHandle,\n    state: meta.state\n  };\n}\n\nasync function interact(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = removeNils(options);\n  let meta = getSavedTransactionMeta(authClient, options);\n\n  if (meta === null || meta === void 0 ? void 0 : meta.interactionHandle) {\n    return getResponse(meta);\n  }\n\n  meta = await createTransactionMeta(authClient, Object.assign(Object.assign({}, meta), options));\n  const baseUrl = getOAuthBaseUrl(authClient);\n  let {\n    clientId,\n    redirectUri,\n    state,\n    scopes,\n    withCredentials,\n    codeChallenge,\n    codeChallengeMethod,\n    activationToken,\n    recoveryToken,\n    maxAge\n  } = meta;\n  const clientSecret = options.clientSecret || authClient.options.clientSecret;\n  withCredentials = withCredentials !== null && withCredentials !== void 0 ? withCredentials : true;\n  const url = `${baseUrl}/v1/interact`;\n  const params = Object.assign(Object.assign(Object.assign(Object.assign({\n    client_id: clientId,\n    scope: scopes.join(' '),\n    redirect_uri: redirectUri,\n    code_challenge: codeChallenge,\n    code_challenge_method: codeChallengeMethod,\n    state\n  }, activationToken && {\n    activation_token: activationToken\n  }), recoveryToken && {\n    recovery_token: recoveryToken\n  }), clientSecret && {\n    client_secret: clientSecret\n  }), maxAge && {\n    max_age: maxAge\n  });\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  const resp = await httpRequest(authClient, {\n    method: 'POST',\n    url,\n    headers,\n    withCredentials,\n    args: params\n  });\n  const interactionHandle = resp.interaction_handle;\n  const newMeta = Object.assign(Object.assign({}, meta), {\n    interactionHandle,\n    withCredentials,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken\n  });\n  saveTransactionMeta(authClient, newMeta);\n  return getResponse(newMeta);\n}\n\nexport { interact };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAmCA,SAASA,WAAT,CAAqBC,IAArB,EAA6C;EAC3C,OAAO;IACLA,IADK;IAELC,iBAAiB,EAAED,IAAI,CAACC,iBAFnB;IAGLC,KAAK,EAAEF,IAAI,CAACE;EAHP,CAAP;AAKD;;AAGM,eAAeC,QAAf,CACLC,UADK,EAEwB;EAAA,IAA7BC,OAA6B,uEAAF,EAAE;EAE7BA,OAAO,GAAGC,UAAU,CAACD,OAAD,CAApB;EAEA,IAAIL,IAAI,GAAGO,uBAAuB,CAACH,UAAD,EAAaC,OAAb,CAAlC;;EAGA,IAAIL,IAAI,KAAJ,YAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEC,iBAAV,EAA6B;IAC3B,OAAOF,WAAW,CAACC,IAAD,CAAlB;EACD;;EAGDA,IAAI,GAAG,MAAMQ,qBAAqB,CAACJ,UAAD,EAAWK,gCAAOT,IAAP,GAAgBK,OAAhB,CAAX,CAAlC;EACA,MAAMK,OAAO,GAAGC,eAAe,CAACP,UAAD,CAA/B;EACA,IAAI;IACFQ,QADE;IAEFC,WAFE;IAGFX,KAHE;IAIFY,MAJE;IAKFC,eALE;IAMFC,aANE;IAOFC,mBAPE;IAQFC,eARE;IASFC,aATE;IAUFC;EAVE,IAWApB,IAXJ;EAYA,MAAMqB,YAAY,GAAGhB,OAAO,CAACgB,YAAR,IAAwBjB,UAAU,CAACC,OAAX,CAAmBgB,YAAhE;EACAN,eAAe,GAAGA,eAAe,KAAf,uBAAe,WAAf,qBAAmB,IAArC;EAGA,MAAMO,GAAG,GAAM,UAAO,cAAtB;EACA,MAAMC,MAAM,GAAGd,MACb,OADa,CACbA;IAAAe,SAAS,EAAEZ,QAAX;IACAa,KAAK,EAAEX,MAAO,CAACY,IAAR,CAAa,GAAb,CADP;IAEAC,YAAY,EAAEd,WAFd;IAGAe,cAAc,EAAEZ,aAHhB;IAIAa,qBAAqB,EAAEZ,mBAJvB;IAKAf;EALA,GAMIgB,eAAe,IAAI;IAAEY,gBAAgB,EAAEZ;EAApB,CANvB,GAOIC,aAAa,IAAI;IAAEY,cAAc,EAAEZ;EAAlB,CAPrB,GAWIE,YAAY,IAAI;IAAEW,aAAa,EAAEX;EAAjB,CAXpB,CADa,EAaTD,MAAM,IAAI;IAAEa,OAAO,EAAEb;EAAX,CAbD,CAAf;EAiBA,MAAMc,OAAO,GAAG;IACd,gBAAgB;EADF,CAAhB;EAIA,MAAMC,IAAI,GAAG,MAAMC,WAAW,CAAChC,UAAD,EAAa;IACzCiC,MAAM,EAAE,MADiC;IAEzCf,GAFyC;IAGzCY,OAHyC;IAIzCnB,eAJyC;IAKzCuB,IAAI,EAAEf;EALmC,CAAb,CAA9B;EAOA,MAAMtB,iBAAiB,GAAGkC,IAAI,CAACI,kBAA/B;EAEA,MAAMC,OAAO,mCACRxC,IADQ,GACJ;IACPC,iBADO;IAIPc,eAJO;IAKPb,KALO;IAMPY,MANO;IAOPK,aAPO;IAQPD;EARO,CADI,CAAb;EAYAuB,mBAAmB,CAACrC,UAAD,EAAaoC,OAAb,CAAnB;EAEA,OAAOzC,WAAW,CAACyC,OAAD,CAAlB;AACF","names":["getResponse","meta","interactionHandle","state","interact","authClient","options","removeNils","getSavedTransactionMeta","createTransactionMeta","Object","baseUrl","getOAuthBaseUrl","clientId","redirectUri","scopes","withCredentials","codeChallenge","codeChallengeMethod","activationToken","recoveryToken","maxAge","clientSecret","url","params","client_id","scope","join","redirect_uri","code_challenge","code_challenge_method","activation_token","recovery_token","client_secret","max_age","headers","resp","httpRequest","method","args","interaction_handle","newMeta","saveTransactionMeta"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\interact.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n/* eslint complexity:[0,8] */\nimport { OktaAuthIdxInterface, IdxTransactionMeta, InteractOptions, InteractResponse } from '../types';\nimport { getSavedTransactionMeta, saveTransactionMeta, createTransactionMeta } from './transactionMeta';\nimport { getOAuthBaseUrl } from '../oidc';\nimport { removeNils } from '../util';\nimport { httpRequest } from '../http';\n\n\n/* eslint-disable camelcase */\nexport interface InteractParams {\n  client_id: string;\n  scope: string;\n  redirect_uri: string;\n  code_challenge: string;\n  code_challenge_method: string;\n  state: string;\n  activation_token?: string;\n  recovery_token?: string;\n  client_secret?: string;\n  max_age?: string | number;\n}\n/* eslint-enable camelcase */\n\nfunction getResponse(meta: IdxTransactionMeta): InteractResponse {\n  return {\n    meta,\n    interactionHandle: meta.interactionHandle!,\n    state: meta.state\n  };\n}\n\n// Begin or resume a transaction. Returns an interaction handle\nexport async function interact (\n  authClient: OktaAuthIdxInterface, \n  options: InteractOptions = {}\n): Promise<InteractResponse> {\n  options = removeNils(options);\n\n  let meta = getSavedTransactionMeta(authClient, options);\n  // If meta exists, it has been validated against all options\n\n  if (meta?.interactionHandle) {\n    return getResponse(meta); // Saved transaction, return meta\n  }\n\n  // Create new meta, respecting previous meta if it has been set and is not overridden\n  meta = await createTransactionMeta(authClient, { ...meta, ...options });\n  const baseUrl = getOAuthBaseUrl(authClient);\n  let {\n    clientId,\n    redirectUri,\n    state,\n    scopes,\n    withCredentials,\n    codeChallenge,\n    codeChallengeMethod,\n    activationToken,\n    recoveryToken,\n    maxAge\n  } = meta as IdxTransactionMeta;\n  const clientSecret = options.clientSecret || authClient.options.clientSecret;\n  withCredentials = withCredentials ?? true;\n\n  /* eslint-disable camelcase */\n  const url = `${baseUrl}/v1/interact`;\n  const params = {\n    client_id: clientId,\n    scope: scopes!.join(' '),\n    redirect_uri: redirectUri,\n    code_challenge: codeChallenge,\n    code_challenge_method: codeChallengeMethod,\n    state,\n    ...(activationToken && { activation_token: activationToken }),\n    ...(recoveryToken && { recovery_token: recoveryToken }),\n    // X-Device-Token header need to pair with `client_secret`\n    // eslint-disable-next-line max-len\n    // https://oktawiki.atlassian.net/wiki/spaces/eng/pages/2445902453/Support+Device+Binding+in+interact#Scenario-1%3A-Non-User-Agent-with-Confidential-Client-(top-priority)\n    ...(clientSecret && { client_secret: clientSecret }),\n    ...(maxAge && { max_age: maxAge })\n  } as InteractParams;\n  /* eslint-enable camelcase */\n\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n\n  const resp = await httpRequest(authClient, {\n    method: 'POST',\n    url,\n    headers,\n    withCredentials,\n    args: params\n  });\n  const interactionHandle = resp.interaction_handle;\n\n  const newMeta = {\n    ...meta,\n    interactionHandle,\n    \n    // Options which can be passed into interact() should be saved in the meta\n    withCredentials,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken\n  };\n  // Save transaction meta so it can be resumed\n  saveTransactionMeta(authClient, newMeta);\n\n  return getResponse(newMeta);\n}\n"]},"metadata":{},"sourceType":"module"}