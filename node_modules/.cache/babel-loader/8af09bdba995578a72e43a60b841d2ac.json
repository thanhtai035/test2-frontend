{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { Remediator } from './Remediator.js';\nimport { getAuthenticator } from '../../authenticator/getAuthenticator.js';\n\nclass VerifyAuthenticator extends Remediator {\n  constructor(remediation) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(remediation, values);\n    this.authenticator = getAuthenticator(remediation);\n  }\n\n  getNextStep(authClient, context) {\n    var _a;\n\n    const nextStep = super.getNextStep(authClient, context);\n    const authenticatorEnrollments = (_a = context === null || context === void 0 ? void 0 : context.authenticatorEnrollments) === null || _a === void 0 ? void 0 : _a.value;\n    return Object.assign(Object.assign({}, nextStep), {\n      authenticatorEnrollments\n    });\n  }\n\n  canRemediate() {\n    return this.authenticator.canVerify(this.values);\n  }\n\n  mapCredentials() {\n    return this.authenticator.mapCredentials(this.values);\n  }\n\n  getInputCredentials(input) {\n    return this.authenticator.getInputs(input);\n  }\n\n  getValuesAfterProceed() {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'credentials');\n    return trimmedValues.reduce((values, valueKey) => Object.assign(Object.assign({}, values), {\n      [valueKey]: this.values[valueKey]\n    }), {});\n  }\n\n}\n\nexport { VerifyAuthenticator };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAsBM,MAAOA,mBAAP,SACIC,UADJ,CACiB;EAIrBC,WAAY,cAAgD;IAAA,IAAnBC,MAAmB,uEAAP,EAAO;IAC1D,MAAMC,WAAN,EAAmBD,MAAnB;IACA,KAAKE,aAAL,GAAqBC,gBAAgB,CAACF,WAAD,CAArC;EACD;;EAEDG,WAAW,CAACC,UAAD,EAAmCC,OAAnC,EAAuD;;;IAChE,MAAMC,QAAQ,GAAG,MAAMH,WAAN,CAAkBC,UAAlB,EAA8BC,OAA9B,CAAjB;IACA,MAAME,wBAAwB,GAAG,aAAO,KAAP,eAAO,KAAP,yBAAO,CAAEA,wBAAT,MAAmC,IAAnC,IAAmCC,aAAnC,GAAmC,MAAnC,GAAmCA,QAApE;IAEA,OACKC,2CACH;MAAAF;IAAA,CADG,CADL;EAID;;EAEDG,YAAY;IACV,OAAO,KAAKT,aAAL,CAAmBU,SAAnB,CAA6B,KAAKZ,MAAlC,CAAP;EACD;;EAEDa,cAAc;IACZ,OAAO,KAAKX,aAAL,CAAmBW,cAAnB,CAAkC,KAAKb,MAAvC,CAAP;EACD;;EAEDc,mBAAmB,CAACC,KAAD,EAAM;IACvB,OAAO,KAAKb,aAAL,CAAmBc,SAAnB,CAA6BD,KAA7B,CAAP;EACD;;EAEDE,qBAAqB;IACnB,KAAKjB,MAAL,GAAc,MAAMiB,qBAAN,EAAd;IACA,IAAIC,aAAa,GAAGR,MAAM,CAACS,IAAP,CAAY,KAAKnB,MAAjB,EAAyBoB,MAAzB,CAAgCC,QAAQ,IAAIA,QAAQ,KAAK,aAAzD,CAApB;IACA,OAAOH,aAAa,CAACI,MAAd,CAAqB,CAACtB,MAAD,EAASqB,QAAT,KAAsBX,gCAAKV,MAAL,GAAW;MAAE,CAACqB,QAAD,GAAY,KAAKrB,MAAL,CAAYqB,QAAZ;IAAd,CAAX,CAA3C,EAA6F,EAA7F,CAAP;EACD;;AAnCoB","names":["VerifyAuthenticator","Remediator","constructor","values","remediation","authenticator","getAuthenticator","getNextStep","authClient","context","nextStep","authenticatorEnrollments","_a","Object","canRemediate","canVerify","mapCredentials","getInputCredentials","input","getInputs","getValuesAfterProceed","trimmedValues","keys","filter","valueKey","reduce"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\remediators\\Base\\VerifyAuthenticator.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { getAuthenticator, Authenticator, AuthenticatorValues } from '../../authenticator';\nimport { IdxRemediation, IdxContext } from '../../types/idx-js';\nimport { NextStep } from '../../types';\nimport { OktaAuthIdxInterface } from '../../../types';\n\nexport type VerifyAuthenticatorValues = AuthenticatorValues & RemediationValues;\n\n// Base class - DO NOT expose static remediationName\nexport class VerifyAuthenticator<T extends VerifyAuthenticatorValues = VerifyAuthenticatorValues>\n  extends Remediator<T> {\n\n  authenticator: Authenticator<VerifyAuthenticatorValues>;\n\n  constructor(remediation: IdxRemediation, values: T = {} as T) {\n    super(remediation, values);\n    this.authenticator = getAuthenticator(remediation);\n  }\n\n  getNextStep(authClient: OktaAuthIdxInterface, context?: IdxContext): NextStep {\n    const nextStep = super.getNextStep(authClient, context);\n    const authenticatorEnrollments = context?.authenticatorEnrollments?.value;\n\n    return {\n      ...nextStep,\n      authenticatorEnrollments\n    };\n  }\n\n  canRemediate() {\n    return this.authenticator.canVerify(this.values);\n  }\n\n  mapCredentials() {\n    return this.authenticator.mapCredentials(this.values);\n  }\n\n  getInputCredentials(input) {\n    return this.authenticator.getInputs(input);\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    let trimmedValues = Object.keys(this.values).filter(valueKey => valueKey !== 'credentials');\n    return trimmedValues.reduce((values, valueKey) => ({...values, [valueKey]: this.values[valueKey]}), {} as T);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}