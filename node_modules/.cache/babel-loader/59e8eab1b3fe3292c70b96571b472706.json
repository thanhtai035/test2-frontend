{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { run } from './run.js';\nimport { hasSavedInteractionHandle } from './transactionMeta.js';\nimport { startTransaction } from './startTransaction.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { IdxFeature } from './types/api.js';\nimport '../myaccount/types.js';\n\nfunction unlockAccount(_x) {\n  return _unlockAccount.apply(this, arguments);\n}\n\nfunction _unlockAccount() {\n  _unlockAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n        _yield$startTransacti,\n        enabledFeatures,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            options.flow = 'unlockAccount';\n\n            if (hasSavedInteractionHandle(authClient)) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 5;\n            return startTransaction(authClient, Object.assign(Object.assign({}, options), {\n              autoRemediate: false\n            }));\n\n          case 5:\n            _yield$startTransacti = _context.sent;\n            enabledFeatures = _yield$startTransacti.enabledFeatures;\n\n            if (!(enabledFeatures && !enabledFeatures.includes(IdxFeature.ACCOUNT_UNLOCK))) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new AuthSdkError('Self Service Account Unlock is not supported based on your current org configuration.');\n\n          case 9:\n            return _context.abrupt(\"return\", run(authClient, Object.assign({}, options)));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _unlockAccount.apply(this, arguments);\n}\n\nexport { unlockAccount };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;SAwBsBA,a;;;;;8EAAf,iBACLC,UADK;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAC6BC,OAD7B,2DAC6D,EAD7D;YAGLA,OAAO,CAACC,IAAR,GAAe,eAAf;;YAHK,IAMAC,yBAAyB,CAACH,UAAD,CANzB;cAAA;cAAA;YAAA;;YAAA;YAAA,OAO+BI,gBAAgB,CAACJ,UAAD,EAAWK,gCAAOJ,OAAP,GAAgB;cAAAK,aAAa,EAAE;YAAf,CAAhB,CAAX,CAP/C;;UAAA;YAAA;YAOKC,eAPL,yBAOKA,eAPL;;YAAA,MAQCA,eAAe,IAAI,CAACA,eAAe,CAACC,QAAhB,CAAyBC,UAAU,CAACC,cAApC,CARrB;cAAA;cAAA;YAAA;;YAAA,MASK,IAAIC,YAAJ,CACJ,uFADI,CATL;;UAAA;YAAA,iCAeEC,GAAG,CAACZ,UAAD,EAAkBK,0BAAlB,CAfL;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["unlockAccount","authClient","options","flow","hasSavedInteractionHandle","startTransaction","Object","autoRemediate","enabledFeatures","includes","IdxFeature","ACCOUNT_UNLOCK","AuthSdkError","run"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\unlockAccount.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { run } from './run';\nimport { hasSavedInteractionHandle } from './transactionMeta';\nimport { startTransaction } from './startTransaction';\nimport { AuthSdkError } from '../errors';\nimport { \n  OktaAuthIdxInterface, \n  AccountUnlockOptions, \n  IdxTransaction,\n  IdxFeature,\n} from '../types';\n\nexport async function unlockAccount(\n  authClient: OktaAuthIdxInterface, options: AccountUnlockOptions = {}\n): Promise<IdxTransaction> {\n  options.flow = 'unlockAccount';\n\n  // Only check at the beginning of the transaction\n  if (!hasSavedInteractionHandle(authClient)) {\n    const { enabledFeatures } = await startTransaction(authClient, { ...options, autoRemediate: false });\n    if (enabledFeatures && !enabledFeatures.includes(IdxFeature.ACCOUNT_UNLOCK)) {\n      throw new AuthSdkError(\n        'Self Service Account Unlock is not supported based on your current org configuration.'\n      );\n    }\n  }\n\n  return run(authClient, { ...options });\n}\n"]},"metadata":{},"sourceType":"module"}