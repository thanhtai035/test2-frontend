{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { TRANSACTION_STORAGE_NAME, SHARED_TRANSACTION_STORAGE_NAME, ORIGINAL_URI_STORAGE_NAME, IDX_RESPONSE_STORAGE_NAME, TOKEN_STORAGE_NAME, CACHE_STORAGE_NAME, PKCE_STORAGE_NAME, REDIRECT_OAUTH_PARAMS_NAME } from './constants.js';\nimport SavedObject from './SavedObject.js';\nimport { isBrowser } from './features.js';\nimport { warn } from './util/console.js';\nimport AuthSdkError from './errors/AuthSdkError.js';\n\nfunction logServerSideMemoryStorageWarning(options) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\nclass StorageManager {\n  constructor(storageManagerOptions, cookieOptions, storageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  getOptionsForSection(sectionName, overrideOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n\n  getStorage(options) {\n    options = Object.assign({}, this.cookieOptions, options);\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let {\n      storageType,\n      storageTypes\n    } = options;\n\n    if (storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = undefined;\n      }\n    }\n\n    if (!storageType) {\n      storageType = this.storageUtil.findStorageType(storageTypes);\n    }\n\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  getTransactionStorage(options) {\n    options = this.getOptionsForSection('transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getSharedTansactionStorage(options) {\n    options = this.getOptionsForSection('shared-transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getOriginalUriStorage(options) {\n    options = this.getOptionsForSection('original-uri', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getIdxResponseStorage(options) {\n    let storage;\n\n    if (isBrowser()) {\n      try {\n        storage = this.storageUtil.getStorageByType('memory', options);\n      } catch (e) {\n        warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n      }\n    } else {\n      const transactionStorage = this.getTransactionStorage(options);\n\n      if (transactionStorage) {\n        storage = {\n          getItem: key => {\n            const transaction = transactionStorage.getStorage();\n\n            if (transaction && transaction[key]) {\n              return transaction[key];\n            }\n\n            return null;\n          },\n          setItem: (key, val) => {\n            const transaction = transactionStorage.getStorage();\n\n            if (!transaction) {\n              throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n            }\n\n            transaction[key] = val;\n            transactionStorage.setStorage(transaction);\n          },\n          removeItem: key => {\n            const transaction = transactionStorage.getStorage();\n\n            if (!transaction) {\n              return;\n            }\n\n            delete transaction[key];\n            transactionStorage.setStorage(transaction);\n          }\n        };\n      }\n    }\n\n    if (!storage) {\n      return null;\n    }\n\n    return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n  }\n\n  getTokenStorage(options) {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getHttpCache(options) {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyPKCEStorage(options) {\n    options = this.getOptionsForSection('legacy-pkce', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyOAuthParamsStorage(options) {\n    options = this.getOptionsForSection('legacy-oauth-params', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n}\n\nexport { StorageManager };","map":{"version":3,"mappings":"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","names":["logServerSideMemoryStorageWarning","options","isBrowser","storageProvider","warn","StorageManager","constructor","storageManagerOptions","cookieOptions","storageUtil","getOptionsForSection","sectionName","overrideOptions","Object","assign","getStorage","storageType","storageTypes","sessionCookie","idx","indexOf","slice","undefined","findStorageType","getStorageByType","getTransactionStorage","storage","storageKey","TRANSACTION_STORAGE_NAME","SavedObject","getSharedTansactionStorage","SHARED_TRANSACTION_STORAGE_NAME","getOriginalUriStorage","ORIGINAL_URI_STORAGE_NAME","getIdxResponseStorage","e","transactionStorage","getItem","key","transaction","setItem","val","AuthSdkError","setStorage","removeItem","IDX_RESPONSE_STORAGE_NAME","getTokenStorage","TOKEN_STORAGE_NAME","getHttpCache","CACHE_STORAGE_NAME","getLegacyPKCEStorage","PKCE_STORAGE_NAME","getLegacyOAuthParamsStorage","REDIRECT_OAUTH_PARAMS_NAME"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\StorageManager.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n\nimport {\n  PKCE_STORAGE_NAME,\n  TOKEN_STORAGE_NAME,\n  TRANSACTION_STORAGE_NAME,\n  SHARED_TRANSACTION_STORAGE_NAME,\n  ORIGINAL_URI_STORAGE_NAME,\n  IDX_RESPONSE_STORAGE_NAME,\n  CACHE_STORAGE_NAME,\n  REDIRECT_OAUTH_PARAMS_NAME\n} from './constants';\nimport {\n  StorageUtil,\n  StorageProvider,\n  StorageOptions,\n  PKCEStorage,\n  CookieOptions,\n  TransactionStorage,\n  IdxResponseStorage,\n  StorageManagerOptions,\n  SimpleStorage\n} from './types';\nimport SavedObject from './SavedObject';\nimport { isBrowser } from './features';\nimport { warn } from './util';\nimport { AuthSdkError } from './errors';\n\nfunction logServerSideMemoryStorageWarning(options: StorageOptions) {\n  if (!isBrowser() && !options.storageProvider && !options.storageProvider) {\n    // eslint-disable-next-line max-len\n    warn('Memory storage can only support simple single user use case on server side, please provide custom storageProvider or storageKey if advanced scenarios need to be supported.');\n  }\n}\n\nexport class StorageManager {\n  storageManagerOptions: StorageManagerOptions;\n  cookieOptions: CookieOptions;\n  storageUtil: StorageUtil;\n\n  constructor(storageManagerOptions: StorageManagerOptions, cookieOptions: CookieOptions, storageUtil: StorageUtil) {\n    this.storageManagerOptions = storageManagerOptions;\n    this.cookieOptions = cookieOptions;\n    this.storageUtil = storageUtil;\n  }\n\n  // combines defaults in order\n  getOptionsForSection(sectionName: string, overrideOptions?: StorageOptions) {\n    return Object.assign({}, this.storageManagerOptions[sectionName], overrideOptions);\n  }\n \n  // generic method to get any available storage provider\n  // eslint-disable-next-line complexity\n  getStorage(options: StorageOptions): SimpleStorage {\n    options = Object.assign({}, this.cookieOptions, options); // set defaults\n\n    if (options.storageProvider) {\n      return options.storageProvider;\n    }\n\n    let { storageType, storageTypes } = options;\n\n    if(storageType === 'sessionStorage') {\n      options.sessionCookie = true;\n    }\n\n    // Maintain compatibility. Automatically fallback. May change in next major version. OKTA-362589\n    if (storageType && storageTypes) {\n      const idx = storageTypes.indexOf(storageType);\n      if (idx >= 0) {\n        storageTypes = storageTypes.slice(idx);\n        storageType = undefined;\n      }\n    }\n\n    if (!storageType) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      storageType = this.storageUtil.findStorageType(storageTypes!);\n    }\n    return this.storageUtil.getStorageByType(storageType, options);\n  }\n\n  // stateToken, interactionHandle\n  getTransactionStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getSharedTansactionStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('shared-transaction', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || SHARED_TRANSACTION_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getOriginalUriStorage(options?: StorageOptions): TransactionStorage {\n    options = this.getOptionsForSection('original-uri', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || ORIGINAL_URI_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // intermediate idxResponse\n  // store for network traffic optimazation purpose\n  // TODO: revisit in auth-js 6.0 epic JIRA: OKTA-399791\n  getIdxResponseStorage(options?: StorageOptions): IdxResponseStorage | null {\n    let storage;\n    if (isBrowser()) {\n      // on browser side only use memory storage \n      try {\n        storage = this.storageUtil.getStorageByType('memory', options);\n      } catch (e) {\n        // it's ok to miss response storage\n        // eslint-disable-next-line max-len\n        warn('No response storage found, you may want to provide custom implementation for intermediate idx responses to optimize the network traffic');\n      }\n    } else {\n      // on server side re-use transaction custom storage\n      const transactionStorage = this.getTransactionStorage(options);\n      if (transactionStorage) {\n        storage = {\n          getItem: (key) => {\n            const transaction = transactionStorage.getStorage();\n            if (transaction && transaction[key]) {\n              return transaction[key];\n            }\n            return null;\n          },\n          setItem: (key, val) => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              throw new AuthSdkError('Transaction has been cleared, failed to save idxState');\n            }\n            transaction[key] = val;\n            transactionStorage.setStorage(transaction);\n          },\n          removeItem: (key) => {\n            const transaction = transactionStorage.getStorage();\n            if (!transaction) {\n              return;\n            }\n            delete transaction[key];\n            transactionStorage.setStorage(transaction);\n          }\n        };\n      }\n    }\n\n    if (!storage) {\n      return null;\n    }\n\n    return new SavedObject(storage, IDX_RESPONSE_STORAGE_NAME);\n  }\n\n  // access_token, id_token, refresh_token\n  getTokenStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('token', options);\n    logServerSideMemoryStorageWarning(options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || TOKEN_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // caches well-known response, among others\n  getHttpCache(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('cache', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || CACHE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  // Will be removed in an upcoming major version. OKTA-362589\n  getLegacyPKCEStorage(options?: StorageOptions): PKCEStorage {\n    options = this.getOptionsForSection('legacy-pkce', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || PKCE_STORAGE_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n\n  getLegacyOAuthParamsStorage(options?: StorageOptions): StorageProvider {\n    options = this.getOptionsForSection('legacy-oauth-params', options);\n    const storage = this.getStorage(options);\n    const storageKey = options.storageKey || REDIRECT_OAUTH_PARAMS_NAME;\n    return new SavedObject(storage, storageKey);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}