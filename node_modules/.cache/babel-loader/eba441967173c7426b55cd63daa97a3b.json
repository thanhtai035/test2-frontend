{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getSavedTransactionMeta, createTransactionMeta, saveTransactionMeta } from './transactionMeta.js';\nimport { removeNils } from '../util/object.js';\nimport { httpRequest } from '../http/request.js';\nimport { getOAuthBaseUrl } from '../oidc/util/oauth.js';\nimport './types/api.js';\nimport '../myaccount/types.js';\n\nfunction getResponse(meta) {\n  return {\n    meta: meta,\n    interactionHandle: meta.interactionHandle,\n    state: meta.state\n  };\n}\n\nfunction interact(_x) {\n  return _interact.apply(this, arguments);\n}\n\nfunction _interact() {\n  _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient) {\n    var options,\n        meta,\n        baseUrl,\n        _meta,\n        clientId,\n        redirectUri,\n        state,\n        scopes,\n        withCredentials,\n        codeChallenge,\n        codeChallengeMethod,\n        activationToken,\n        recoveryToken,\n        maxAge,\n        clientSecret,\n        url,\n        params,\n        headers,\n        resp,\n        interactionHandle,\n        newMeta,\n        _args = arguments;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            options = removeNils(options);\n            meta = getSavedTransactionMeta(authClient, options);\n\n            if (!(meta === null || meta === void 0 ? void 0 : meta.interactionHandle)) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", getResponse(meta));\n\n          case 5:\n            _context.next = 7;\n            return createTransactionMeta(authClient, Object.assign(Object.assign({}, meta), options));\n\n          case 7:\n            meta = _context.sent;\n            baseUrl = getOAuthBaseUrl(authClient);\n            _meta = meta, clientId = _meta.clientId, redirectUri = _meta.redirectUri, state = _meta.state, scopes = _meta.scopes, withCredentials = _meta.withCredentials, codeChallenge = _meta.codeChallenge, codeChallengeMethod = _meta.codeChallengeMethod, activationToken = _meta.activationToken, recoveryToken = _meta.recoveryToken, maxAge = _meta.maxAge;\n            clientSecret = options.clientSecret || authClient.options.clientSecret;\n            withCredentials = withCredentials !== null && withCredentials !== void 0 ? withCredentials : true;\n            url = \"\".concat(baseUrl, \"/v1/interact\");\n            params = Object.assign(Object.assign(Object.assign(Object.assign({\n              client_id: clientId,\n              scope: scopes.join(' '),\n              redirect_uri: redirectUri,\n              code_challenge: codeChallenge,\n              code_challenge_method: codeChallengeMethod,\n              state: state\n            }, activationToken && {\n              activation_token: activationToken\n            }), recoveryToken && {\n              recovery_token: recoveryToken\n            }), clientSecret && {\n              client_secret: clientSecret\n            }), maxAge && {\n              max_age: maxAge\n            });\n            headers = {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            };\n            _context.next = 17;\n            return httpRequest(authClient, {\n              method: 'POST',\n              url: url,\n              headers: headers,\n              withCredentials: withCredentials,\n              args: params\n            });\n\n          case 17:\n            resp = _context.sent;\n            interactionHandle = resp.interaction_handle;\n            newMeta = Object.assign(Object.assign({}, meta), {\n              interactionHandle: interactionHandle,\n              withCredentials: withCredentials,\n              state: state,\n              scopes: scopes,\n              recoveryToken: recoveryToken,\n              activationToken: activationToken\n            });\n            saveTransactionMeta(authClient, newMeta);\n            return _context.abrupt(\"return\", getResponse(newMeta));\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _interact.apply(this, arguments);\n}\n\nexport { interact };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAmCA,SAASA,WAAT,CAAqBC,IAArB,EAA6C;EAC3C,OAAO;IACLA,IAAI,EAAJA,IADK;IAELC,iBAAiB,EAAED,IAAI,CAACC,iBAFnB;IAGLC,KAAK,EAAEF,IAAI,CAACE;EAHP,CAAP;AAKD;;SAGqBC,Q;;;;;yEAAf,iBACLC,UADK;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAELC,OAFK,2DAEsB,EAFtB;YAILA,OAAO,GAAGC,UAAU,CAACD,OAAD,CAApB;YAEIL,IANC,GAMMO,uBAAuB,CAACH,UAAD,EAAaC,OAAb,CAN7B;;YAAA,MASDL,IAAI,KAAJ,YAAI,WAAJ,GAAI,MAAJ,OAAI,CAAEC,iBATL;cAAA;cAAA;YAAA;;YAAA,iCAUIF,WAAW,CAACC,IAAD,CAVf;;UAAA;YAAA;YAAA,OAcQQ,qBAAqB,CAACJ,UAAD,EAAWK,gCAAOT,IAAP,GAAgBK,OAAhB,CAAX,CAd7B;;UAAA;YAcLL,IAdK;YAeCU,OAfD,GAeWC,eAAe,CAACP,UAAD,CAf1B;YAAA,QA2BDJ,IA3BC,EAiBHY,QAjBG,SAiBHA,QAjBG,EAkBHC,WAlBG,SAkBHA,WAlBG,EAmBHX,KAnBG,SAmBHA,KAnBG,EAoBHY,MApBG,SAoBHA,MApBG,EAqBHC,eArBG,SAqBHA,eArBG,EAsBHC,aAtBG,SAsBHA,aAtBG,EAuBHC,mBAvBG,SAuBHA,mBAvBG,EAwBHC,eAxBG,SAwBHA,eAxBG,EAyBHC,aAzBG,SAyBHA,aAzBG,EA0BHC,MA1BG,SA0BHA,MA1BG;YA4BCC,YA5BD,GA4BgBhB,OAAO,CAACgB,YAAR,IAAwBjB,UAAU,CAACC,OAAX,CAAmBgB,YA5B3D;YA6BLN,eAAe,GAAGA,eAAe,KAAf,uBAAe,WAAf,qBAAmB,IAArC;YAGMO,GAhCD,aAgCUZ,OAhCV;YAiCCa,MAjCD,GAiCUd,MACb,OADa,CACbA;cAAAe,SAAS,EAAEZ,QAAX;cACAa,KAAK,EAAEX,MAAO,CAACY,IAAR,CAAa,GAAb,CADP;cAEAC,YAAY,EAAEd,WAFd;cAGAe,cAAc,EAAEZ,aAHhB;cAIAa,qBAAqB,EAAEZ,mBAJvB;cAKAf,KAAK,EAALA;YALA,GAMIgB,eAAe,IAAI;cAAEY,gBAAgB,EAAEZ;YAApB,CANvB,GAOIC,aAAa,IAAI;cAAEY,cAAc,EAAEZ;YAAlB,CAPrB,GAWIE,YAAY,IAAI;cAAEW,aAAa,EAAEX;YAAjB,CAXpB,CADa,EAaTD,MAAM,IAAI;cAAEa,OAAO,EAAEb;YAAX,CAbD,CAjCV;YAkDCc,OAlDD,GAkDW;cACd,gBAAgB;YADF,CAlDX;YAAA;YAAA,OAsDcC,WAAW,CAAC/B,UAAD,EAAa;cACzCgC,MAAM,EAAE,MADiC;cAEzCd,GAAG,EAAHA,GAFyC;cAGzCY,OAAO,EAAPA,OAHyC;cAIzCnB,eAAe,EAAfA,eAJyC;cAKzCsB,IAAI,EAAEd;YALmC,CAAb,CAtDzB;;UAAA;YAsDCe,IAtDD;YA6DCrC,iBA7DD,GA6DqBqC,IAAI,CAACC,kBA7D1B;YA+DCC,OA/DD,GA+DQ/B,gCACRT,IADQ,GACJ;cACPC,iBAAiB,EAAjBA,iBADO;cAIPc,eAAe,EAAfA,eAJO;cAKPb,KAAK,EAALA,KALO;cAMPY,MAAM,EAANA,MANO;cAOPK,aAAa,EAAbA,aAPO;cAQPD,eAAe,EAAfA;YARO,CADI,CA/DR;YA2ELuB,mBAAmB,CAACrC,UAAD,EAAaoC,OAAb,CAAnB;YA3EK,iCA6EEzC,WAAW,CAACyC,OAAD,CA7Eb;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["getResponse","meta","interactionHandle","state","interact","authClient","options","removeNils","getSavedTransactionMeta","createTransactionMeta","Object","baseUrl","getOAuthBaseUrl","clientId","redirectUri","scopes","withCredentials","codeChallenge","codeChallengeMethod","activationToken","recoveryToken","maxAge","clientSecret","url","params","client_id","scope","join","redirect_uri","code_challenge","code_challenge_method","activation_token","recovery_token","client_secret","max_age","headers","httpRequest","method","args","resp","interaction_handle","newMeta","saveTransactionMeta"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\interact.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n/* eslint complexity:[0,8] */\nimport { OktaAuthIdxInterface, IdxTransactionMeta, InteractOptions, InteractResponse } from '../types';\nimport { getSavedTransactionMeta, saveTransactionMeta, createTransactionMeta } from './transactionMeta';\nimport { getOAuthBaseUrl } from '../oidc';\nimport { removeNils } from '../util';\nimport { httpRequest } from '../http';\n\n\n/* eslint-disable camelcase */\nexport interface InteractParams {\n  client_id: string;\n  scope: string;\n  redirect_uri: string;\n  code_challenge: string;\n  code_challenge_method: string;\n  state: string;\n  activation_token?: string;\n  recovery_token?: string;\n  client_secret?: string;\n  max_age?: string | number;\n}\n/* eslint-enable camelcase */\n\nfunction getResponse(meta: IdxTransactionMeta): InteractResponse {\n  return {\n    meta,\n    interactionHandle: meta.interactionHandle!,\n    state: meta.state\n  };\n}\n\n// Begin or resume a transaction. Returns an interaction handle\nexport async function interact (\n  authClient: OktaAuthIdxInterface, \n  options: InteractOptions = {}\n): Promise<InteractResponse> {\n  options = removeNils(options);\n\n  let meta = getSavedTransactionMeta(authClient, options);\n  // If meta exists, it has been validated against all options\n\n  if (meta?.interactionHandle) {\n    return getResponse(meta); // Saved transaction, return meta\n  }\n\n  // Create new meta, respecting previous meta if it has been set and is not overridden\n  meta = await createTransactionMeta(authClient, { ...meta, ...options });\n  const baseUrl = getOAuthBaseUrl(authClient);\n  let {\n    clientId,\n    redirectUri,\n    state,\n    scopes,\n    withCredentials,\n    codeChallenge,\n    codeChallengeMethod,\n    activationToken,\n    recoveryToken,\n    maxAge\n  } = meta as IdxTransactionMeta;\n  const clientSecret = options.clientSecret || authClient.options.clientSecret;\n  withCredentials = withCredentials ?? true;\n\n  /* eslint-disable camelcase */\n  const url = `${baseUrl}/v1/interact`;\n  const params = {\n    client_id: clientId,\n    scope: scopes!.join(' '),\n    redirect_uri: redirectUri,\n    code_challenge: codeChallenge,\n    code_challenge_method: codeChallengeMethod,\n    state,\n    ...(activationToken && { activation_token: activationToken }),\n    ...(recoveryToken && { recovery_token: recoveryToken }),\n    // X-Device-Token header need to pair with `client_secret`\n    // eslint-disable-next-line max-len\n    // https://oktawiki.atlassian.net/wiki/spaces/eng/pages/2445902453/Support+Device+Binding+in+interact#Scenario-1%3A-Non-User-Agent-with-Confidential-Client-(top-priority)\n    ...(clientSecret && { client_secret: clientSecret }),\n    ...(maxAge && { max_age: maxAge })\n  } as InteractParams;\n  /* eslint-enable camelcase */\n\n  const headers = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n  };\n\n  const resp = await httpRequest(authClient, {\n    method: 'POST',\n    url,\n    headers,\n    withCredentials,\n    args: params\n  });\n  const interactionHandle = resp.interaction_handle;\n\n  const newMeta = {\n    ...meta,\n    interactionHandle,\n    \n    // Options which can be passed into interact() should be saved in the meta\n    withCredentials,\n    state,\n    scopes,\n    recoveryToken,\n    activationToken\n  };\n  // Save transaction meta so it can be resumed\n  saveTransactionMeta(authClient, newMeta);\n\n  return getResponse(newMeta);\n}\n"]},"metadata":{},"sourceType":"module"}