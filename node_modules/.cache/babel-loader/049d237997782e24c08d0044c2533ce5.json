{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from './_virtual/_tslib.js';\nimport * as constants from './constants.js';\nimport { DEFAULT_MAX_CLOCK_SKEW, REFERRER_PATH_STORAGE_KEY } from './constants.js';\nimport { transactionStatus, resumeTransaction, transactionExists, introspectAuthn, postToTransaction } from './tx/api.js';\nimport { AuthTransaction } from './tx/AuthTransaction.js';\nimport { setRequestHeader } from './http/headers.js';\nimport { get, httpRequest } from './http/request.js';\nimport { clone } from './util/object.js';\nimport { toAbsoluteUrl, toQueryString } from './util/url.js';\nimport PKCE from './oidc/util/pkce.js';\nimport { closeSession, sessionExists, getSession, refreshSession, setCookieAndRedirect } from './session.js';\nimport { getOAuthUrls } from './oidc/util/oauth.js';\nimport * as features from './features.js';\nimport { isBrowser } from './features.js';\nimport { isInteractionRequiredError } from './oidc/util/errors.js';\nimport { isLoginRedirect, isInteractionRequired } from './oidc/util/loginRedirect.js';\nimport { prepareTokenParams } from './oidc/util/prepareTokenParams.js';\nimport './idx/types/api.js';\nimport './myaccount/types.js';\nimport { decodeToken } from './oidc/decodeToken.js';\nimport { revokeToken } from './oidc/revokeToken.js';\nimport { renewToken } from './oidc/renewToken.js';\nimport { renewTokensWithRefresh } from './oidc/renewTokensWithRefresh.js';\nimport { renewTokens } from './oidc/renewTokens.js';\nimport { verifyToken } from './oidc/verifyToken.js';\nimport { getUserInfo } from './oidc/getUserInfo.js';\nimport { exchangeCodeForTokens } from './oidc/exchangeCodeForTokens.js';\nimport { getWithoutPrompt } from './oidc/getWithoutPrompt.js';\nimport { getWithPopup } from './oidc/getWithPopup.js';\nimport { getWithRedirect } from './oidc/getWithRedirect.js';\nimport { parseFromUrl, parseOAuthResponseFromUrl } from './oidc/parseFromUrl.js';\nimport * as index from './crypto/index.js';\nimport * as webauthn from './crypto/webauthn.js';\nimport storageUtil from './browser/browserStorage.js';\nimport { TokenManager } from './TokenManager.js';\nimport { ServiceManager } from './ServiceManager.js';\nimport PromiseQueue from './PromiseQueue.js';\nimport fingerprint from './browser/fingerprint.js';\nimport { AuthStateManager } from './AuthStateManager.js';\nimport { StorageManager } from './StorageManager.js';\nimport TransactionManager from './TransactionManager.js';\nimport { buildOptions } from './options/index.js';\nimport { authenticate } from './idx/authenticate.js';\nimport { cancel } from './idx/cancel.js';\nimport { handleEmailVerifyCallback, isEmailVerifyCallback, parseEmailVerifyCallback, isEmailVerifyCallbackError } from './idx/emailVerify.js';\nimport { interact } from './idx/interact.js';\nimport { introspect } from './idx/introspect.js';\nimport { poll } from './idx/poll.js';\nimport { proceed, canProceed } from './idx/proceed.js';\nimport { register } from './idx/register.js';\nimport { recoverPassword } from './idx/recoverPassword.js';\nimport { handleInteractionCodeRedirect } from './idx/handleInteractionCodeRedirect.js';\nimport { startTransaction } from './idx/startTransaction.js';\nimport { unlockAccount } from './idx/unlockAccount.js';\nimport { getSavedTransactionMeta, createTransactionMeta, getTransactionMeta, saveTransactionMeta, clearTransactionMeta, isTransactionMetaValid } from './idx/transactionMeta.js';\nimport { OktaUserAgent } from './OktaUserAgent.js';\nimport Emitter from 'tiny-emitter';\nimport { makeIdxState } from './idx/idxState/index.js';\n\nclass OktaAuth {\n  constructor(args) {\n    this.features = features;\n    const options = this.options = buildOptions(args);\n    this.storageManager = new StorageManager(options.storageManager, options.cookies, options.storageUtil);\n    this.transactionManager = new TransactionManager(Object.assign({\n      storageManager: this.storageManager\n    }, options.transactionManager));\n    this._oktaUserAgent = new OktaUserAgent();\n    this.tx = {\n      status: transactionStatus.bind(null, this),\n      resume: resumeTransaction.bind(null, this),\n      exists: Object.assign(transactionExists.bind(null, this), {\n        _get: name => {\n          const storage = options.storageUtil.storage;\n          return storage.get(name);\n        }\n      }),\n      introspect: introspectAuthn.bind(null, this),\n      createTransaction: res => {\n        return new AuthTransaction(this, res);\n      },\n      postToTransaction: (url, args, options) => {\n        return postToTransaction(this, url, args, options);\n      }\n    };\n    this.pkce = {\n      DEFAULT_CODE_CHALLENGE_METHOD: PKCE.DEFAULT_CODE_CHALLENGE_METHOD,\n      generateVerifier: PKCE.generateVerifier,\n      computeChallenge: PKCE.computeChallenge\n    };\n    Object.assign(this.options.storageUtil || {}, {\n      getPKCEStorage: this.storageManager.getLegacyPKCEStorage.bind(this.storageManager),\n      getHttpCache: this.storageManager.getHttpCache.bind(this.storageManager)\n    });\n    this._pending = {\n      handleLogin: false\n    };\n\n    if (isBrowser()) {\n      this.options = Object.assign(this.options, {\n        redirectUri: toAbsoluteUrl(args.redirectUri, window.location.origin)\n      });\n    }\n\n    if (!args.maxClockSkew && args.maxClockSkew !== 0) {\n      this.options.maxClockSkew = DEFAULT_MAX_CLOCK_SKEW;\n    } else {\n      this.options.maxClockSkew = args.maxClockSkew;\n    }\n\n    this.options.ignoreLifetime = !!args.ignoreLifetime;\n    this.session = {\n      close: closeSession.bind(null, this),\n      exists: sessionExists.bind(null, this),\n      get: getSession.bind(null, this),\n      refresh: refreshSession.bind(null, this),\n      setCookieAndRedirect: setCookieAndRedirect.bind(null, this)\n    };\n    this._tokenQueue = new PromiseQueue();\n\n    const useQueue = method => {\n      return PromiseQueue.prototype.push.bind(this._tokenQueue, method, null);\n    };\n\n    const getWithRedirectFn = useQueue(getWithRedirect.bind(null, this));\n    const getWithRedirectApi = Object.assign(getWithRedirectFn, {\n      _setLocation: function (url) {\n        if (options.setLocation) {\n          options.setLocation(url);\n        } else {\n          window.location = url;\n        }\n      }\n    });\n    const parseFromUrlFn = useQueue(parseFromUrl.bind(null, this));\n    const parseFromUrlApi = Object.assign(parseFromUrlFn, {\n      _getHistory: function () {\n        return window.history;\n      },\n      _getLocation: function () {\n        return window.location;\n      },\n      _getDocument: function () {\n        return window.document;\n      }\n    });\n    this.token = {\n      prepareTokenParams: prepareTokenParams.bind(null, this),\n      exchangeCodeForTokens: exchangeCodeForTokens.bind(null, this),\n      getWithoutPrompt: getWithoutPrompt.bind(null, this),\n      getWithPopup: getWithPopup.bind(null, this),\n      getWithRedirect: getWithRedirectApi,\n      parseFromUrl: parseFromUrlApi,\n      decode: decodeToken,\n      revoke: revokeToken.bind(null, this),\n      renew: renewToken.bind(null, this),\n      renewTokensWithRefresh: renewTokensWithRefresh.bind(null, this),\n      renewTokens: renewTokens.bind(null, this),\n      getUserInfo: (accessTokenObject, idTokenObject) => {\n        return getUserInfo(this, accessTokenObject, idTokenObject);\n      },\n      verify: verifyToken.bind(null, this),\n      isLoginRedirect: isLoginRedirect.bind(null, this)\n    };\n    const toWrap = ['getWithoutPrompt', 'getWithPopup', 'revoke', 'renew', 'renewTokensWithRefresh', 'renewTokens'];\n    toWrap.forEach(key => {\n      this.token[key] = useQueue(this.token[key]);\n    });\n    const boundStartTransaction = startTransaction.bind(null, this);\n    this.idx = {\n      interact: interact.bind(null, this),\n      introspect: introspect.bind(null, this),\n      makeIdxResponse: makeIdxState.bind(null, this),\n      authenticate: authenticate.bind(null, this),\n      register: register.bind(null, this),\n      start: boundStartTransaction,\n      startTransaction: boundStartTransaction,\n      poll: poll.bind(null, this),\n      proceed: proceed.bind(null, this),\n      cancel: cancel.bind(null, this),\n      recoverPassword: recoverPassword.bind(null, this),\n      handleInteractionCodeRedirect: handleInteractionCodeRedirect.bind(null, this),\n      isInteractionRequired: isInteractionRequired.bind(null, this),\n      isInteractionRequiredError,\n      handleEmailVerifyCallback: handleEmailVerifyCallback.bind(null, this),\n      isEmailVerifyCallback,\n      parseEmailVerifyCallback,\n      isEmailVerifyCallbackError,\n      getSavedTransactionMeta: getSavedTransactionMeta.bind(null, this),\n      createTransactionMeta: createTransactionMeta.bind(null, this),\n      getTransactionMeta: getTransactionMeta.bind(null, this),\n      saveTransactionMeta: saveTransactionMeta.bind(null, this),\n      clearTransactionMeta: clearTransactionMeta.bind(null, this),\n      isTransactionMetaValid,\n      setFlow: flow => {\n        this.options.flow = flow;\n      },\n      getFlow: () => {\n        return this.options.flow;\n      },\n      canProceed: canProceed.bind(null, this),\n      unlockAccount: unlockAccount.bind(null, this)\n    };\n    this.http = {\n      setRequestHeader: setRequestHeader.bind(null, this)\n    };\n    this.fingerprint = fingerprint.bind(null, this);\n    this.emitter = new Emitter();\n    this.tokenManager = new TokenManager(this, args.tokenManager);\n    this.authStateManager = new AuthStateManager(this);\n\n    if (!this.tokenManager.hasSharedStorage()) {\n      args.services = Object.assign(Object.assign({}, args.services), {\n        syncStorage: false\n      });\n    }\n\n    this.serviceManager = new ServiceManager(this, args.services);\n  }\n\n  async start() {\n    await this.serviceManager.start();\n    this.tokenManager.start();\n\n    if (!this.token.isLoginRedirect()) {\n      await this.authStateManager.updateAuthState();\n    }\n  }\n\n  async stop() {\n    this.tokenManager.stop();\n    await this.serviceManager.stop();\n  }\n\n  setHeaders(headers) {\n    this.options.headers = Object.assign({}, this.options.headers, headers);\n  }\n\n  async signIn(opts) {\n    return this.signInWithCredentials(opts);\n  }\n\n  async signInWithCredentials(opts) {\n    opts = clone(opts || {});\n\n    const _postToTransaction = options => {\n      delete opts.sendFingerprint;\n      return postToTransaction(this, '/api/v1/authn', opts, options);\n    };\n\n    if (!opts.sendFingerprint) {\n      return _postToTransaction();\n    }\n\n    return this.fingerprint().then(function (fingerprint) {\n      return _postToTransaction({\n        headers: {\n          'X-Device-Fingerprint': fingerprint\n        }\n      });\n    });\n  }\n\n  async signInWithRedirect() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const {\n      originalUri\n    } = opts,\n          additionalParams = __rest(opts, [\"originalUri\"]);\n\n    if (this._pending.handleLogin) {\n      return;\n    }\n\n    this._pending.handleLogin = true;\n\n    try {\n      if (originalUri) {\n        this.setOriginalUri(originalUri);\n      }\n\n      const params = Object.assign({\n        scopes: this.options.scopes || ['openid', 'email', 'profile']\n      }, additionalParams);\n      await this.token.getWithRedirect(params);\n    } finally {\n      this._pending.handleLogin = false;\n    }\n  }\n\n  closeSession() {\n    return this.session.close().then(async () => {\n      this.tokenManager.clear();\n    }).catch(function (e) {\n      if (e.name === 'AuthApiError' && e.errorCode === 'E0000007') {\n        return null;\n      }\n\n      throw e;\n    });\n  }\n\n  async revokeAccessToken(accessToken) {\n    if (!accessToken) {\n      accessToken = (await this.tokenManager.getTokens()).accessToken;\n      const accessTokenKey = this.tokenManager.getStorageKeyByType('accessToken');\n      this.tokenManager.remove(accessTokenKey);\n    }\n\n    if (!accessToken) {\n      return Promise.resolve(null);\n    }\n\n    return this.token.revoke(accessToken);\n  }\n\n  async revokeRefreshToken(refreshToken) {\n    if (!refreshToken) {\n      refreshToken = (await this.tokenManager.getTokens()).refreshToken;\n      const refreshTokenKey = this.tokenManager.getStorageKeyByType('refreshToken');\n      this.tokenManager.remove(refreshTokenKey);\n    }\n\n    if (!refreshToken) {\n      return Promise.resolve(null);\n    }\n\n    return this.token.revoke(refreshToken);\n  }\n\n  getSignOutRedirectUrl() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let {\n      idToken,\n      postLogoutRedirectUri,\n      state\n    } = options;\n\n    if (!idToken) {\n      idToken = this.tokenManager.getTokensSync().idToken;\n    }\n\n    if (!idToken) {\n      return '';\n    }\n\n    if (!postLogoutRedirectUri) {\n      postLogoutRedirectUri = this.options.postLogoutRedirectUri;\n    }\n\n    const logoutUrl = getOAuthUrls(this).logoutUrl;\n    const idTokenHint = idToken.idToken;\n    let logoutUri = logoutUrl + '?id_token_hint=' + encodeURIComponent(idTokenHint);\n\n    if (postLogoutRedirectUri) {\n      logoutUri += '&post_logout_redirect_uri=' + encodeURIComponent(postLogoutRedirectUri);\n    }\n\n    if (state) {\n      logoutUri += '&state=' + encodeURIComponent(state);\n    }\n\n    return logoutUri;\n  }\n\n  async signOut(options) {\n    options = Object.assign({}, options);\n    var defaultUri = window.location.origin;\n    var currentUri = window.location.href;\n    var postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri || defaultUri;\n    var accessToken = options.accessToken;\n    var refreshToken = options.refreshToken;\n    var revokeAccessToken = options.revokeAccessToken !== false;\n    var revokeRefreshToken = options.revokeRefreshToken !== false;\n\n    if (revokeRefreshToken && typeof refreshToken === 'undefined') {\n      refreshToken = this.tokenManager.getTokensSync().refreshToken;\n    }\n\n    if (revokeAccessToken && typeof accessToken === 'undefined') {\n      accessToken = this.tokenManager.getTokensSync().accessToken;\n    }\n\n    if (!options.idToken) {\n      options.idToken = this.tokenManager.getTokensSync().idToken;\n    }\n\n    if (revokeRefreshToken && refreshToken) {\n      await this.revokeRefreshToken(refreshToken);\n    }\n\n    if (revokeAccessToken && accessToken) {\n      await this.revokeAccessToken(accessToken);\n    }\n\n    const logoutUri = this.getSignOutRedirectUrl(Object.assign(Object.assign({}, options), {\n      postLogoutRedirectUri\n    }));\n\n    if (!logoutUri) {\n      return this.closeSession().then(function () {\n        if (postLogoutRedirectUri === currentUri) {\n          window.location.reload();\n        } else {\n          window.location.assign(postLogoutRedirectUri);\n        }\n      });\n    } else {\n      if (options.clearTokensBeforeRedirect) {\n        this.tokenManager.clear();\n      } else {\n        this.tokenManager.addPendingRemoveFlags();\n      }\n\n      window.location.assign(logoutUri);\n    }\n  }\n\n  webfinger(opts) {\n    var url = '/.well-known/webfinger' + toQueryString(opts);\n    var options = {\n      headers: {\n        'Accept': 'application/jrd+json'\n      }\n    };\n    return get(this, url, options);\n  }\n\n  async isAuthenticated() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      autoRenew,\n      autoRemove\n    } = this.tokenManager.getOptions();\n    const shouldRenew = options.onExpiredToken ? options.onExpiredToken === 'renew' : autoRenew;\n    const shouldRemove = options.onExpiredToken ? options.onExpiredToken === 'remove' : autoRemove;\n    let {\n      accessToken\n    } = this.tokenManager.getTokensSync();\n\n    if (accessToken && this.tokenManager.hasExpired(accessToken)) {\n      accessToken = undefined;\n\n      if (shouldRenew) {\n        try {\n          accessToken = await this.tokenManager.renew('accessToken');\n        } catch (_a) {}\n      } else if (shouldRemove) {\n        this.tokenManager.remove('accessToken');\n      }\n    }\n\n    let {\n      idToken\n    } = this.tokenManager.getTokensSync();\n\n    if (idToken && this.tokenManager.hasExpired(idToken)) {\n      idToken = undefined;\n\n      if (shouldRenew) {\n        try {\n          idToken = await this.tokenManager.renew('idToken');\n        } catch (_b) {}\n      } else if (shouldRemove) {\n        this.tokenManager.remove('idToken');\n      }\n    }\n\n    return !!(accessToken && idToken);\n  }\n\n  async getUser() {\n    const {\n      idToken,\n      accessToken\n    } = this.tokenManager.getTokensSync();\n    return this.token.getUserInfo(accessToken, idToken);\n  }\n\n  getIdToken() {\n    const {\n      idToken\n    } = this.tokenManager.getTokensSync();\n    return idToken ? idToken.idToken : undefined;\n  }\n\n  getAccessToken() {\n    const {\n      accessToken\n    } = this.tokenManager.getTokensSync();\n    return accessToken ? accessToken.accessToken : undefined;\n  }\n\n  getRefreshToken() {\n    const {\n      refreshToken\n    } = this.tokenManager.getTokensSync();\n    return refreshToken ? refreshToken.refreshToken : undefined;\n  }\n\n  async storeTokensFromRedirect() {\n    const {\n      tokens\n    } = await this.token.parseFromUrl();\n    this.tokenManager.setTokens(tokens);\n  }\n\n  setOriginalUri(originalUri, state) {\n    const sessionStorage = storageUtil.getSessionStorage();\n    sessionStorage.setItem(REFERRER_PATH_STORAGE_KEY, originalUri);\n    state = state || this.options.state;\n\n    if (state) {\n      const sharedStorage = this.storageManager.getOriginalUriStorage();\n      sharedStorage.setItem(state, originalUri);\n    }\n  }\n\n  getOriginalUri(state) {\n    state = state || this.options.state;\n\n    if (state) {\n      const sharedStorage = this.storageManager.getOriginalUriStorage();\n      const originalUri = sharedStorage.getItem(state);\n\n      if (originalUri) {\n        return originalUri;\n      }\n    }\n\n    const storage = storageUtil.getSessionStorage();\n    return storage ? storage.getItem(REFERRER_PATH_STORAGE_KEY) || undefined : undefined;\n  }\n\n  removeOriginalUri(state) {\n    const storage = storageUtil.getSessionStorage();\n    storage.removeItem(REFERRER_PATH_STORAGE_KEY);\n    state = state || this.options.state;\n\n    if (state) {\n      const sharedStorage = this.storageManager.getOriginalUriStorage();\n      sharedStorage.removeItem && sharedStorage.removeItem(state);\n    }\n  }\n\n  isLoginRedirect() {\n    return isLoginRedirect(this);\n  }\n\n  async handleLoginRedirect(tokens, originalUri) {\n    let state = this.options.state;\n\n    if (tokens) {\n      this.tokenManager.setTokens(tokens);\n      originalUri = originalUri || this.getOriginalUri(this.options.state);\n    } else if (this.isLoginRedirect()) {\n      try {\n        const oAuthResponse = await parseOAuthResponseFromUrl(this, {});\n        state = oAuthResponse.state;\n        originalUri = originalUri || this.getOriginalUri(state);\n        await this.storeTokensFromRedirect();\n      } catch (e) {\n        await this.authStateManager.updateAuthState();\n        throw e;\n      }\n    } else {\n      return;\n    }\n\n    await this.authStateManager.updateAuthState();\n    this.removeOriginalUri(state);\n    const {\n      restoreOriginalUri\n    } = this.options;\n\n    if (restoreOriginalUri) {\n      await restoreOriginalUri(this, originalUri);\n    } else if (originalUri) {\n      window.location.replace(originalUri);\n    }\n  }\n\n  isPKCE() {\n    return !!this.options.pkce;\n  }\n\n  hasResponseType(responseType) {\n    let hasResponseType = false;\n\n    if (Array.isArray(this.options.responseType) && this.options.responseType.length) {\n      hasResponseType = this.options.responseType.indexOf(responseType) >= 0;\n    } else {\n      hasResponseType = this.options.responseType === responseType;\n    }\n\n    return hasResponseType;\n  }\n\n  isAuthorizationCodeFlow() {\n    return this.hasResponseType('code');\n  }\n\n  getIssuerOrigin() {\n    return this.options.issuer.split('/oauth2/')[0];\n  }\n\n  forgotPassword(opts) {\n    return postToTransaction(this, '/api/v1/authn/recovery/password', opts);\n  }\n\n  unlockAccount(opts) {\n    return postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);\n  }\n\n  verifyRecoveryToken(opts) {\n    return postToTransaction(this, '/api/v1/authn/recovery/token', opts);\n  }\n\n  async invokeApiMethod(options) {\n    if (!options.accessToken) {\n      const accessToken = (await this.tokenManager.getTokens()).accessToken;\n      options.accessToken = accessToken === null || accessToken === void 0 ? void 0 : accessToken.accessToken;\n    }\n\n    return httpRequest(this, options);\n  }\n\n}\n\nOktaAuth.features = features;\nOktaAuth.crypto = index;\nOktaAuth.webauthn = webauthn;\nOktaAuth.features = OktaAuth.prototype.features = features;\nObject.assign(OktaAuth, {\n  constants\n});\nexport { OktaAuth as default };","map":{"version":3,"mappings":"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","names":["OktaAuth","constructor","args","features","options","buildOptions","storageManager","StorageManager","cookies","storageUtil","transactionManager","TransactionManager","Object","assign","_oktaUserAgent","OktaUserAgent","tx","status","transactionStatus","bind","resume","resumeTransaction","exists","transactionExists","_get","name","storage","get","introspect","introspectAuthn","createTransaction","res","AuthTransaction","postToTransaction","url","pkce","DEFAULT_CODE_CHALLENGE_METHOD","PKCE","generateVerifier","computeChallenge","getPKCEStorage","getLegacyPKCEStorage","getHttpCache","_pending","handleLogin","isBrowser","redirectUri","toAbsoluteUrl","window","location","origin","maxClockSkew","DEFAULT_MAX_CLOCK_SKEW","ignoreLifetime","session","close","closeSession","sessionExists","getSession","refresh","refreshSession","setCookieAndRedirect","_tokenQueue","PromiseQueue","useQueue","method","prototype","push","getWithRedirectFn","getWithRedirect","getWithRedirectApi","_setLocation","setLocation","parseFromUrlFn","parseFromUrl","parseFromUrlApi","_getHistory","history","_getLocation","_getDocument","document","token","prepareTokenParams","exchangeCodeForTokens","getWithoutPrompt","getWithPopup","decode","decodeToken","revoke","revokeToken","renew","renewToken","renewTokensWithRefresh","renewTokens","getUserInfo","accessTokenObject","idTokenObject","verify","verifyToken","isLoginRedirect","toWrap","forEach","key","boundStartTransaction","startTransaction","idx","interact","makeIdxResponse","makeIdxState","authenticate","register","start","poll","proceed","cancel","recoverPassword","handleInteractionCodeRedirect","isInteractionRequired","isInteractionRequiredError","handleEmailVerifyCallback","isEmailVerifyCallback","parseEmailVerifyCallback","isEmailVerifyCallbackError","getSavedTransactionMeta","createTransactionMeta","getTransactionMeta","saveTransactionMeta","clearTransactionMeta","isTransactionMetaValid","setFlow","flow","getFlow","canProceed","unlockAccount","http","setRequestHeader","fingerprint","emitter","Emitter","tokenManager","TokenManager","authStateManager","AuthStateManager","hasSharedStorage","services","syncStorage","serviceManager","ServiceManager","updateAuthState","stop","setHeaders","headers","signIn","opts","signInWithCredentials","clone","_postToTransaction","sendFingerprint","then","signInWithRedirect","originalUri","additionalParams","setOriginalUri","params","scopes","clear","catch","e","errorCode","revokeAccessToken","accessToken","getTokens","accessTokenKey","getStorageKeyByType","remove","Promise","resolve","revokeRefreshToken","refreshToken","refreshTokenKey","getSignOutRedirectUrl","idToken","postLogoutRedirectUri","state","getTokensSync","logoutUrl","getOAuthUrls","idTokenHint","logoutUri","encodeURIComponent","signOut","defaultUri","currentUri","href","reload","clearTokensBeforeRedirect","addPendingRemoveFlags","webfinger","toQueryString","isAuthenticated","autoRenew","autoRemove","getOptions","shouldRenew","onExpiredToken","shouldRemove","hasExpired","undefined","_a","_b","getUser","getIdToken","getAccessToken","getRefreshToken","storeTokensFromRedirect","tokens","setTokens","sessionStorage","browserStorage","getSessionStorage","setItem","REFERRER_PATH_STORAGE_KEY","sharedStorage","getOriginalUriStorage","getOriginalUri","getItem","removeOriginalUri","removeItem","handleLoginRedirect","oAuthResponse","parseOAuthResponseFromUrl","restoreOriginalUri","replace","isPKCE","hasResponseType","responseType","Array","isArray","length","indexOf","isAuthorizationCodeFlow","getIssuerOrigin","issuer","split","forgotPassword","verifyRecoveryToken","invokeApiMethod","httpRequest","crypto","webauthn","constants"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\OktaAuth.ts"],"sourcesContent":["/* eslint-disable max-statements */\n/* eslint-disable complexity */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n/* global window */\n\nimport { \n  DEFAULT_MAX_CLOCK_SKEW, \n  REFERRER_PATH_STORAGE_KEY\n} from './constants';\nimport * as constants from './constants';\nimport {\n  OktaAuthInterface,\n  OktaAuthOptions, \n  AccessToken, \n  IDToken,\n  RefreshToken,\n  TokenAPI, \n  FeaturesAPI, \n  CryptoAPI,\n  WebauthnAPI,\n  SignoutAPI, \n  FingerprintAPI,\n  UserClaims, \n  SigninWithRedirectOptions,\n  SigninWithCredentialsOptions,\n  SignoutOptions,\n  Tokens,\n  ForgotPasswordOptions,\n  VerifyRecoveryTokenOptions,\n  TransactionAPI,\n  SessionAPI,\n  SigninAPI,\n  PkceAPI,\n  SigninOptions,\n  IdxAPI,\n  SignoutRedirectUrlOptions,\n  HttpAPI,\n  FlowIdentifier,\n  GetWithRedirectAPI,\n  ParseFromUrlInterface,\n  GetWithRedirectFunction,\n  RequestOptions,\n  IsAuthenticatedOptions,\n  OAuthResponseType,\n  CustomUserClaims,\n  RequestData,\n} from './types';\nimport {\n  transactionStatus,\n  resumeTransaction,\n  transactionExists,\n  introspectAuthn,\n  postToTransaction,\n  AuthTransaction,\n  TransactionState\n} from './tx';\nimport PKCE from './oidc/util/pkce';\nimport {\n  closeSession,\n  sessionExists,\n  getSession,\n  refreshSession,\n  setCookieAndRedirect\n} from './session';\nimport {\n  getOAuthUrls,\n  getWithoutPrompt,\n  getWithPopup,\n  getWithRedirect,\n  isLoginRedirect,\n  parseFromUrl,\n  decodeToken,\n  revokeToken,\n  renewToken,\n  renewTokens,\n  renewTokensWithRefresh,\n  getUserInfo,\n  verifyToken,\n  prepareTokenParams,\n  exchangeCodeForTokens,\n  isInteractionRequiredError,\n  isInteractionRequired,\n} from './oidc';\nimport { isBrowser } from './features';\nimport * as features from './features';\nimport * as crypto from './crypto';\nimport * as webauthn from './crypto/webauthn';\nimport browserStorage from './browser/browserStorage';\nimport { \n  toQueryString, \n  toAbsoluteUrl,\n  clone,\n} from './util';\nimport { TokenManager } from './TokenManager';\nimport { ServiceManager } from './ServiceManager';\nimport { get, httpRequest, setRequestHeader } from './http';\nimport PromiseQueue from './PromiseQueue';\nimport fingerprint from './browser/fingerprint';\nimport { AuthStateManager } from './AuthStateManager';\nimport { StorageManager } from './StorageManager';\nimport TransactionManager from './TransactionManager';\nimport { buildOptions } from './options';\nimport {\n  interact,\n  introspect,\n  authenticate,\n  cancel,\n  poll,\n  proceed,\n  register,\n  recoverPassword,\n  unlockAccount,\n  startTransaction,\n  handleInteractionCodeRedirect,\n  canProceed,\n  handleEmailVerifyCallback,\n  isEmailVerifyCallback,\n  parseEmailVerifyCallback,\n  isEmailVerifyCallbackError\n} from './idx';\nimport { OktaUserAgent } from './OktaUserAgent';\nimport { parseOAuthResponseFromUrl } from './oidc/parseFromUrl';\nimport {\n  getSavedTransactionMeta,\n  createTransactionMeta,\n  getTransactionMeta,\n  saveTransactionMeta,\n  clearTransactionMeta,\n  isTransactionMetaValid\n} from './idx/transactionMeta';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore \n// Do not use this type in code, so it won't be emitted in the declaration output\nimport Emitter from 'tiny-emitter';\nimport { makeIdxState } from './idx/idxState';\n\nclass OktaAuth implements OktaAuthInterface, SigninAPI, SignoutAPI {\n  options: OktaAuthOptions;\n  storageManager: StorageManager;\n  transactionManager: TransactionManager;\n  tx: TransactionAPI;\n  idx: IdxAPI;\n  session: SessionAPI;\n  pkce: PkceAPI;\n  static features: FeaturesAPI = features;\n  static crypto: CryptoAPI = crypto;\n  static webauthn: WebauthnAPI = webauthn;\n  features: FeaturesAPI = features;\n  token: TokenAPI;\n  _tokenQueue: PromiseQueue;\n  emitter: any;\n  tokenManager: TokenManager;\n  authStateManager: AuthStateManager;\n  serviceManager: ServiceManager;\n  http: HttpAPI;\n  fingerprint: FingerprintAPI;\n  _oktaUserAgent: OktaUserAgent;\n  _pending: { handleLogin: boolean };\n  constructor(args: OktaAuthOptions) {\n    const options = this.options = buildOptions(args);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    this.storageManager = new StorageManager(options.storageManager!, options.cookies!, options.storageUtil!);\n    this.transactionManager = new TransactionManager(Object.assign({\n      storageManager: this.storageManager,\n    }, options.transactionManager));\n    this._oktaUserAgent = new OktaUserAgent();\n\n    this.tx = {\n      status: transactionStatus.bind(null, this),\n      resume: resumeTransaction.bind(null, this),\n      exists: Object.assign(transactionExists.bind(null, this), {\n        _get: (name) => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          const storage = options.storageUtil!.storage;\n          return storage.get(name);\n        }\n      }),\n      introspect: introspectAuthn.bind(null, this),\n      createTransaction: (res?: TransactionState) => {\n        return new AuthTransaction(this, res);\n      },\n      postToTransaction: (url: string, args?: RequestData, options?: RequestOptions) => {\n        return postToTransaction(this, url, args, options);\n      }\n    };\n\n    this.pkce = {\n      DEFAULT_CODE_CHALLENGE_METHOD: PKCE.DEFAULT_CODE_CHALLENGE_METHOD,\n      generateVerifier: PKCE.generateVerifier,\n      computeChallenge: PKCE.computeChallenge\n    };\n\n    // Add shims for compatibility, these will be removed in next major version. OKTA-362589\n    Object.assign(this.options.storageUtil || {}, {\n      getPKCEStorage: this.storageManager.getLegacyPKCEStorage.bind(this.storageManager),\n      getHttpCache: this.storageManager.getHttpCache.bind(this.storageManager),\n    });\n\n    this._pending = { handleLogin: false };\n\n    if (isBrowser()) {\n      this.options = Object.assign(this.options, {\n        redirectUri: toAbsoluteUrl(args.redirectUri, window.location.origin), // allow relative URIs\n      });\n    }\n\n    // Digital clocks will drift over time, so the server\n    // can misalign with the time reported by the browser.\n    // The maxClockSkew allows relaxing the time-based\n    // validation of tokens (in seconds, not milliseconds).\n    // It currently defaults to 300, because 5 min is the\n    // default maximum tolerance allowed by Kerberos.\n    // (https://technet.microsoft.com/en-us/library/cc976357.aspx)\n    if (!args.maxClockSkew && args.maxClockSkew !== 0) {\n      this.options.maxClockSkew = DEFAULT_MAX_CLOCK_SKEW;\n    } else {\n      this.options.maxClockSkew = args.maxClockSkew;\n    }\n\n    // As some end user's devices can have their date \n    // and time incorrectly set, allow for the disabling\n    // of the jwt liftetime validation\n    this.options.ignoreLifetime = !!args.ignoreLifetime;\n\n    this.session = {\n      close: closeSession.bind(null, this),\n      exists: sessionExists.bind(null, this),\n      get: getSession.bind(null, this),\n      refresh: refreshSession.bind(null, this),\n      setCookieAndRedirect: setCookieAndRedirect.bind(null, this)\n    };\n\n    this._tokenQueue = new PromiseQueue();\n    const useQueue = (method) => {\n      return PromiseQueue.prototype.push.bind(this._tokenQueue, method, null);\n    };\n\n    // eslint-disable-next-line max-len\n    const getWithRedirectFn = useQueue(getWithRedirect.bind(null, this)) as GetWithRedirectFunction;\n    const getWithRedirectApi: GetWithRedirectAPI = Object.assign(getWithRedirectFn, {\n      // This is exposed so we can set window.location in our tests\n      _setLocation: function(url) {\n        if (options.setLocation) {\n          options.setLocation(url);\n        } else {\n          window.location = url;\n        }\n      }\n    });\n    // eslint-disable-next-line max-len\n    const parseFromUrlFn = useQueue(parseFromUrl.bind(null, this)) as ParseFromUrlInterface;\n    const parseFromUrlApi: ParseFromUrlInterface = Object.assign(parseFromUrlFn, {\n      // This is exposed so we can mock getting window.history in our tests\n      _getHistory: function() {\n        return window.history;\n      },\n\n      // This is exposed so we can mock getting window.location in our tests\n      _getLocation: function() {\n        return window.location;\n      },\n\n      // This is exposed so we can mock getting window.document in our tests\n      _getDocument: function() {\n        return window.document;\n      }\n    });\n    this.token = {\n      prepareTokenParams: prepareTokenParams.bind(null, this),\n      exchangeCodeForTokens: exchangeCodeForTokens.bind(null, this),\n      getWithoutPrompt: getWithoutPrompt.bind(null, this),\n      getWithPopup: getWithPopup.bind(null, this),\n      getWithRedirect: getWithRedirectApi,\n      parseFromUrl: parseFromUrlApi,\n      decode: decodeToken,\n      revoke: revokeToken.bind(null, this),\n      renew: renewToken.bind(null, this),\n      renewTokensWithRefresh: renewTokensWithRefresh.bind(null, this),\n      renewTokens: renewTokens.bind(null, this),\n      getUserInfo: <C extends CustomUserClaims = CustomUserClaims>(\n        accessTokenObject: AccessToken,\n        idTokenObject: IDToken\n      ): Promise<UserClaims<C>> => {\n        return getUserInfo(this, accessTokenObject, idTokenObject);\n      },\n      verify: verifyToken.bind(null, this),\n      isLoginRedirect: isLoginRedirect.bind(null, this)\n    };\n    // Wrap certain async token API methods using PromiseQueue to avoid issues with concurrency\n    // 'getWithRedirect' and 'parseFromUrl' are already wrapped\n    const toWrap = [\n      'getWithoutPrompt',\n      'getWithPopup',\n      'revoke',\n      'renew',\n      'renewTokensWithRefresh',\n      'renewTokens'\n    ];\n    toWrap.forEach(key => {\n      this.token[key] = useQueue(this.token[key]);\n    });\n\n    // IDX\n    const boundStartTransaction = startTransaction.bind(null, this);\n    this.idx = {\n      interact: interact.bind(null, this),\n      introspect: introspect.bind(null, this),\n      makeIdxResponse: makeIdxState.bind(null, this),\n      \n      authenticate: authenticate.bind(null, this),\n      register: register.bind(null, this),\n      start: boundStartTransaction,\n      startTransaction: boundStartTransaction, // Use `start` instead. `startTransaction` will be removed in 7.0\n      poll: poll.bind(null, this),\n      proceed: proceed.bind(null, this),\n      cancel: cancel.bind(null, this),\n      recoverPassword: recoverPassword.bind(null, this),\n\n      // oauth redirect callback\n      handleInteractionCodeRedirect: handleInteractionCodeRedirect.bind(null, this),\n\n      // interaction required callback\n      isInteractionRequired: isInteractionRequired.bind(null, this),\n      isInteractionRequiredError,\n\n      // email verify callback\n      handleEmailVerifyCallback: handleEmailVerifyCallback.bind(null, this),\n      isEmailVerifyCallback,\n      parseEmailVerifyCallback,\n      isEmailVerifyCallbackError,\n      \n      getSavedTransactionMeta: getSavedTransactionMeta.bind(null, this),\n      createTransactionMeta: createTransactionMeta.bind(null, this),\n      getTransactionMeta: getTransactionMeta.bind(null, this),\n      saveTransactionMeta: saveTransactionMeta.bind(null, this),\n      clearTransactionMeta: clearTransactionMeta.bind(null, this),\n      isTransactionMetaValid,\n      setFlow: (flow: FlowIdentifier) => {\n        this.options.flow = flow;\n      },\n      getFlow: (): FlowIdentifier | undefined => {\n        return this.options.flow;\n      },\n      canProceed: canProceed.bind(null, this),\n      unlockAccount: unlockAccount.bind(null, this),\n    };\n\n    // HTTP\n    this.http = {\n      setRequestHeader: setRequestHeader.bind(null, this)\n    };\n\n    // Fingerprint API\n    this.fingerprint = fingerprint.bind(null, this);\n\n    this.emitter = new Emitter();\n\n    // TokenManager\n    this.tokenManager = new TokenManager(this, args.tokenManager);\n\n    // AuthStateManager\n    this.authStateManager = new AuthStateManager(this);\n\n    // Enable `syncStorage` only if token storage is shared across tabs (type is `localStorage` or `cookie`)\n    if (!this.tokenManager.hasSharedStorage()) {\n      args.services = { ...args.services, syncStorage: false };\n    }\n\n    // ServiceManager\n    this.serviceManager = new ServiceManager(this, args.services);\n  }\n\n  async start() {\n    await this.serviceManager.start();\n    // TODO: review tokenManager.start\n    this.tokenManager.start();\n    if (!this.token.isLoginRedirect()) {\n      await this.authStateManager.updateAuthState();\n    }\n  }\n\n  async stop() {\n    // TODO: review tokenManager.stop\n    this.tokenManager.stop();\n    await this.serviceManager.stop();\n  }\n\n  setHeaders(headers) {\n    this.options.headers = Object.assign({}, this.options.headers, headers);\n  }\n\n\n  // Authn  V1\n  async signIn(opts: SigninOptions): Promise<AuthTransaction> {\n    return this.signInWithCredentials(opts as SigninWithCredentialsOptions);\n  }\n\n  // Authn  V1\n  async signInWithCredentials(opts: SigninWithCredentialsOptions): Promise<AuthTransaction> {\n    opts = clone(opts || {});\n    const _postToTransaction = (options?) => {\n      delete opts.sendFingerprint;\n      return postToTransaction(this, '/api/v1/authn', opts, options);\n    };\n    if (!opts.sendFingerprint) {\n      return _postToTransaction();\n    }\n    return this.fingerprint()\n    .then(function(fingerprint) {\n      return _postToTransaction({\n        headers: {\n          'X-Device-Fingerprint': fingerprint\n        }\n      });\n    });\n  }\n\n  async signInWithRedirect(opts: SigninWithRedirectOptions = {}) {\n    const { originalUri, ...additionalParams } = opts;\n    if(this._pending.handleLogin) { \n      // Don't trigger second round\n      return;\n    }\n\n    this._pending.handleLogin = true;\n    try {\n      // Trigger default signIn redirect flow\n      if (originalUri) {\n        this.setOriginalUri(originalUri);\n      }\n      const params = Object.assign({\n        // TODO: remove this line when default scopes are changed OKTA-343294\n        scopes: this.options.scopes || ['openid', 'email', 'profile']\n      }, additionalParams);\n      await this.token.getWithRedirect(params);\n    } finally {\n      this._pending.handleLogin = false;\n    }\n  }\n\n  // Ends the current Okta SSO session without redirecting to Okta.\n  closeSession(): Promise<unknown> {\n    return this.session.close() // DELETE /api/v1/sessions/me\n    .then(async () => {\n      // Clear all local tokens\n      this.tokenManager.clear();\n    })\n    .catch(function(e) {\n      if (e.name === 'AuthApiError' && e.errorCode === 'E0000007') {\n        // Session does not exist or has already been closed\n        return null;\n      }\n      throw e;\n    });\n  }\n  \n  // Revokes the access token for the application session\n  async revokeAccessToken(accessToken?: AccessToken): Promise<unknown> {\n    if (!accessToken) {\n      accessToken = (await this.tokenManager.getTokens()).accessToken as AccessToken;\n      const accessTokenKey = this.tokenManager.getStorageKeyByType('accessToken');\n      this.tokenManager.remove(accessTokenKey);\n    }\n    // Access token may have been removed. In this case, we will silently succeed.\n    if (!accessToken) {\n      return Promise.resolve(null);\n    }\n    return this.token.revoke(accessToken);\n  }\n\n  // Revokes the refresh token for the application session\n  async revokeRefreshToken(refreshToken?: RefreshToken): Promise<unknown> {\n    if (!refreshToken) {\n      refreshToken = (await this.tokenManager.getTokens()).refreshToken as RefreshToken;\n      const refreshTokenKey = this.tokenManager.getStorageKeyByType('refreshToken');\n      this.tokenManager.remove(refreshTokenKey);\n    }\n    // Refresh token may have been removed. In this case, we will silently succeed.\n    if (!refreshToken) {\n      return Promise.resolve(null);\n    }\n    return this.token.revoke(refreshToken);\n  }\n\n  getSignOutRedirectUrl(options: SignoutRedirectUrlOptions = {}) {\n    let {\n      idToken,\n      postLogoutRedirectUri,\n      state,\n    } = options;\n    if (!idToken) {\n      idToken = this.tokenManager.getTokensSync().idToken as IDToken;\n    }\n    if (!idToken) {\n      return '';\n    }\n    if (!postLogoutRedirectUri) {\n      postLogoutRedirectUri = this.options.postLogoutRedirectUri;\n    }\n\n    const logoutUrl = getOAuthUrls(this).logoutUrl;\n    const idTokenHint = idToken.idToken; // a string\n    let logoutUri = logoutUrl + '?id_token_hint=' + encodeURIComponent(idTokenHint);\n    if (postLogoutRedirectUri) {\n      logoutUri += '&post_logout_redirect_uri=' + encodeURIComponent(postLogoutRedirectUri);\n    } \n    // State allows option parameters to be passed to logout redirect uri\n    if (state) {\n      logoutUri += '&state=' + encodeURIComponent(state);\n    }\n\n    return logoutUri;\n  }\n\n  // Revokes refreshToken or accessToken, clears all local tokens, then redirects to Okta to end the SSO session.\n  async signOut(options?: SignoutOptions) {\n    options = Object.assign({}, options);\n  \n    // postLogoutRedirectUri must be whitelisted in Okta Admin UI\n    var defaultUri = window.location.origin;\n    var currentUri = window.location.href;\n    var postLogoutRedirectUri = options.postLogoutRedirectUri\n      || this.options.postLogoutRedirectUri\n      || defaultUri;\n  \n    var accessToken = options.accessToken;\n    var refreshToken = options.refreshToken;\n    var revokeAccessToken = options.revokeAccessToken !== false;\n    var revokeRefreshToken = options.revokeRefreshToken !== false;\n  \n    if (revokeRefreshToken && typeof refreshToken === 'undefined') {\n      refreshToken = this.tokenManager.getTokensSync().refreshToken as RefreshToken;\n    }\n\n    if (revokeAccessToken && typeof accessToken === 'undefined') {\n      accessToken = this.tokenManager.getTokensSync().accessToken as AccessToken;\n    }\n  \n    if (!options.idToken) {\n      options.idToken = this.tokenManager.getTokensSync().idToken as IDToken;\n    }\n\n    if (revokeRefreshToken && refreshToken) {\n      await this.revokeRefreshToken(refreshToken);\n    }\n\n    if (revokeAccessToken && accessToken) {\n      await this.revokeAccessToken(accessToken);\n    }\n\n    const logoutUri = this.getSignOutRedirectUrl({ ...options, postLogoutRedirectUri });\n    // No logoutUri? This can happen if the storage was cleared.\n    // Fallback to XHR signOut, then simulate a redirect to the post logout uri\n    if (!logoutUri) {\n      // local tokens are cleared once session is closed\n      return this.closeSession() // can throw if the user cannot be signed out\n      .then(function() {\n        if (postLogoutRedirectUri === currentUri) {\n          window.location.reload(); // force a hard reload if URI is not changing\n        } else {\n          window.location.assign(postLogoutRedirectUri);\n        }\n      });\n    } else {\n      if (options.clearTokensBeforeRedirect) {\n        // Clear all local tokens\n        this.tokenManager.clear();\n      } else {\n        this.tokenManager.addPendingRemoveFlags();\n      }\n      // Flow ends with logout redirect\n      window.location.assign(logoutUri);\n    }\n  }\n\n  webfinger(opts): Promise<object> {\n    var url = '/.well-known/webfinger' + toQueryString(opts);\n    var options = {\n      headers: {\n        'Accept': 'application/jrd+json'\n      }\n    };\n    return get(this, url, options);\n  }\n\n  //\n  // Common Methods from downstream SDKs\n  //\n\n  // Returns true if both accessToken and idToken are not expired\n  // If `autoRenew` option is set, will attempt to renew expired tokens before returning.\n  async isAuthenticated(options: IsAuthenticatedOptions = {}): Promise<boolean> {\n    // TODO: remove dependency on tokenManager options in next major version - OKTA-473815\n    const { autoRenew, autoRemove } = this.tokenManager.getOptions();\n\n    const shouldRenew = options.onExpiredToken ? options.onExpiredToken === 'renew' : autoRenew;\n    const shouldRemove = options.onExpiredToken ? options.onExpiredToken === 'remove' : autoRemove;\n\n    let { accessToken } = this.tokenManager.getTokensSync();\n    if (accessToken && this.tokenManager.hasExpired(accessToken)) {\n      accessToken = undefined;\n      if (shouldRenew) {\n        try {\n          accessToken = await this.tokenManager.renew('accessToken') as AccessToken;\n        } catch {\n          // Renew errors will emit an \"error\" event \n        }\n      } else if (shouldRemove) {\n        this.tokenManager.remove('accessToken');\n      }\n    }\n\n    let { idToken } = this.tokenManager.getTokensSync();\n    if (idToken && this.tokenManager.hasExpired(idToken)) {\n      idToken = undefined;\n      if (shouldRenew) {\n        try {\n          idToken = await this.tokenManager.renew('idToken') as IDToken;\n        } catch {\n          // Renew errors will emit an \"error\" event \n        }\n      } else if (shouldRemove) {\n        this.tokenManager.remove('idToken');\n      }\n    }\n\n    return !!(accessToken && idToken);\n  }\n\n  async getUser<T extends CustomUserClaims = CustomUserClaims>(): Promise<UserClaims<T>> {\n    const { idToken, accessToken } = this.tokenManager.getTokensSync();\n    return this.token.getUserInfo(accessToken, idToken);\n  }\n\n  getIdToken(): string | undefined {\n    const { idToken } = this.tokenManager.getTokensSync();\n    return idToken ? idToken.idToken : undefined;\n  }\n\n  getAccessToken(): string | undefined {\n    const { accessToken } = this.tokenManager.getTokensSync();\n    return accessToken ? accessToken.accessToken : undefined;\n  }\n\n  getRefreshToken(): string | undefined {\n    const { refreshToken } = this.tokenManager.getTokensSync();\n    return refreshToken ? refreshToken.refreshToken : undefined;\n  }\n\n  /**\n   * Store parsed tokens from redirect url\n   */\n  async storeTokensFromRedirect(): Promise<void> {\n    const { tokens } = await this.token.parseFromUrl();\n    this.tokenManager.setTokens(tokens);\n  }\n\n  setOriginalUri(originalUri: string, state?: string): void {\n    // always store in session storage\n    const sessionStorage = browserStorage.getSessionStorage();\n    sessionStorage.setItem(REFERRER_PATH_STORAGE_KEY, originalUri);\n\n    // to support multi-tab flows, set a state in constructor or pass as param\n    state = state || this.options.state;\n    if (state) {\n      const sharedStorage = this.storageManager.getOriginalUriStorage();\n      sharedStorage.setItem(state, originalUri);\n    }\n  }\n\n  getOriginalUri(state?: string): string | undefined {\n    // Prefer shared storage (if state is available)\n    state = state || this.options.state;\n    if (state) {\n      const sharedStorage = this.storageManager.getOriginalUriStorage();\n      const originalUri = sharedStorage.getItem(state);\n      if (originalUri) {\n        return originalUri;\n      }\n    }\n\n    // Try to load from session storage\n    const storage = browserStorage.getSessionStorage();\n    return storage ? storage.getItem(REFERRER_PATH_STORAGE_KEY) || undefined : undefined;\n  }\n\n  removeOriginalUri(state?: string): void {\n    // Remove from sessionStorage\n    const storage = browserStorage.getSessionStorage();\n    storage.removeItem(REFERRER_PATH_STORAGE_KEY);\n\n    // Also remove from shared storage\n    state = state || this.options.state;\n    if (state) {\n      const sharedStorage = this.storageManager.getOriginalUriStorage();\n      sharedStorage.removeItem && sharedStorage.removeItem(state);\n    }\n  }\n\n  isLoginRedirect(): boolean {\n    return isLoginRedirect(this);\n  }\n\n  async handleLoginRedirect(tokens?: Tokens, originalUri?: string): Promise<void> {\n    let state = this.options.state;\n\n    // Store tokens and update AuthState by the emitted events\n    if (tokens) {\n      this.tokenManager.setTokens(tokens);\n      originalUri = originalUri || this.getOriginalUri(this.options.state);\n    } else if (this.isLoginRedirect()) {\n      try {\n        // For redirect flow, get state from the URL and use it to retrieve the originalUri\n        const oAuthResponse = await parseOAuthResponseFromUrl(this, {});\n        state = oAuthResponse.state;\n        originalUri = originalUri || this.getOriginalUri(state);\n        await this.storeTokensFromRedirect();\n      } catch(e) {\n        // auth state should be updated\n        await this.authStateManager.updateAuthState();\n        throw e;\n      }\n    } else {\n      return; // nothing to do\n    }\n    \n    // ensure auth state has been updated\n    await this.authStateManager.updateAuthState();\n\n    // clear originalUri from storage\n    this.removeOriginalUri(state);\n\n    // Redirect to originalUri\n    const { restoreOriginalUri } = this.options;\n    if (restoreOriginalUri) {\n      await restoreOriginalUri(this, originalUri);\n    } else if (originalUri) {\n      window.location.replace(originalUri);\n    }\n  }\n\n  isPKCE(): boolean {\n    return !!this.options.pkce;\n  }\n\n  hasResponseType(responseType: OAuthResponseType): boolean {\n    let hasResponseType = false;\n    if (Array.isArray(this.options.responseType) && this.options.responseType.length) {\n      hasResponseType = this.options.responseType.indexOf(responseType) >= 0;\n    } else {\n      hasResponseType = this.options.responseType === responseType;\n    }\n    return hasResponseType;\n  }\n\n  isAuthorizationCodeFlow(): boolean {\n    return this.hasResponseType('code');\n  }\n\n  // { username, password, (relayState), (context) }\n  // signIn(opts: SignInWithCredentialsOptions): Promise<AuthTransaction> {\n  //   return postToTransaction(this, '/api/v1/authn', opts);\n  // }\n\n  getIssuerOrigin(): string {\n    // Infer the URL from the issuer URL, omitting the /oauth2/{authServerId}\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.options.issuer!.split('/oauth2/')[0];\n  }\n\n  // { username, (relayState) }\n  forgotPassword(opts): Promise<AuthTransaction> {\n    return postToTransaction(this, '/api/v1/authn/recovery/password', opts);\n  }\n\n  // { username, (relayState) }\n  unlockAccount(opts: ForgotPasswordOptions): Promise<AuthTransaction> {\n    return postToTransaction(this, '/api/v1/authn/recovery/unlock', opts);\n  }\n\n  // { recoveryToken }\n  verifyRecoveryToken(opts: VerifyRecoveryTokenOptions): Promise<AuthTransaction> {\n    return postToTransaction(this, '/api/v1/authn/recovery/token', opts);\n  }\n\n  // Escape hatch method to make arbitrary OKTA API call\n  async invokeApiMethod(options: RequestOptions): Promise<unknown> {\n    if (!options.accessToken) {\n      const accessToken = (await this.tokenManager.getTokens()).accessToken as AccessToken;\n      options.accessToken = accessToken?.accessToken;\n    }\n    return httpRequest(this, options);\n  }\n}\n\n// Hoist feature detection functions to prototype & static type\nOktaAuth.features = OktaAuth.prototype.features = features;\n\n// Also hoist constants for CommonJS users\nObject.assign(OktaAuth, {\n  constants\n});\n\nexport default OktaAuth;"]},"metadata":{},"sourceType":"module"}