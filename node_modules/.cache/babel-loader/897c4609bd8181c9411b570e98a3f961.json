{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport OAuthError from '../errors/OAuthError.js';\n\nfunction handleInteractionCodeRedirect(_x, _x2) {\n  return _handleInteractionCodeRedirect.apply(this, arguments);\n}\n\nfunction _handleInteractionCodeRedirect() {\n  _handleInteractionCodeRedirect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(authClient, url) {\n    var meta, codeVerifier, savedState, _URL, searchParams, state, interactionCode, error, _yield$authClient$tok, tokens;\n\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            meta = authClient.transactionManager.load();\n\n            if (meta) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new AuthSdkError('No transaction data was found in storage');\n\n          case 3:\n            codeVerifier = meta.codeVerifier, savedState = meta.state;\n            _URL = new URL(url), searchParams = _URL.searchParams;\n            state = searchParams.get('state');\n            interactionCode = searchParams.get('interaction_code');\n            error = searchParams.get('error');\n\n            if (!error) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new OAuthError(error, searchParams.get('error_description'));\n\n          case 10:\n            if (!(state !== savedState)) {\n              _context.next = 12;\n              break;\n            }\n\n            throw new AuthSdkError('State in redirect uri does not match with transaction state');\n\n          case 12:\n            if (interactionCode) {\n              _context.next = 14;\n              break;\n            }\n\n            throw new AuthSdkError('Unable to parse interaction_code from the url');\n\n          case 14:\n            _context.next = 16;\n            return authClient.token.exchangeCodeForTokens({\n              interactionCode: interactionCode,\n              codeVerifier: codeVerifier\n            });\n\n          case 16:\n            _yield$authClient$tok = _context.sent;\n            tokens = _yield$authClient$tok.tokens;\n            authClient.tokenManager.setTokens(tokens);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _handleInteractionCodeRedirect.apply(this, arguments);\n}\n\nexport { handleInteractionCodeRedirect };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;SAiBsBA,6B;;;;;8FAAf,iBACLC,UADK,EAELC,GAFK;IAAA;;IAAA;MAAA;QAAA;UAAA;YAICC,IAJD,GAIQF,UAAU,CAACG,kBAAX,CAA8BC,IAA9B,EAJR;;YAAA,IAKAF,IALA;cAAA;cAAA;YAAA;;YAAA,MAMG,IAAIG,YAAJ,CAAiB,0CAAjB,CANH;;UAAA;YAUHC,YAVG,GAYDJ,IAZC,CAUHI,YAVG,EAWIC,UAXJ,GAYDL,IAZC,CAWHM,KAXG;YAAA,OAiBD,IAAIC,GAAJ,CAAQR,GAAR,CAjBC,EAcHS,YAdG,QAcHA,YAdG;YAkBCF,KAlBD,GAkBSE,YAAY,CAACC,GAAb,CAAiB,OAAjB,CAlBT;YAmBCC,eAnBD,GAmBmBF,YAAY,CAACC,GAAb,CAAiB,kBAAjB,CAnBnB;YAsBCE,KAtBD,GAsBSH,YAAY,CAACC,GAAb,CAAiB,OAAjB,CAtBT;;YAAA,KAuBDE,KAvBC;cAAA;cAAA;YAAA;;YAAA,MAyBG,IAAIC,UAAJ,CAAeD,KAAf,EAAsBH,YAAY,CAACC,GAAb,CAAiB,mBAAjB,CAAtB,CAzBH;;UAAA;YAAA,MA2BDH,KAAK,KAAKD,UA3BT;cAAA;cAAA;YAAA;;YAAA,MA4BG,IAAIF,YAAJ,CAAiB,6DAAjB,CA5BH;;UAAA;YAAA,IA8BAO,eA9BA;cAAA;cAAA;YAAA;;YAAA,MA+BG,IAAIP,YAAJ,CAAiB,+CAAjB,CA/BH;;UAAA;YAAA;YAAA,OAmCoBL,UAAU,CAACe,KAAX,CAAiBC,qBAAjB,CAAuC;cAAEJ,eAAe,EAAfA,eAAF;cAAmBN,YAAY,EAAZA;YAAnB,CAAvC,CAnCpB;;UAAA;YAAA;YAmCGW,MAnCH,yBAmCGA,MAnCH;YAoCLjB,UAAU,CAACkB,YAAX,CAAwBC,SAAxB,CAAkCF,MAAlC;;UApCK;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["handleInteractionCodeRedirect","authClient","url","meta","transactionManager","load","AuthSdkError","codeVerifier","savedState","state","URL","searchParams","get","interactionCode","error","OAuthError","token","exchangeCodeForTokens","tokens","tokenManager","setTokens"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\handleInteractionCodeRedirect.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthSdkError, OAuthError } from '../errors';\nimport { OktaAuth } from '..';\nimport {IdxTransactionMeta} from '../types';\n\nexport async function handleInteractionCodeRedirect(\n  authClient: OktaAuth, \n  url: string\n): Promise<void> {\n  const meta = authClient.transactionManager.load() as IdxTransactionMeta;\n  if (!meta) {\n    throw new AuthSdkError('No transaction data was found in storage');\n  }\n\n  const { \n    codeVerifier,\n    state: savedState \n  } = meta;\n  const { \n    searchParams\n  // URL API has been added to the polyfill\n  // eslint-disable-next-line compat/compat\n  } = new URL(url); \n  const state = searchParams.get('state');\n  const interactionCode = searchParams.get('interaction_code');\n\n  // Error handling\n  const error = searchParams.get('error');\n  if (error) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    throw new OAuthError(error, searchParams.get('error_description')!);\n  }\n  if (state !== savedState) {\n    throw new AuthSdkError('State in redirect uri does not match with transaction state');\n  }\n  if (!interactionCode) {\n    throw new AuthSdkError('Unable to parse interaction_code from the url');\n  }\n  \n  // Save tokens to storage\n  const { tokens } = await authClient.token.exchangeCodeForTokens({ interactionCode, codeVerifier });\n  authClient.tokenManager.setTokens(tokens);\n}"]},"metadata":{},"sourceType":"module"}