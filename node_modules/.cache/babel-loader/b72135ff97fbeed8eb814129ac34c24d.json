{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { isFingerprintSupported } from '../features.js';\nimport { addListener, removeListener } from '../oidc/util/browser.js';\nimport '../idx/types/api.js';\nimport '../myaccount/types.js';\n\nfunction fingerprint(sdk, options) {\n  options = options || {};\n\n  if (!isFingerprintSupported()) {\n    return Promise.reject(new AuthSdkError('Fingerprinting is not supported on this device'));\n  }\n\n  var timeout;\n  var iframe;\n  var listener;\n  var promise = new Promise(function (resolve, reject) {\n    iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n\n    listener = function listener(e) {\n      if (!e || !e.data || e.origin !== sdk.getIssuerOrigin()) {\n        return;\n      }\n\n      try {\n        var msg = JSON.parse(e.data);\n      } catch (err) {\n        return;\n      }\n\n      if (!msg) {\n        return;\n      }\n\n      if (msg.type === 'FingerprintAvailable') {\n        return resolve(msg.fingerprint);\n      }\n\n      if (msg.type === 'FingerprintServiceReady') {\n        e.source.postMessage(JSON.stringify({\n          type: 'GetFingerprint'\n        }), e.origin);\n      }\n    };\n\n    addListener(window, 'message', listener);\n    iframe.src = sdk.getIssuerOrigin() + '/auth/services/devicefingerprint';\n    document.body.appendChild(iframe);\n    timeout = setTimeout(function () {\n      reject(new AuthSdkError('Fingerprinting timed out'));\n    }, (options === null || options === void 0 ? void 0 : options.timeout) || 15000);\n  });\n  return promise.finally(function () {\n    clearTimeout(timeout);\n    removeListener(window, 'message', listener);\n\n    if (document.body.contains(iframe)) {\n      iframe.parentElement.removeChild(iframe);\n    }\n  });\n}\n\nexport { fingerprint as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAqBc,SAAUA,WAAV,CAAsBC,GAAtB,EAA8CC,OAA9C,EAA0E;EACtFA,OAAO,GAAGA,OAAO,IAAI,EAArB;;EAEA,IAAI,CAACC,sBAAsB,EAA3B,EAA+B;IAC7B,OAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,YAAJ,CAAiB,gDAAjB,CAAf,CAAP;EACD;;EAED,IAAIC,OAAJ;EACA,IAAIC,MAAJ;EACA,IAAIC,QAAJ;EACA,IAAIC,OAAO,GAAG,IAAIN,OAAJ,CAAY,UAAUO,OAAV,EAAmBN,MAAnB,EAAyB;IACjDG,MAAM,GAAGI,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAT;IACAL,MAAM,CAACM,KAAP,CAAaC,OAAb,GAAuB,MAAvB;;IAGAN,QAAQ,GAAG,SAASA,QAAT,CAAkBO,CAAlB,EAAmB;MAC5B,IAAI,CAACA,CAAD,IAAM,CAACA,CAAC,CAACC,IAAT,IAAiBD,CAAC,CAACE,MAAF,KAAajB,GAAG,CAACkB,eAAJ,EAAlC,EAAyD;QACvD;MACD;;MAED,IAAI;QACF,IAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWN,CAAC,CAACC,IAAb,CAAV;MACD,CAFD,CAEE,OAAOM,GAAP,EAAY;QAIZ;MACD;;MAED,IAAI,CAACH,GAAL,EAAU;QAAE;MAAS;;MACrB,IAAIA,GAAG,CAACI,IAAJ,KAAa,sBAAjB,EAAyC;QACvC,OAAOb,OAAO,CAACS,GAAG,CAACpB,WAAL,CAAd;MACD;;MACD,IAAIoB,GAAG,CAACI,IAAJ,KAAa,yBAAjB,EAA4C;QAC1CR,CAAC,CAACS,MAAF,CAASC,WAAT,CAAqBL,IAAI,CAACM,SAAL,CAAe;UAClCH,IAAI,EAAE;QAD4B,CAAf,CAArB,EAEIR,CAAC,CAACE,MAFN;MAGD;IACF,CAvBD;;IAwBAU,WAAW,CAACC,MAAD,EAAS,SAAT,EAAoBpB,QAApB,CAAX;IAEAD,MAAM,CAACsB,GAAP,GAAa7B,GAAG,CAACkB,eAAJ,KAAwB,kCAArC;IACAP,QAAQ,CAACmB,IAAT,CAAcC,WAAd,CAA0BxB,MAA1B;IAEAD,OAAO,GAAG0B,UAAU,CAAC;MACnB5B,MAAM,CAAC,IAAIC,YAAJ,CAAiB,0BAAjB,CAAD,CAAN;IACD,CAFmB,EAEjB,QAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEC,OAAT,KAAoB,KAFH,CAApB;EAGD,CArCa,CAAd;EAuCA,OAAOG,OAAO,CAACwB,OAAR,CAAgB;IACrBC,YAAY,CAAC5B,OAAD,CAAZ;IACA6B,cAAc,CAACP,MAAD,EAAS,SAAT,EAAoBpB,QAApB,CAAd;;IACA,IAAIG,QAAQ,CAACmB,IAAT,CAAcM,QAAd,CAAuB7B,MAAvB,CAAJ,EAAoC;MAClCA,MAAM,CAAC8B,aAAP,CAAqBC,WAArB,CAAiC/B,MAAjC;IACD;EACF,CANM,CAAP;AAOF","names":["fingerprint","sdk","options","isFingerprintSupported","Promise","reject","AuthSdkError","timeout","iframe","listener","promise","resolve","document","createElement","style","display","e","data","origin","getIssuerOrigin","msg","JSON","parse","err","type","source","postMessage","stringify","addListener","window","src","body","appendChild","setTimeout","finally","clearTimeout","removeListener","contains","parentElement","removeChild"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\browser\\fingerprint.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { AuthSdkError } from '../errors';\nimport { isFingerprintSupported } from '../features';\nimport {\n  addListener,\n  removeListener\n} from '../oidc';\nimport { FingerprintOptions, OktaAuthInterface } from '../types';\n\nexport default function fingerprint(sdk: OktaAuthInterface, options?: FingerprintOptions): Promise<string> {\n  options = options || {};\n\n  if (!isFingerprintSupported()) {\n    return Promise.reject(new AuthSdkError('Fingerprinting is not supported on this device'));\n  }\n\n  var timeout;\n  var iframe;\n  var listener;\n  var promise = new Promise(function (resolve, reject) {\n    iframe = document.createElement('iframe');\n    iframe.style.display = 'none';\n\n    // eslint-disable-next-line complexity\n    listener = function listener(e) {\n      if (!e || !e.data || e.origin !== sdk.getIssuerOrigin()) {\n        return;\n      }\n\n      try {\n        var msg = JSON.parse(e.data);\n      } catch (err) {\n        // iframe messages should all be parsable\n        // skip not parsable messages come from other sources in same origin (browser extensions)\n        // TODO: add namespace flag in okta-core to distinguish messages that come from other sources\n        return;\n      }\n\n      if (!msg) { return; }\n      if (msg.type === 'FingerprintAvailable') {\n        return resolve(msg.fingerprint as string);\n      }\n      if (msg.type === 'FingerprintServiceReady') {\n        e.source.postMessage(JSON.stringify({\n          type: 'GetFingerprint'\n        }), e.origin);\n      }\n    };\n    addListener(window, 'message', listener);\n\n    iframe.src = sdk.getIssuerOrigin() + '/auth/services/devicefingerprint';\n    document.body.appendChild(iframe);\n\n    timeout = setTimeout(function() {\n      reject(new AuthSdkError('Fingerprinting timed out'));\n    }, options?.timeout || 15000);\n  });\n\n  return promise.finally(function() {\n    clearTimeout(timeout);\n    removeListener(window, 'message', listener);\n    if (document.body.contains(iframe)) {\n      iframe.parentElement.removeChild(iframe);\n    }\n  }) as Promise<string>;\n}\n"]},"metadata":{},"sourceType":"module"}