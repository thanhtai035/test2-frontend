{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { getRequiredValues, getAllValues, titleCase, getAuthenticatorFromRemediation } from '../util.js';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util.js';\n\nvar Remediator = /*#__PURE__*/function () {\n  function Remediator(remediation) {\n    var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, Remediator);\n\n    this.values = Object.assign({}, values);\n    this.options = Object.assign({}, options);\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  _createClass(Remediator, [{\n    key: \"formatAuthenticators\",\n    value: function formatAuthenticators() {\n      this.values.authenticators = this.values.authenticators || [];\n      this.values.authenticators = this.values.authenticators.map(function (authenticator) {\n        return formatAuthenticator(authenticator);\n      });\n\n      if (this.values.authenticator) {\n        var authenticator = formatAuthenticator(this.values.authenticator);\n        var hasAuthenticatorInList = this.values.authenticators.some(function (existing) {\n          return compareAuthenticators(authenticator, existing);\n        });\n\n        if (!hasAuthenticatorInList) {\n          this.values.authenticators.push(authenticator);\n        }\n      }\n\n      this.values.authenticatorsData = this.values.authenticators.reduce(function (acc, authenticator) {\n        if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n          acc.push(authenticator);\n        }\n\n        return acc;\n      }, this.values.authenticatorsData || []);\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.remediation.name;\n    }\n  }, {\n    key: \"canRemediate\",\n    value: function canRemediate() {\n      var _this = this;\n\n      var required = getRequiredValues(this.remediation);\n      var needed = required.find(function (key) {\n        return !_this.hasData(key);\n      });\n\n      if (needed) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(key) {\n      var _this2 = this;\n\n      if (!key) {\n        var allValues = getAllValues(this.remediation);\n        var res = allValues.reduce(function (data, key) {\n          data[key] = _this2.getData(key);\n          return data;\n        }, {});\n        return res;\n      }\n\n      if (typeof this[\"map\".concat(titleCase(key))] === 'function') {\n        var val = this[\"map\".concat(titleCase(key))](this.remediation.value.find(function (_ref) {\n          var name = _ref.name;\n          return name === key;\n        }));\n\n        if (val) {\n          return val;\n        }\n      }\n\n      if (this.map && this.map[key]) {\n        var entry = this.map[key];\n\n        for (var i = 0; i < entry.length; i++) {\n          var _val = this.values[entry[i]];\n\n          if (_val) {\n            return _val;\n          }\n        }\n      }\n\n      return this.values[key];\n    }\n  }, {\n    key: \"hasData\",\n    value: function hasData(key) {\n      return !!this.getData(key);\n    }\n  }, {\n    key: \"getNextStep\",\n    value: function getNextStep(_authClient, _context) {\n      var name = this.getName();\n      var inputs = this.getInputs();\n      var authenticator = this.getAuthenticator();\n      var type = authenticator === null || authenticator === void 0 ? void 0 : authenticator.type;\n      return Object.assign(Object.assign({\n        name: name,\n        inputs: inputs\n      }, type && {\n        type: type\n      }), authenticator && {\n        authenticator: authenticator\n      });\n    }\n  }, {\n    key: \"getInputs\",\n    value: function getInputs() {\n      var _this3 = this;\n\n      var inputs = [];\n      var inputsFromRemediation = this.remediation.value || [];\n      inputsFromRemediation.forEach(function (inputFromRemediation) {\n        var input;\n        var name = inputFromRemediation.name,\n            type = inputFromRemediation.type,\n            visible = inputFromRemediation.visible,\n            messages = inputFromRemediation.messages;\n\n        if (visible === false) {\n          return;\n        }\n\n        if (typeof _this3[\"getInput\".concat(titleCase(name))] === 'function') {\n          input = _this3[\"getInput\".concat(titleCase(name))](inputFromRemediation);\n        } else if (type !== 'object') {\n          var alias;\n          var aliases = (_this3.map ? _this3.map[name] : null) || [];\n\n          if (aliases.length === 1) {\n            alias = aliases[0];\n          } else {\n            alias = aliases.find(function (name) {\n              return Object.keys(_this3.values).includes(name);\n            });\n          }\n\n          if (alias) {\n            input = Object.assign(Object.assign({}, inputFromRemediation), {\n              name: alias\n            });\n          }\n        }\n\n        if (!input) {\n          input = inputFromRemediation;\n        }\n\n        if (Array.isArray(input)) {\n          input.forEach(function (i) {\n            return inputs.push(i);\n          });\n        } else {\n          if (messages) {\n            input.messages = messages;\n          }\n\n          inputs.push(input);\n        }\n      });\n      return inputs;\n    }\n  }, {\n    key: \"getValuesAfterProceed\",\n    value: function getValuesAfterProceed() {\n      var inputsFromRemediation = this.remediation.value || [];\n      var inputsFromRemediator = this.getInputs();\n      var inputs = [].concat(_toConsumableArray(inputsFromRemediation), _toConsumableArray(inputsFromRemediator));\n\n      var _iterator = _createForOfIteratorHelper(inputs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var input = _step.value;\n          delete this.values[input.name];\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return this.values;\n    }\n  }, {\n    key: \"getAuthenticator\",\n    value: function getAuthenticator() {\n      var _a, _b;\n\n      var relatesTo = (_a = this.remediation.relatesTo) === null || _a === void 0 ? void 0 : _a.value;\n\n      if (!relatesTo) {\n        return;\n      }\n\n      var authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n\n      if (!authenticatorFromRemediation) {\n        return relatesTo;\n      }\n\n      var id = authenticatorFromRemediation.form.value.find(function (_ref2) {\n        var name = _ref2.name;\n        return name === 'id';\n      }).value;\n      var enrollmentId = (_b = authenticatorFromRemediation.form.value.find(function (_ref3) {\n        var name = _ref3.name;\n        return name === 'enrollmentId';\n      })) === null || _b === void 0 ? void 0 : _b.value;\n      return Object.assign(Object.assign({}, relatesTo), {\n        id: id,\n        enrollmentId: enrollmentId\n      });\n    }\n  }], [{\n    key: \"getMessages\",\n    value: function getMessages(remediation) {\n      var _a, _b;\n\n      if (!remediation.value) {\n        return;\n      }\n\n      return (_b = (_a = remediation.value[0]) === null || _a === void 0 ? void 0 : _a.form) === null || _b === void 0 ? void 0 : _b.value.reduce(function (messages, field) {\n        if (field.messages) {\n          messages = [].concat(_toConsumableArray(messages), _toConsumableArray(field.messages.value));\n        }\n\n        return messages;\n      }, []);\n    }\n  }]);\n\n  return Remediator;\n}();\n\nexport { Remediator };","map":{"version":3,"mappings":"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","names":["Remediator","remediation","values","options","Object","formatAuthenticators","authenticators","map","formatAuthenticator","authenticator","hasAuthenticatorInList","some","compareAuthenticators","existing","push","authenticatorsData","reduce","acc","keys","length","name","required","getRequiredValues","needed","find","key","hasData","allValues","getAllValues","res","data","getData","titleCase","val","value","entry","i","_authClient","_context","getName","inputs","getInputs","getAuthenticator","type","inputsFromRemediation","forEach","input","inputFromRemediation","visible","messages","alias","aliases","includes","Array","isArray","inputsFromRemediator","relatesTo","_a","authenticatorFromRemediation","getAuthenticatorFromRemediation","id","form","enrollmentId","_b","field"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\idx\\remediators\\Base\\Remediator.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\n/* eslint-disable complexity */\nimport { NextStep, IdxMessage, Authenticator, Input, RemediateOptions } from '../../types';\nimport { IdxAuthenticator, IdxRemediation, IdxContext } from '../../types/idx-js';\nimport { getAllValues, getRequiredValues, titleCase, getAuthenticatorFromRemediation } from '../util';\nimport { formatAuthenticator, compareAuthenticators } from '../../authenticator/util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\n// A map from IDX data values (server spec) to RemediationValues (client spec)\nexport type IdxToRemediationValueMap = Record<string, string[]>;\n\nexport interface RemediationValues {\n  stateHandle?: string;\n  authenticators?: (Authenticator | string)[];\n  authenticator?: string | Authenticator;\n  authenticatorsData?: Authenticator[];\n  resend?: boolean;\n}\n\nexport interface RemediatorConstructor {\n  new<T extends RemediationValues>(\n    remediation: IdxRemediation, \n    values?: T, \n    options?: RemediateOptions\n  ): any;\n}\n\n// Base class - DO NOT expose static remediationName\nexport class Remediator<T extends RemediationValues = RemediationValues> {\n  static remediationName: string;\n\n  remediation: IdxRemediation;\n  values: T;\n  options: RemediateOptions;\n  map?: IdxToRemediationValueMap;\n\n  constructor(\n    remediation: IdxRemediation, \n    values: T = {} as T, \n    options: RemediateOptions = {}\n  ) {\n    // assign fields to the instance\n    this.values = { ...values };\n    this.options = { ...options };\n    this.formatAuthenticators();\n    this.remediation = remediation;\n  }\n\n  private formatAuthenticators() {\n    this.values.authenticators = (this.values.authenticators || []) as Authenticator[];\n\n    // ensure authenticators are in the correct format\n    this.values.authenticators = this.values.authenticators.map(authenticator => {\n      return formatAuthenticator(authenticator);\n    });\n\n    // add authenticator (if any) to \"authenticators\"\n    if (this.values.authenticator) {\n      const authenticator = formatAuthenticator(this.values.authenticator);\n      const hasAuthenticatorInList = this.values.authenticators.some(existing => {\n        return compareAuthenticators(authenticator, existing);\n      });\n      if (!hasAuthenticatorInList) {\n        this.values.authenticators.push(authenticator);\n      }\n    }\n\n    // save non-key meta to \"authenticatorsData\" field\n    // authenticators will be removed after selection to avoid select-authenticator loop\n    this.values.authenticatorsData = this.values.authenticators.reduce((acc, authenticator) => {\n      if (typeof authenticator === 'object' && Object.keys(authenticator).length > 1) {\n        // save authenticator meta into authenticator data\n        acc.push(authenticator);\n      }\n      return acc;\n    }, this.values.authenticatorsData || []);\n  }\n\n  getName(): string {\n    return this.remediation.name;\n  }\n\n  // Override this method to provide custom check\n  /* eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars */\n  canRemediate(): boolean {\n    const required = getRequiredValues(this.remediation);\n    const needed = required!.find((key) => !this.hasData(key));\n    if (needed) {\n      return false; // missing data for a required field\n    }\n    return true; // all required fields have available data\n  }\n\n  // returns an object for the entire remediation form, or just a part\n  getData(key?: string) {\n\n    if (!key) {\n      let allValues = getAllValues(this.remediation);\n      let res = allValues!.reduce((data, key) => {\n        data[key] = this.getData(key); // recursive\n        return data;\n      }, {});\n      return res;\n    }\n\n    // Map value by \"map${Property}\" function in each subClass\n    if (typeof this[`map${titleCase(key)}`] === 'function') {\n      const val = this[`map${titleCase(key)}`](\n        this.remediation.value!.find(({name}) => name === key)\n      );\n      if (val) {\n        return val;\n      }\n    }\n\n    // If a map is defined for this key, return the first aliased property that returns a truthy value\n    if (this.map && this.map[key]) {\n      const entry = this.map[key];\n      for (let i = 0; i < entry.length; i++) {\n        let val = this.values[entry[i]];\n        if (val) {\n          return val;\n        }\n      }\n    }\n\n    // fallback: return the value by key\n    return this.values[key];\n  }\n\n  hasData(\n    key: string // idx name\n  ): boolean \n  {\n    // no attempt to format, we want simple true/false\n    return !!this.getData(key);\n  }\n\n  getNextStep(_authClient: OktaAuthIdxInterface, _context?: IdxContext): NextStep {\n    const name = this.getName();\n    const inputs = this.getInputs();\n    const authenticator = this.getAuthenticator();\n    // TODO: remove type field in the next major version change\n    // https://oktainc.atlassian.net/browse/OKTA-431749\n    const type = authenticator?.type;\n    return { \n      name, \n      inputs, \n      ...(type && { type }),\n      ...(authenticator && { authenticator }),\n    };\n  }\n\n  // Get inputs for the next step\n  getInputs(): Input[] {\n    const inputs: Input[] = [];\n    const inputsFromRemediation = this.remediation.value || [];\n    inputsFromRemediation.forEach(inputFromRemediation => {\n      let input;\n      let { name, type, visible, messages } = inputFromRemediation;\n      if (visible === false) {\n        return; // Filter out invisible inputs, like stateHandle\n      }\n      if (typeof this[`getInput${titleCase(name)}`] === 'function') {\n        input = this[`getInput${titleCase(name)}`](inputFromRemediation);\n      } else if (type !== 'object') {\n        // handle general primitive types\n        let alias;\n        const aliases = (this.map ? this.map[name] : null) || [];\n        if (aliases.length === 1) {\n          alias = aliases[0];\n        } else {\n          // try find key from values\n          alias = aliases.find(name => Object.keys(this.values).includes(name));\n        }\n        if (alias) {\n          input = { ...inputFromRemediation, name: alias };\n        }\n      }\n      if (!input) {\n        input = inputFromRemediation;\n      }\n      if (Array.isArray(input)) {\n        input.forEach(i => inputs.push(i));\n      } else {\n        // guarantees field-level messages are passed back\n        if (messages) {\n          input.messages = messages;\n        }\n        inputs.push(input);\n      }\n    });\n    return inputs;\n  }\n\n  static getMessages(remediation: IdxRemediation): IdxMessage[] | undefined {\n    if (!remediation.value) {\n      return;\n    }\n    return remediation.value[0]?.form?.value.reduce((messages: IdxMessage[], field) => {\n      if (field.messages) {\n        messages = [...messages, ...field.messages.value];\n      }\n      return messages;\n    }, []);\n  }\n\n  // Prepare values for the next remediation\n  // In general, remove used values from inputs for the current remediation\n  // Override this method if special cases need be handled\n  getValuesAfterProceed(): T {\n    const inputsFromRemediation = this.remediation.value || []; // \"raw\" inputs from server response\n    const inputsFromRemediator = this.getInputs(); // \"aliased\" inputs from SDK remediator\n    const inputs = [\n      ...inputsFromRemediation,\n      ...inputsFromRemediator\n    ];\n    // scrub all values related to this remediation\n    for (const input of inputs) {\n      delete this.values[input.name];\n    }\n    return this.values;\n  }\n\n  protected getAuthenticator(): IdxAuthenticator | undefined {\n    // relatesTo value may be an authenticator or an authenticatorEnrollment\n    const relatesTo = this.remediation.relatesTo?.value;\n    if (!relatesTo) {\n      return;\n    }\n\n    const authenticatorFromRemediation = getAuthenticatorFromRemediation(this.remediation);\n    if (!authenticatorFromRemediation) {\n      // Hopefully value is an authenticator\n      return relatesTo;\n    }\n\n    // If relatesTo is an authenticatorEnrollment, the id is actually the enrollmentId\n    // Let's get the correct authenticator id from the form value\n    const id = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'id')!.value as string;\n    const enrollmentId = authenticatorFromRemediation.form!.value\n      .find(({ name }) => name === 'enrollmentId')?.value as string;\n\n    return {\n      ...relatesTo,\n      id,\n      enrollmentId\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}