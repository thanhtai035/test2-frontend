{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { proceed } from './proceed.js';\nimport { getSavedTransactionMeta } from './transactionMeta.js';\nimport { warn } from '../util/console.js';\n\nasync function poll(authClient) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  let transaction = await proceed(authClient, {\n    startPolling: true\n  });\n  const meta = getSavedTransactionMeta(authClient);\n  let availablePollingRemeditaions = (_a = meta === null || meta === void 0 ? void 0 : meta.remediations) === null || _a === void 0 ? void 0 : _a.find(remediation => remediation.includes('poll'));\n\n  if (!(availablePollingRemeditaions === null || availablePollingRemeditaions === void 0 ? void 0 : availablePollingRemeditaions.length)) {\n    warn('No polling remediations available at the current IDX flow stage');\n  }\n\n  if (Number.isInteger(options.refresh)) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(async function () {\n        var _a, _b;\n\n        try {\n          const refresh = (_b = (_a = transaction.nextStep) === null || _a === void 0 ? void 0 : _a.poll) === null || _b === void 0 ? void 0 : _b.refresh;\n\n          if (refresh) {\n            resolve(poll(authClient, {\n              refresh\n            }));\n          } else {\n            resolve(transaction);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      }, options.refresh);\n    });\n  }\n\n  return transaction;\n}\n\nexport { poll };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAsBO,eAAeA,IAAf,CAAoBC,UAApB,EAAkF;EAAA,IAA5BC,OAA4B,uEAAF,EAAE;;;;EACvF,IAAIC,WAAW,GAAG,MAAMC,OAAO,CAACH,UAAD,EAAa;IAC1CI,YAAY,EAAE;EAD4B,CAAb,CAA/B;EAIA,MAAMC,IAAI,GAAGC,uBAAuB,CAACN,UAAD,CAApC;EACA,IAAIO,4BAA4B,GAAG,UAAI,SAAJ,QAAI,KAAJ,sBAAI,CAAEC,YAAN,MAAoB,IAApB,IAAoBC,aAApB,GAAoB,MAApB,GAAoBA,QAAKC,WAAW,IAAIA,WAAW,CAACC,QAAZ,CAAqB,MAArB,CAApB,CAAvD;;EACA,IAAI,EAACJ,4BAA4B,KAA5B,oCAA4B,WAA5B,GAA4B,MAA5B,+BAA4B,CAAEK,MAA/B,CAAJ,EAA2C;IACzCC,IAAI,CAAC,iEAAD,CAAJ;EACD;;EAED,IAAIC,MAAM,CAACC,SAAP,CAAiBd,OAAO,CAACe,OAAzB,CAAJ,EAAuC;IACrC,OAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAAyB;MAC1CC,UAAU,CAAC,kBAAK;;;QACd,IAAI;UACF,MAAMJ,OAAO,GAAG,uBAAW,CAACK,QAAZ,MAAsB,IAAtB,IAAsBZ,aAAtB,GAAsB,MAAtB,GAAsBA,OAAtB,MAA4B,IAA5B,IAA4Ba,aAA5B,GAA4B,MAA5B,GAA4BA,UAA5C;;UACA,IAAIN,OAAJ,EAAa;YACXE,OAAO,CAACnB,IAAI,CAACC,UAAD,EAAa;cACvBgB;YADuB,CAAb,CAAL,CAAP;UAGD,CAJD,MAIO;YACLE,OAAO,CAAChB,WAAD,CAAP;UACD;QACF,CATD,CASE,OAAOqB,GAAP,EAAY;UACZJ,MAAM,CAACI,GAAD,CAAN;QACD;MACF,CAbS,EAaPtB,OAAO,CAACe,OAbD,CAAV;IAcD,CAfM,CAAP;EAgBD;;EAED,OAAOd,WAAP;AACF","names":["poll","authClient","options","transaction","proceed","startPolling","meta","getSavedTransactionMeta","availablePollingRemeditaions","remediations","_a","remediation","includes","length","warn","Number","isInteger","refresh","Promise","resolve","reject","setTimeout","nextStep","_b","err"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2-s3760615\\node_modules\\@okta\\lib\\idx\\poll.ts"],"sourcesContent":["/*!\n * Copyright (c) 2021-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport { proceed } from './proceed';\n\nimport { \n  IdxPollOptions,\n  IdxTransaction,\n  OktaAuthIdxInterface,\n} from '../types';\nimport { getSavedTransactionMeta } from './transactionMeta';\nimport { warn } from '../util';\n\nexport async function poll(authClient: OktaAuthIdxInterface, options: IdxPollOptions = {}): Promise<IdxTransaction> {\n  let transaction = await proceed(authClient, {\n    startPolling: true\n  });\n\n  const meta = getSavedTransactionMeta(authClient);\n  let availablePollingRemeditaions = meta?.remediations?.find(remediation => remediation.includes('poll'));\n  if (!availablePollingRemeditaions?.length) {\n    warn('No polling remediations available at the current IDX flow stage');\n  }\n\n  if (Number.isInteger(options.refresh)) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(async function () {\n        try {\n          const refresh = transaction.nextStep?.poll?.refresh;\n          if (refresh) {\n            resolve(poll(authClient, {\n              refresh\n            }));\n          } else {\n            resolve(transaction);\n          }\n        } catch (err) {\n          reject(err);\n        }\n      }, options.refresh);\n    });\n  }\n\n  return transaction;\n}\n"]},"metadata":{},"sourceType":"module"}