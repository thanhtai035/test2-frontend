{"ast":null,"code":"/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { __rest } from '../_virtual/_tslib.js';\nimport { warn } from '../util/console.js';\nimport { split2 } from '../util/misc.js';\nimport * as index from './remediators/index.js';\nimport { GenericRemediator } from './remediators/GenericRemediator/GenericRemediator.js';\nimport { IdxFeature } from './types/api.js';\nimport { isIdxResponse } from './types/idx-js.js';\n\nfunction isTerminalResponse(idxResponse) {\n  const {\n    neededToProceed,\n    interactionCode\n  } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nfunction canSkipFn(idxResponse) {\n  return idxResponse.neededToProceed.some(_ref => {\n    let {\n      name\n    } = _ref;\n    return name === 'skip';\n  });\n}\n\nfunction canResendFn(idxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\n\nfunction getMessagesFromIdxRemediationValue(value) {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n\n  return value.reduce((messages, value) => {\n    if (value.messages) {\n      messages = [...messages, ...value.messages.value];\n    }\n\n    if (value.form) {\n      const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [...messages, ...messagesFromForm];\n    }\n\n    if (value.options) {\n      let optionValues = [];\n      value.options.forEach(option => {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n\n        optionValues = [...optionValues, option.value];\n      });\n      const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [...messages, ...messagesFromOptions];\n    }\n\n    return messages;\n  }, []);\n}\n\nfunction getMessagesFromResponse(idxResponse, options) {\n  var _a;\n\n  let messages = [];\n  const {\n    rawIdxState,\n    neededToProceed\n  } = idxResponse;\n  const globalMessages = (_a = rawIdxState.messages) === null || _a === void 0 ? void 0 : _a.value.map(message => message);\n\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages];\n  }\n\n  if (!options.useGenericRemediator) {\n    for (let remediation of neededToProceed) {\n      const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n\n      if (fieldMessages) {\n        messages = [...messages, ...fieldMessages];\n      }\n    }\n  }\n\n  const seen = {};\n  messages = messages.reduce((filtered, message) => {\n    var _a;\n\n    const key = (_a = message.i18n) === null || _a === void 0 ? void 0 : _a.key;\n\n    if (key && seen[key]) {\n      return filtered;\n    }\n\n    seen[key] = message;\n    filtered = [...filtered, message];\n    return filtered;\n  }, []);\n  return messages;\n}\n\nfunction getEnabledFeatures(idxResponse) {\n  const res = [];\n  const {\n    actions,\n    neededToProceed\n  } = idxResponse;\n\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY);\n  }\n\n  if (neededToProceed.some(_ref2 => {\n    let {\n      name\n    } = _ref2;\n    return name === 'select-enroll-profile';\n  })) {\n    res.push(IdxFeature.REGISTRATION);\n  }\n\n  if (neededToProceed.some(_ref3 => {\n    let {\n      name\n    } = _ref3;\n    return name === 'redirect-idp';\n  })) {\n    res.push(IdxFeature.SOCIAL_IDP);\n  }\n\n  if (neededToProceed.some(_ref4 => {\n    let {\n      name\n    } = _ref4;\n    return name === 'unlock-account';\n  })) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK);\n  }\n\n  return res;\n}\n\nfunction getAvailableSteps(authClient, idxResponse, useGenericRemediator) {\n  var _a;\n\n  const res = [];\n  const remediatorMap = Object.values(index).reduce((map, remediatorClass) => {\n    if (remediatorClass.remediationName) {\n      map[remediatorClass.remediationName] = remediatorClass;\n    }\n\n    return map;\n  }, {});\n\n  for (let remediation of idxResponse.neededToProceed) {\n    const T = getRemediatorClass(remediation, {\n      useGenericRemediator,\n      remediators: remediatorMap\n    });\n\n    if (T) {\n      const remediator = new T(remediation);\n      res.push(remediator.getNextStep(authClient, idxResponse.context));\n    }\n  }\n\n  for (const [name] of Object.entries(idxResponse.actions || {})) {\n    let stepObj = {\n      name,\n      action: async params => {\n        return authClient.idx.proceed({\n          actions: [{\n            name,\n            params\n          }]\n        });\n      }\n    };\n\n    if (name.startsWith('currentAuthenticator')) {\n      const [part1, part2] = split2(name, '-');\n      const actionObj = idxResponse.rawIdxState[part1].value[part2];\n\n      const rest = __rest(actionObj, [\"href\", \"method\", \"rel\", \"accepts\", \"produces\"]);\n\n      const value = (_a = actionObj.value) === null || _a === void 0 ? void 0 : _a.filter(item => item.name !== 'stateHandle');\n      stepObj = Object.assign(Object.assign(Object.assign({}, rest), value && {\n        value\n      }), stepObj);\n    }\n\n    res.push(stepObj);\n  }\n\n  return res;\n}\n\nfunction filterValuesForRemediation(idxResponse, remediationName, values) {\n  const remediations = idxResponse.neededToProceed || [];\n  const remediation = remediations.find(r => r.name === remediationName);\n\n  if (!remediation) {\n    warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n    return values;\n  }\n\n  const valuesForRemediation = remediation.value.reduce((res, entry) => {\n    const {\n      name,\n      value\n    } = entry;\n\n    if (name === 'stateHandle') {\n      res[name] = value;\n    } else {\n      res[name] = values[name];\n    }\n\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\n\nfunction getRemediatorClass(remediation, options) {\n  const {\n    useGenericRemediator,\n    remediators\n  } = options;\n\n  if (!remediation) {\n    return undefined;\n  }\n\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n\n  return remediators[remediation.name];\n}\n\nfunction getRemediator(idxRemediations, values, options) {\n  const remediators = options.remediators;\n  const useGenericRemediator = options.useGenericRemediator;\n  let remediator;\n\n  if (options.step) {\n    const remediation = idxRemediations.find(_ref5 => {\n      let {\n        name\n      } = _ref5;\n      return name === options.step;\n    });\n\n    if (remediation) {\n      const T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      warn(`step \"${options.step}\" did not match any remediations`);\n      return;\n    }\n  }\n\n  const remediatorCandidates = [];\n\n  if (useGenericRemediator) {\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    for (let remediation of idxRemediations) {\n      const isRemeditionInFlow = Object.keys(remediators).includes(remediation.name);\n\n      if (!isRemeditionInFlow) {\n        continue;\n      }\n\n      const T = getRemediatorClass(remediation, options);\n      remediator = new T(remediation, values, options);\n\n      if (remediator.canRemediate()) {\n        return remediator;\n      }\n\n      remediatorCandidates.push(remediator);\n    }\n  }\n\n  return remediatorCandidates[0];\n}\n\nfunction getNextStep(authClient, remediator, idxResponse) {\n  const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return Object.assign(Object.assign(Object.assign({}, nextStep), canSkip && {\n    canSkip\n  }), canResend && {\n    canResend\n  });\n}\n\nfunction handleIdxError(authClient, e) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let idxResponse = isIdxResponse(e) ? e : null;\n\n  if (!idxResponse) {\n    throw e;\n  }\n\n  idxResponse = Object.assign(Object.assign({}, idxResponse), {\n    requestDidSucceed: false\n  });\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getMessagesFromResponse(idxResponse, options);\n\n  if (terminal) {\n    return {\n      idxResponse,\n      terminal,\n      messages\n    };\n  } else {\n    const remediator = getRemediator(idxResponse.neededToProceed, {}, options);\n    const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return Object.assign({\n      idxResponse,\n      messages\n    }, nextStep && {\n      nextStep\n    });\n  }\n}\n\nexport { canResendFn, canSkipFn, filterValuesForRemediation, getAvailableSteps, getEnabledFeatures, getMessagesFromIdxRemediationValue, getMessagesFromResponse, getNextStep, getRemediator, handleIdxError, isTerminalResponse };","map":{"version":3,"mappings":"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","names":["isTerminalResponse","idxResponse","neededToProceed","interactionCode","length","canSkipFn","some","name","canResendFn","Object","keys","actions","actionName","includes","getMessagesFromIdxRemediationValue","value","Array","isArray","reduce","messages","form","messagesFromForm","options","optionValues","forEach","option","messagesFromOptions","rawIdxState","globalMessages","_a","map","message","useGenericRemediator","remediation","fieldMessages","seen","filtered","key","i18n","getEnabledFeatures","res","push","IdxFeature","PASSWORD_RECOVERY","REGISTRATION","SOCIAL_IDP","ACCOUNT_UNLOCK","getAvailableSteps","authClient","remediatorMap","values","remediators","remediatorClass","remediationName","T","getRemediatorClass","remediator","getNextStep","context","entries","stepObj","action","params","idx","proceed","startsWith","part1","part2","split2","actionObj","rest","filter","item","filterValuesForRemediation","remediations","find","r","warn","valuesForRemediation","entry","undefined","GenericRemediator","getRemediator","idxRemediations","step","remediatorCandidates","isRemeditionInFlow","canRemediate","nextStep","canSkip","canResend","handleIdxError","e","isIdxResponse","requestDidSucceed","terminal","getMessagesFromResponse"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\jobs-ui\\node_modules\\@okta\\lib\\idx\\util.ts"],"sourcesContent":["import { warn, split2 } from '../util';\nimport * as remediators from './remediators';\nimport { RemediationValues, Remediator, RemediatorConstructor } from './remediators';\nimport { GenericRemediator } from './remediators/GenericRemediator';\nimport { IdxFeature, NextStep, RemediateOptions, RemediationResponse, RunOptions } from './types';\nimport { IdxMessage, IdxRemediation, IdxRemediationValue, IdxResponse, isIdxResponse } from './types/idx-js';\nimport { OktaAuthIdxInterface } from '../types';\n\nexport function isTerminalResponse(idxResponse: IdxResponse) {\n  const { neededToProceed, interactionCode } = idxResponse;\n  return !neededToProceed.length && !interactionCode;\n}\n\nexport function canSkipFn(idxResponse: IdxResponse) {\n  return idxResponse.neededToProceed.some(({ name }) => name === 'skip');\n}\n\nexport function canResendFn(idxResponse: IdxResponse) {\n  return Object.keys(idxResponse.actions).some(actionName => actionName.includes('resend'));\n}\n\nexport function getMessagesFromIdxRemediationValue(\n  value?: IdxRemediationValue[]\n): IdxMessage[] | undefined {\n  if (!value || !Array.isArray(value)) {\n    return;\n  }\n  return value.reduce((messages, value) => {\n    if (value.messages) {\n      messages = [...messages, ...value.messages.value] as never;\n    }\n    if (value.form) {\n      const messagesFromForm = getMessagesFromIdxRemediationValue(value.form.value) || [];\n      messages = [...messages, ...messagesFromForm] as never;\n    } \n    if (value.options) {\n      let optionValues = [];\n      value.options.forEach(option => {\n        if (!option.value || typeof option.value === 'string') {\n          return;\n        }\n        optionValues = [...optionValues, option.value] as never;\n      });\n      const messagesFromOptions = getMessagesFromIdxRemediationValue(optionValues) || [];\n      messages = [...messages, ...messagesFromOptions] as never;\n    }\n    return messages;\n  }, []);\n}\n\nexport function getMessagesFromResponse(idxResponse: IdxResponse, options: RunOptions): IdxMessage[] {\n  let messages: IdxMessage[] = [];\n  const { rawIdxState, neededToProceed } = idxResponse;\n\n  // Handle global messages\n  const globalMessages = rawIdxState.messages?.value.map(message => message);\n  if (globalMessages) {\n    messages = [...messages, ...globalMessages] as never;\n  }\n\n  // Handle field messages for current flow\n  // Preserve existing logic for general cases, remove in the next major version\n  // Follow ion response format for top level messages when useGenericRemediator is true\n  if (!options.useGenericRemediator) {\n    for (let remediation of neededToProceed) {\n      const fieldMessages = getMessagesFromIdxRemediationValue(remediation.value);\n      if (fieldMessages) {\n        messages = [...messages, ...fieldMessages] as never;\n      }\n    }\n  }\n\n  // API may return identical error on same field, filter by i18n key\n  const seen = {};\n  messages = messages.reduce((filtered, message) => {\n    const key = message.i18n?.key;\n    if (key && seen[key]) {\n      return filtered;\n    }\n    seen[key] = message;\n    filtered = [...filtered, message] as never;\n    return filtered;\n  }, []);\n  return messages;\n}\n\n\nexport function getEnabledFeatures(idxResponse: IdxResponse): IdxFeature[] {\n  const res = [];\n  const { actions, neededToProceed } = idxResponse;\n\n  if (actions['currentAuthenticator-recover']) {\n    res.push(IdxFeature.PASSWORD_RECOVERY as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'select-enroll-profile')) {\n    res.push(IdxFeature.REGISTRATION as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'redirect-idp')) {\n    res.push(IdxFeature.SOCIAL_IDP as never);\n  }\n\n  if (neededToProceed.some(({ name }) => name === 'unlock-account')) {\n    res.push(IdxFeature.ACCOUNT_UNLOCK as never);\n  }\n\n  return res;\n}\n\nexport function getAvailableSteps(\n  authClient: OktaAuthIdxInterface, \n  idxResponse: IdxResponse, \n  useGenericRemediator?: boolean\n): NextStep[] {\n  const res: NextStep[] = [];\n\n  const remediatorMap: Record<string, RemediatorConstructor> = Object.values(remediators)\n    .reduce((map, remediatorClass) => {\n      // Only add concrete subclasses to the map\n      if (remediatorClass.remediationName) {\n        map[remediatorClass.remediationName] = remediatorClass;\n      }\n      return map;\n    }, {});\n\n  for (let remediation of idxResponse.neededToProceed) {\n    const T = getRemediatorClass(remediation, { useGenericRemediator, remediators: remediatorMap });\n    if (T) {\n      const remediator: Remediator = new T(remediation);\n      res.push (remediator.getNextStep(authClient, idxResponse.context) as never);\n    }\n  }\n\n  for (const [name] of Object.entries((idxResponse.actions || {}))) {\n    let stepObj = {\n      name, \n      action: async (params?) => {\n        return authClient.idx.proceed({ \n          actions: [{ name, params }] \n        });\n      }\n    };\n    if (name.startsWith('currentAuthenticator')) {\n      const [part1, part2] = split2(name, '-');\n      const actionObj = idxResponse.rawIdxState[part1].value[part2];\n      /* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const {\n        href, \n        method, \n        rel, \n        accepts, \n        produces, \n        ...rest\n      } = actionObj;\n      /* eslint-enable no-unused-vars, @typescript-eslint/no-unused-vars */\n      const value = actionObj.value?.filter(item => item.name !== 'stateHandle');\n      stepObj = { \n        ...rest,  \n        ...(value && { value }),\n        ...stepObj,\n      };\n    }\n    res.push(stepObj);\n  }\n\n  return res;\n}\n\nexport function filterValuesForRemediation(\n  idxResponse: IdxResponse,\n  remediationName: string,\n  values: RemediationValues\n): RemediationValues {\n  const remediations = idxResponse.neededToProceed || [];\n  const remediation = remediations.find(r => r.name === remediationName);\n  if (!remediation) {\n    // step was specified, but remediation was not found. This is unexpected!\n    warn(`filterValuesForRemediation: \"${remediationName}\" did not match any remediations`);\n    return values;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const valuesForRemediation = remediation.value!.reduce((res, entry) => {\n    const { name, value } = entry;\n    if (name === 'stateHandle') {\n      res[name] = value; // use the stateHandle value in the remediation\n    } else {\n      res[name] = values[name]; // use the value provided by the caller\n    }\n    return res;\n  }, {});\n  return valuesForRemediation;\n}\n\nfunction getRemediatorClass(remediation: IdxRemediation, options: RemediateOptions) {\n  const { useGenericRemediator, remediators } = options;\n  \n  if (!remediation) {\n    return undefined;\n  }\n\n  if (useGenericRemediator) {\n    return GenericRemediator;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return remediators![remediation.name];\n}\n\n// Return first match idxRemediation in allowed remediators\n// eslint-disable-next-line complexity\nexport function getRemediator(\n  idxRemediations: IdxRemediation[],\n  values: RemediationValues,\n  options: RemediateOptions,\n): Remediator | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const remediators = options.remediators!;\n  const useGenericRemediator = options.useGenericRemediator;\n\n  let remediator: Remediator;\n  // remediation name specified by caller - fast-track remediator lookup \n  if (options.step) {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const remediation = idxRemediations.find(({ name }) => name === options.step)!;\n    if (remediation) {\n      const T = getRemediatorClass(remediation, options);\n      return T ? new T(remediation, values, options) : undefined;\n    } else {\n      // step was specified, but remediation was not found. This is unexpected!\n      warn(`step \"${options.step}\" did not match any remediations`);\n      return;\n    }\n  }\n\n  const remediatorCandidates: Remediator[] = [];\n  if (useGenericRemediator) {\n    // always pick the first remediation for when use GenericRemediator\n    remediatorCandidates.push(new GenericRemediator(idxRemediations[0], values, options));\n  } else {\n    for (let remediation of idxRemediations) {\n      const isRemeditionInFlow = Object.keys(remediators as object).includes(remediation.name);\n      if (!isRemeditionInFlow) {\n        continue;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const T = getRemediatorClass(remediation, options)!;\n      remediator = new T(remediation, values, options);\n      if (remediator.canRemediate()) {\n        // found the remediator\n        return remediator;\n      }\n      // remediator cannot handle the current values\n      // maybe return for next step\n      remediatorCandidates.push(remediator);  \n    }\n  }\n  \n  return remediatorCandidates[0];\n}\n\n\nexport function getNextStep(\n  authClient: OktaAuthIdxInterface, remediator: Remediator, idxResponse: IdxResponse\n): NextStep {\n  const nextStep = remediator.getNextStep(authClient, idxResponse.context);\n  const canSkip = canSkipFn(idxResponse);\n  const canResend = canResendFn(idxResponse);\n  return {\n    ...nextStep,\n    ...(canSkip && {canSkip}),\n    ...(canResend && {canResend}),\n  };\n}\n\nexport function handleIdxError(authClient: OktaAuthIdxInterface, e, options = {}): RemediationResponse {\n  // Handle idx messages\n  let idxResponse = isIdxResponse(e) ? e : null;\n  if (!idxResponse) {\n    // Thrown error terminates the interaction with idx\n    throw e;\n  }\n  idxResponse = {\n    ...idxResponse,\n    requestDidSucceed: false\n  };\n  const terminal = isTerminalResponse(idxResponse);\n  const messages = getMessagesFromResponse(idxResponse, options);\n  if (terminal) {\n    return { idxResponse, terminal, messages };\n  } else {\n    const remediator = getRemediator(idxResponse.neededToProceed, {}, options);\n    const nextStep = remediator && getNextStep(authClient, remediator, idxResponse);\n    return {\n      idxResponse,\n      messages,\n      ...(nextStep && { nextStep }),\n    };\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module"}