{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/ADMIN/Downloads/okta-springboot-react-master/okta-springboot-react-master/test2/test2-s3760615-front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport { post } from '../http/request.js';\nimport { toQueryString } from '../util/url.js';\nimport { getOAuthUrls } from './util/oauth.js';\nimport AuthSdkError from '../errors/AuthSdkError.js';\nimport { btoa as b } from '../crypto/browser.js';\n\nfunction revokeToken(_x, _x2) {\n  return _revokeToken.apply(this, arguments);\n}\n\nfunction _revokeToken() {\n  _revokeToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sdk, token) {\n    var accessToken, refreshToken, clientId, clientSecret, revokeUrl, args, creds;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            accessToken = '';\n            refreshToken = '';\n\n            if (token) {\n              accessToken = token.accessToken;\n              refreshToken = token.refreshToken;\n            }\n\n            if (!(!accessToken && !refreshToken)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new AuthSdkError('A valid access or refresh token object is required');\n\n          case 5:\n            clientId = sdk.options.clientId;\n            clientSecret = sdk.options.clientSecret;\n\n            if (clientId) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to revoke a token');\n\n          case 9:\n            revokeUrl = getOAuthUrls(sdk).revokeUrl;\n            args = toQueryString({\n              token_type_hint: refreshToken ? 'refresh_token' : 'access_token',\n              token: refreshToken || accessToken\n            }).slice(1);\n            creds = clientSecret ? b(\"\".concat(clientId, \":\").concat(clientSecret)) : b(clientId);\n            return _context.abrupt(\"return\", post(sdk, revokeUrl, args, {\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + creds\n              }\n            }));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _revokeToken.apply(this, arguments);\n}\n\nexport { revokeToken };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;SA6BsBA,W;;;;;4EAAf,iBAA2BC,GAA3B,EAAuDC,KAAvD;IAAA;IAAA;MAAA;QAAA;UAAA;YACDC,WADC,GACa,EADb;YAEDC,YAFC,GAEc,EAFd;;YAGL,IAAIF,KAAJ,EAAW;cACPC,WAAW,GAAID,KAAqB,CAACC,WAArC;cACAC,YAAY,GAAIF,KAAsB,CAACE,YAAvC;YACH;;YANI,MAOF,CAACD,WAAD,IAAgB,CAACC,YAPf;cAAA;cAAA;YAAA;;YAAA,MAQG,IAAIC,YAAJ,CAAiB,oDAAjB,CARH;;UAAA;YAUDC,QAVC,GAUUL,GAAG,CAACM,OAAJ,CAAYD,QAVtB;YAWDE,YAXC,GAWcP,GAAG,CAACM,OAAJ,CAAYC,YAX1B;;YAAA,IAYAF,QAZA;cAAA;cAAA;YAAA;;YAAA,MAaG,IAAID,YAAJ,CAAiB,4EAAjB,CAbH;;UAAA;YAgBDI,SAhBC,GAgBWC,YAAY,CAACT,GAAD,CAAZ,CAAkBQ,SAhB7B;YAiBDE,IAjBC,GAiBMC,aAAa,CAAC;cAEvBC,eAAe,EAAET,YAAY,GAAG,eAAH,GAAqB,cAF3B;cAGvBF,KAAK,EAAEE,YAAY,IAAID;YAHA,CAAD,CAAb,CAIRW,KAJQ,CAIF,CAJE,CAjBN;YAsBDC,KAtBC,GAsBOP,YAAY,GAAGQ,CAAI,WAAIV,QAAJ,cAAgBE,YAAhB,EAAP,GAAyCQ,CAAI,CAACV,QAAD,CAtBhE;YAAA,iCAuBEW,IAAI,CAAChB,GAAD,EAAMQ,SAAN,EAAiBE,IAAjB,EAAuB;cAChCO,OAAO,EAAE;gBACP,gBAAgB,mCADT;gBAEP,iBAAiB,WAAWH;cAFrB;YADuB,CAAvB,CAvBN;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","names":["revokeToken","sdk","token","accessToken","refreshToken","AuthSdkError","clientId","options","clientSecret","revokeUrl","getOAuthUrls","args","toQueryString","token_type_hint","slice","creds","btoa","post","headers"],"sources":["C:\\Users\\ADMIN\\Downloads\\okta-springboot-react-master\\okta-springboot-react-master\\test2\\test2-s3760615-front-end\\node_modules\\@okta\\lib\\oidc\\revokeToken.ts"],"sourcesContent":["/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n *\n */\n\n/* eslint complexity:[0,8] */\nimport { post } from '../http';\nimport { toQueryString } from '../util';\nimport {\n  getOAuthUrls,\n} from './util/oauth';\nimport { btoa } from '../crypto';\nimport AuthSdkError from '../errors/AuthSdkError';\nimport {\n  OktaAuthOIDCInterface,\n  RevocableToken,\n  AccessToken,\n  RefreshToken\n} from '../types';\n\n// refresh tokens have precedence to be revoked if no token is specified\nexport async function revokeToken(sdk: OktaAuthOIDCInterface, token: RevocableToken): Promise<any> {\n  let accessToken = '';\n  let refreshToken = '';\n  if (token) { \n      accessToken = (token as AccessToken).accessToken;\n      refreshToken = (token as RefreshToken).refreshToken;  \n  }\n  if(!accessToken && !refreshToken) { \n    throw new AuthSdkError('A valid access or refresh token object is required');\n  }\n  var clientId = sdk.options.clientId;\n  var clientSecret = sdk.options.clientSecret;\n  if (!clientId) {\n    throw new AuthSdkError('A clientId must be specified in the OktaAuth constructor to revoke a token');\n  }\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  var revokeUrl = getOAuthUrls(sdk).revokeUrl!;\n  var args = toQueryString({\n    // eslint-disable-next-line camelcase\n    token_type_hint: refreshToken ? 'refresh_token' : 'access_token', \n    token: refreshToken || accessToken,\n  }).slice(1);\n  var creds = clientSecret ? btoa(`${clientId}:${clientSecret}`) : btoa(clientId);\n  return post(sdk, revokeUrl, args, {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': 'Basic ' + creds\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}