{"version":3,"file":"emailApi.js","names":["getEmails","oktaAuth","options","transaction","url","method","accessToken","transactionClassName","getEmail","id","addEmail","payload","deleteEmail","sendEmailChallenge","getEmailChallenge","emailId","challengeId","verifyEmailChallenge"],"sources":["../../../lib/myaccount/emailApi.ts"],"sourcesContent":["import { sendRequest } from './request';\nimport { \n  IAPIFunction, \n  BaseTransaction, \n  EmailTransaction, \n  EmailChallengeTransaction \n} from './types';\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmails: IAPIFunction<EmailTransaction[]> = async (\n  oktaAuth,\n  options?\n) => {\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'GET',\n    accessToken: options?.accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction[];\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmail: IAPIFunction<EmailTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'GET',\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const addEmail: IAPIFunction<EmailTransaction> = async (\n  oktaAuth, \n  options\n): Promise<EmailTransaction> => {\n  const { accessToken, payload } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: '/idp/myaccount/emails',\n    method: 'POST',\n    payload,\n    accessToken,\n    transactionClassName: 'EmailTransaction'\n  }) as EmailTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const deleteEmail: IAPIFunction<BaseTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}`,\n    method: 'DELETE',\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const sendEmailChallenge: IAPIFunction<EmailChallengeTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { id, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${id}/challenge`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  }) as EmailChallengeTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.read\n */\nexport const getEmailChallenge: IAPIFunction<EmailChallengeTransaction> = async (\n  oktaAuth, \n  options\n) => {\n  const { emailId, challengeId, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}`,\n    method: 'POST',\n    accessToken,\n    transactionClassName: 'EmailChallengeTransaction'\n  }) as EmailChallengeTransaction;\n  return transaction;\n};\n\n/**\n * @scope: okta.myaccount.email.manage\n */\nexport const verifyEmailChallenge: IAPIFunction<BaseTransaction> = async (\n  oktaAuth,\n  options\n) => {\n  const { emailId, challengeId, payload, accessToken } = options!;\n  const transaction = await sendRequest(oktaAuth, {\n    url: `/idp/myaccount/emails/${emailId}/challenge/${challengeId}/verify`,\n    method: 'POST',\n    payload,\n    accessToken\n  }) as BaseTransaction;\n  return transaction;\n};\n"],"mappings":"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"}