{"version":3,"file":"AuthenticatorData.js","names":["AuthenticatorData","Remediator","constructor","remediation","values","authenticator","getAuthenticator","formatAuthenticatorData","authenticatorData","getAuthenticatorData","authenticatorsData","data","mapAuthenticatorDataFromValues","push","canRemediate","some","getNextStep","authClient","common","options","getMethodTypes","methodType","id","enrollmentId","getAuthenticatorFromRemediation","value","name","form","getValuesAfterProceed"],"sources":["../../../../../lib/idx/remediators/Base/AuthenticatorData.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/*!\n * Copyright (c) 2015-present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * \n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nimport { Remediator, RemediationValues } from './Remediator';\nimport { IdxRemediationValue, IdxOption, IdxRemediation, IdxAuthenticator } from '../../types/idx-js';\nimport { isAuthenticator } from '../../types';\nimport { compareAuthenticators } from '../../authenticator/util';\nimport { OktaAuthIdxInterface } from '../../../types';\n\nexport type AuthenticatorDataValues = RemediationValues & {\n  methodType?: string;\n};\n\n// Base class - DO NOT expose static remediationName\nexport class AuthenticatorData<T extends AuthenticatorDataValues = AuthenticatorDataValues> extends Remediator<T> {\n  authenticator: IdxAuthenticator;\n\n  constructor(remediation: IdxRemediation, values: T = {} as T) {\n    super(remediation, values);\n\n    // set before other data calculation\n    this.authenticator = this.getAuthenticator()!;\n\n    this.formatAuthenticatorData();\n  }\n\n  protected formatAuthenticatorData() {\n    const authenticatorData = this.getAuthenticatorData();\n    if (authenticatorData) {\n      this.values.authenticatorsData = this.values.authenticatorsData!.map(data => {\n        if (compareAuthenticators(this.authenticator, data)) {\n          return this.mapAuthenticatorDataFromValues(data);\n        }\n        return data;\n      });\n    } else {\n      const data = this.mapAuthenticatorDataFromValues();\n      if (data) {\n        this.values.authenticatorsData!.push(data);\n      }\n    }\n  }\n\n  protected getAuthenticatorData() {\n    return this.values.authenticatorsData!\n      .find((data) => compareAuthenticators(this.authenticator, data));\n  }\n\n  canRemediate() {\n    return this.values.authenticatorsData!\n      .some(data => compareAuthenticators(this.authenticator, data));\n  }\n\n  // TODO: remove this override method in the next major version - OKTA-491236\n  getNextStep(authClient: OktaAuthIdxInterface) {\n    const common = super.getNextStep(authClient);\n    const options = this.getMethodTypes();\n    return { \n      ...common, \n      ...(options && { options }) \n    };\n  }\n\n  protected mapAuthenticatorDataFromValues(authenticatorData?) {\n    // add methodType to authenticatorData if it exists in values\n    let { methodType, authenticator } = this.values;\n    if (!methodType && isAuthenticator(authenticator)) {\n     methodType = authenticator?.methodType;\n    }\n    \n    const { id, enrollmentId } = this.authenticator;\n    const data = { \n      id,\n      enrollmentId,\n      ...(authenticatorData && authenticatorData),\n      ...(methodType && { methodType }) \n    };\n\n    return data.methodType ? data : null;\n  }\n\n  protected getAuthenticatorFromRemediation(): IdxRemediationValue {\n    const authenticator = this.remediation.value!\n      .find(({ name }) => name === 'authenticator') as IdxRemediationValue;\n    return authenticator;\n  }\n\n  private getMethodTypes(): IdxOption[] {\n    const authenticator: IdxRemediationValue = this.getAuthenticatorFromRemediation();\n    return authenticator.form!.value.find(({ name }) => name === 'methodType')?.options as IdxOption[];\n  }\n\n  getValuesAfterProceed(): T {\n    this.values = super.getValuesAfterProceed();\n    // remove used authenticatorData\n    const authenticatorsData = this.values.authenticatorsData!\n      .filter(data => compareAuthenticators(this.authenticator, data) !== true);\n    return { ...this.values, authenticatorsData };\n  }\n}\n"],"mappings":"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"}